<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:j.0="http://www.w3.org/2018/mycard-rdf/1.0#">
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/400">
    <j.0:BadExample>// put elephant into fridge
put(elephant, fridge);  </j.0:BadExample>
    <j.0:Rule>Proper naming and clear code structure are self-explanatory. Too many comments need to be avoided because it may cause too much work on updating if code logic changes.</j.0:Rule>
    <j.0:ExcelId>alibaba_109</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/">
        <j.0:OntologyType>Document</j.0:OntologyType>
        <j.0:ProgrammingLanguage>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#ProgrammingLanguage/java">
            <j.0:OntologyType>ProgrammingLanguage</j.0:OntologyType>
            <j.0:Language>java</j.0:Language>
          </rdf:Description>
        </j.0:ProgrammingLanguage>
        <j.0:DocumentUrl>https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/</j.0:DocumentUrl>
      </rdf:Description>
    </j.0:Source>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/424">
    <j.0:Rule>Log files need to be kept for at least 15 days because some kinds of exceptions happen weekly.</j.0:Rule>
    <j.0:ExcelId>alibaba_133</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/206">
    <j.0:FatherName>Declarations</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Name>Number Per Line</j.0:Name>
    <j.0:RuleExplanation>One declaration per line is recommended since it encourages commenting.</j.0:RuleExplanation>
    <j.0:Rule>One declaration per line is recommended</j.0:Rule>
    <j.0:BadExample>int level, size;</j.0:BadExample>
    <j.0:ExcelId>codeConvention_33</j.0:ExcelId>
    <j.0:SecondaryTypeList>Number Per Line</j.0:SecondaryTypeList>
    <j.0:Source>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html">
        <j.0:OntologyType>Document</j.0:OntologyType>
        <j.0:ProgrammingLanguage>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#ProgrammingLanguage/Java">
            <j.0:OntologyType>ProgrammingLanguage</j.0:OntologyType>
            <j.0:Language>Java</j.0:Language>
          </rdf:Description>
        </j.0:ProgrammingLanguage>
        <j.0:DocumentUrl>http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html</j.0:DocumentUrl>
      </rdf:Description>
    </j.0:Source>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/206/prosCluster/0">
        <j.0:ProsExample>int level; // indentation level
int size;  // size of table</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>Declarations</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/315">
    <j.0:Rule>Value Object: *VO, where * is a website name in most cases.</j.0:Rule>
    <j.0:ExcelId>alibaba_24</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/448">
    <j.0:RuleExplanation>Normally for char columns, an index with the length of 20 can distinguish more than 90% data, which is calculated by count(distinct left(column_name, index_length)) / count()*.</j.0:RuleExplanation>
    <j.0:Rule> Index length must be specified when adding index on varchar columns. The index length should be set according to the distribution of data.</j.0:Rule>
    <j.0:ExcelId>alibaba_157</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/9">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/9/prosCluster/0">
        <j.0:Pros>Reduce complexity by reducing the number of terms and names used. Also makes it easy to deduce the type given a variable name only.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:BadExample>void setTopic(Topic* value)</j.0:BadExample>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:Source>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html">
        <j.0:OntologyType>Document</j.0:OntologyType>
        <j.0:ProgrammingLanguage>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#ProgrammingLanguage/cpp">
            <j.0:OntologyType>ProgrammingLanguage</j.0:OntologyType>
            <j.0:Language>cpp</j.0:Language>
          </rdf:Description>
        </j.0:ProgrammingLanguage>
        <j.0:DocumentUrl>http://geosoft.no/development/cppstyle.html</j.0:DocumentUrl>
      </rdf:Description>
    </j.0:Source>
    <j.0:Rule>Generic variables should have the same name as their type.</j.0:Rule>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_10</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/8">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/8/consCluster0">
        <j.0:ConsExample>void setDepth (int depth)
  {
    depth_ = depth;
  }</j.0:ConsExample>
        <j.0:Cons>A side effect of the underscore naming convention is that it nicely resolves the problem of finding reasonable variable names for setter methods and constructors</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/8/prosCluster/0">
        <j.0:Pros>Indicating class scope by using underscore makes it easy to distinguish class variables from local scratch variables. This is important because class variables are considered to have higher significance than method variables, and should be treated with special care by the programmer.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ExcelId>geosoft_9</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:Rule>Private class variables should have underscore suffix.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/449">
    <j.0:RuleExplanation>Index files have B-Tree’s left most prefix matching characteristic. Index cannot be applied if left prefix value is not determined.</j.0:RuleExplanation>
    <j.0:Rule>LIKE ‘%…’ or LIKE ‘%…%’ are not allowed when searching with pagination. Search engine can be used if it is really needed.</j.0:Rule>
    <j.0:ExcelId>alibaba_158</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/94">
    <j.0:Rule>Aside from the line terminator sequence, the ASCII horizontal space character (0x20) is the only whitespace character that appears anywhere in a source file. </j.0:Rule>
    <j.0:SecondaryTypeList>Whitespace characters</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Special characters</j.0:PrimaryTypeList>
    <j.0:FatherName>Special characters</j.0:FatherName>
    <j.0:Name>Whitespace characters</j.0:Name>
    <j.0:ExcelId>google_3</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html">
        <j.0:OntologyType>Document</j.0:OntologyType>
        <j.0:ProgrammingLanguage rdf:resource="http://www.semanticweb.org/CCBase/#ProgrammingLanguage/java"/>
        <j.0:DocumentUrl>https://google.github.io/styleguide/javaguide.html</j.0:DocumentUrl>
      </rdf:Description>
    </j.0:Source>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/207">
    <j.0:BadExample>long dbaddr, getDbaddr(); // WRONG!s</j.0:BadExample>
    <j.0:Rule>In absolutely no case should variables and functions be declared on the same line.</j.0:Rule>
    <j.0:ExcelId>codeConvention_34</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/70">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:Name>Layout</j.0:Name>
    <j.0:ExcelId>geosoft_71</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/70/prosCluster/0">
        <j.0:ProsExample>while (condition) {
  statements;
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A while statement should have the following form:</j.0:Rule>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/314">
    <j.0:Rule>Data Transfer Object: *DTO, where * is a domain-related name.</j.0:Rule>
    <j.0:ExcelId>alibaba_23</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/423">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/423/prosCluster/0">
        <j.0:ProsExample>import org.slf4j.Logger; 
import org.slf4j.LoggerFactory;
private static final Logger logger = LoggerFactory.getLogger(Abc.class); </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Do not use API in log system (Log4j, Logback) directly. API in log framework SLF4J is recommended to use instead, which uses Facade pattern and is conducive to keep log processing consistent.</j.0:Rule>
    <j.0:SecondaryTypeList>Logs</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Logs</j.0:PrimaryTypeList>
    <j.0:FatherName>Logs</j.0:FatherName>
    <j.0:Name>Logs</j.0:Name>
    <j.0:ExcelId>alibaba_132</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/338">
    <j.0:RuleExplanation>Consider this assignment: Integer var = ?. When it fits the range from -128 to 127, we can use == directly for a comparison. Because the Integer object will be generated by IntegerCache.cache, which reuses an existing object. Nevertheless, when it fits the complementary set of the former range, the Integer object will be allocated in the heap, which does not reuse an existing object. This is a pitfall. Hence the equals method is recommended.</j.0:RuleExplanation>
    <j.0:Rule>Use the equals method, rather than reference equality ‘==’, to compare primitive wrapper classes.</j.0:Rule>
    <j.0:ExcelId>alibaba_47</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/447">
    <j.0:RuleExplanation>Indexing and SQL performance should be considered even if only 2 tables are joined.</j.0:RuleExplanation>
    <j.0:Rule>JOIN is not allowed if more than three tables are involved. Columns to be joined must be with absolutely similar data types. Make sure that columns to be joined are indexed.</j.0:Rule>
    <j.0:ExcelId>alibaba_156</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/205">
    <j.0:Rationale>  </j.0:Rationale>
    <j.0:RuleExplanation>Because Java associates documentation comments with the first declaration after the comment.</j.0:RuleExplanation>
    <j.0:Rule>Doc comments should not be positioned inside a method or constructor definition block</j.0:Rule>
    <j.0:ExcelId>codeConvention_32</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/7">
    <j.0:Rule>Global variables should always be referred to using the :: operator.</j.0:Rule>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_8</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/339">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/339/consCluster0">
        <j.0:Cons>Consider the output of a transaction volume’s amplitude, like ±x%. As a primitive data, when it comes to a failure of calling a RPC service, the default return value: 0% will be assigned, which is not correct. A hyphen like - should be assigned instead. Therefore, the null value of a wrapper class can represent additional information, such as a failure of calling a RPC service, an abnormal exit, etc.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/339/prosCluster/0">
        <j.0:Pros>As the result of a database query may be null, assigning it to a primitive date type will cause a risk of NullPointerException because of autoboxing. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation> In order to remind the consumer of explicit assignments, there are no initial values for members in a POJO class. As a consumer, you should check problems such as NullPointerException and warehouse entries for yourself. </j.0:RuleExplanation>
    <j.0:Rule>Rules for using primitive data types and wrapper classes: 
  1) Members of a POJO class must be wrapper classes.
  2) The return value and arguments of a RPC method must be wrapper classes. 
  3) Local variables should be primitive data types.</j.0:Rule>
    <j.0:ExcelId>alibaba_48</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/93">
    <j.0:Rule>Source files are encoded in UTF-8.</j.0:Rule>
    <j.0:SecondaryTypeList>File encoding</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>File encoding</j.0:PrimaryTypeList>
    <j.0:FatherName>File encoding</j.0:FatherName>
    <j.0:Name>File encoding</j.0:Name>
    <j.0:ExcelId>google_2</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/422">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/422/prosCluster/0">
        <j.0:ProsExample>For a class with a number of public methods that validate parameters in the same way, it is better to extract a method like:

private boolean checkParam (DTO dto) {
    ...
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>Copying and pasting code arbitrarily will inevitably lead to duplicated code. If you keep logic in one place, it is easier to change when needed. If necessary, extract common codes to methods, abstract classes or even shared modules.</j.0:RuleExplanation>
    <j.0:Rule>Avoid duplicate code (Do not Repeat Yourself, also known as DRY principle).</j.0:Rule>
    <j.0:ExcelId>alibaba_131</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/204">
    <j.0:Rule>The first line of doc comment (/**) for classes and interfaces is not indented; subsequent doc comment lines each have 1 space of indentation (to vertically align the asterisks). Members, including constructors, have 4 spaces for the first doc comment line and 5 spaces thereafter.</j.0:Rule>
    <j.0:ExcelId>codeConvention_31</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/313">
    <j.0:Rule>Data Object: *DO, where * is the table name.</j.0:Rule>
    <j.0:SecondaryTypeList>Naming conventions for Domain models</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Naming conventions for Domain models</j.0:Name>
    <j.0:ExcelId>alibaba_22</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/446">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/446/prosCluster/0">
        <j.0:Pros>Negative impact of unique indices on insert efficiency is neglectable, but it improves query speed significantly. Additionally, even if complete check is done at the application layer, as per Murphy’s Law, dirty data might still be produced, as long as there is no unique index.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Unique index should be used if business logic is applicable.</j.0:Rule>
    <j.0:SecondaryTypeList>Index Rules</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Index Rules</j.0:PrimaryTypeList>
    <j.0:FatherName>Index Rules</j.0:FatherName>
    <j.0:Name>Index Rules</j.0:Name>
    <j.0:ExcelId>alibaba_155</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/228">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/228/prosCluster/0">
        <j.0:Pros>This helps to distinguish keywords from method calls.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Note that a blank space should not be used between a method name and its opening parenthesis. </j.0:Rule>
    <j.0:ExcelId>codeConvention_55</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/337">
    <j.0:BadExample>object.equals("test");</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/337/prosCluster/0">
        <j.0:ProsExample>"test".equals(object);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>java.util.Objects#equals (a utility class in JDK7) is recommended.</j.0:RuleExplanation>
    <j.0:Rule>Since NullPointerException can possibly be thrown while calling the equals method of Object, equals should be invoked by a constant or an object that is definitely not null.</j.0:Rule>
    <j.0:ExcelId>alibaba_46</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/13">
    <j.0:Yype>company</j.0:Yype>
    <j.0:Name>Google</j.0:Name>
    <j.0:ExcelId>14.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/6">
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:Resource> http://www.possibility.com/Cpp/CppCodingStandard.htm</j.0:Resource>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:Rule>Abbreviations and acronyms must not be uppercase when used as name </j.0:Rule>
    <j.0:ExcelId>geosoft_7</j.0:ExcelId>
    <j.0:BadExample>exportHTMLSource();</j.0:BadExample>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rationale>Using all uppercase for the base name will give conflicts with the naming conventions given above. A variable of this type whould have to be named dVD, hTML etc. which obviously is not very readable. Another problem is illustrated in the examples above; When the name is connected to another, the readbility is seriously reduced; the word following the abbreviation does not stand out as it should.</j.0:Rationale>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/229">
    <j.0:Rule>A blank space should appear after commas in argument lists.</j.0:Rule>
    <j.0:ExcelId>codeConvention_56</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/72">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/72/prosCluster/0">
        <j.0:ProsExample>switch (condition) {
  case ABC :
    statements;
    // Fallthrough

  case DEF :
    statements;
    break;

  case XYZ :
    statements;
    break;

  default :
    statements;
    break;
}</j.0:ProsExample>
        <j.0:Pros>This makes the entire switch statement stand out.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Name>Layout</j.0:Name>
    <j.0:Rule>A switch statement should have the following form:
Note that each case keyword is indented relative to the switch statement as a whole.Note also the extra space before the : character. The explicit Fallthrough comment should be included whenever there is a case statement without a break statement. Leaving the break out is a common error, and it must be made clear that it is intentional when it is not there.</j.0:Rule>
    <j.0:ExcelId>geosoft_73</j.0:ExcelId>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:RuleExplanation>
</j.0:RuleExplanation>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/96">
    <j.0:Rule>For any character that has a special escape sequence (\b, \t, \n, \f, \r, \", \' and \\), that sequence is used rather than the corresponding octal (e.g. \012) or Unicode (e.g. \u000a) escape.</j.0:Rule>
    <j.0:SecondaryTypeList>Special escape sequences</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Special characters</j.0:PrimaryTypeList>
    <j.0:FatherName>Special characters</j.0:FatherName>
    <j.0:Name>Special escape sequences</j.0:Name>
    <j.0:ExcelId>google_5</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/312">
    <j.0:Rule>Use update as name prefix for a method to update data. </j.0:Rule>
    <j.0:ExcelId>alibaba_21</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/421">
    <j.0:Rule> Do not throw RuntimeException, Exception, or Throwable directly. It is recommended to use well defined custom exceptions such as DAOException, ServiceException, etc.</j.0:Rule>
    <j.0:ExcelId>alibaba_130</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/336">
    <j.0:RuleExplanation>For example, decode(String source, String encode) should be used instead of the deprecated method decode(String encodeStr). Once an interface has been deprecated, the interface provider has the obligation to provide a new one. At the same time, client programmers have the obligation to use the new interface.</j.0:RuleExplanation>
    <j.0:Rule>Using a deprecated class or method is prohibited.</j.0:Rule>
    <j.0:ExcelId>alibaba_45</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/445">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/445/prosCluster/0">
        <j.0:Pros>Unsigned types could avoid storing negative values mistakenly, but also may cover bigger data representative range.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Appropriate char column length not only saves database and index storing space, but also improves query efficiency.</j.0:Rule>
    <j.0:ExcelId>alibaba_154</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/203">
    <j.0:Rule>Doc comments describe Java classes, interfaces, constructors, methods, and fields. Each doc comment is set inside the comment delimiters /**...*/, with one comment per API. </j.0:Rule>
    <j.0:SecondaryTypeList>Documentation Comments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:Name>Documentation Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_30</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/469">
    <j.0:RuleExplanation> Mapping configuration is needed, to decouple DO definition and table columns, which in turn facilitates maintenance.</j.0:RuleExplanation>
    <j.0:Rule>Do not use resultClass as return parameters, even if all class property names are the same as DB columns, corresponding DO definition is needed.</j.0:Rule>
    <j.0:ExcelId>alibaba_178</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/227">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/227/prosCluster/0">
        <j.0:ProsExample>while (true) {
           ...
       }</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A keyword followed by a parenthesis should be separated by a space. </j.0:Rule>
    <j.0:SecondaryTypeList>Blank Spaces</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>White Space </j.0:PrimaryTypeList>
    <j.0:FatherName>White Space </j.0:FatherName>
    <j.0:Name>Blank Spaces</j.0:Name>
    <j.0:ExcelId>codeConvention_54</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/14">
    <j.0:Yype>company</j.0:Yype>
    <j.0:Name>Sun</j.0:Name>
    <j.0:ExcelId>15.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/5">
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:ExcelId>geosoft_6</j.0:ExcelId>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/5/prosCluster/0">
        <j.0:Pros>This makes template names stand out relative to all other names used.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:Rule>Names representing template types should be a single uppercase letter.</j.0:Rule>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/5/consCluster0">
        <j.0:ConsExample>   </j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/95">
    <j.0:Rule>Tab characters are not used for indentation.</j.0:Rule>
    <j.0:ExcelId>google_4</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/71">
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Name>Layout</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:Rule>A do-while statement should have the following form:</j.0:Rule>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/71/prosCluster/0">
        <j.0:ProsExample>do {
  statements;
} while (condition);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ExcelId>geosoft_72</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/404">
    <j.0:RuleExplanation>If attribute is null or does not exist, ${var} will be shown directly on web pages.</j.0:RuleExplanation>
    <j.0:Rule>Variables must add exclamatory mark when passing to velocity engine from backend, like $!{var}.</j.0:Rule>
    <j.0:ExcelId>alibaba_113</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/4">
    <j.0:Rule>Names representing namespaces should be all lowercase.</j.0:Rule>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_5</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/405">
    <j.0:Rule>The return type of Math.random() is double, value range is 0&lt;=x&lt;1 (0 is possible). If a random integer is required, do not multiply x by 10 then round the result. The correct way is to use nextInt or nextLong method which belong to Random Object.</j.0:Rule>
    <j.0:ExcelId>alibaba_114</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/50">
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:BadExample>bool isDone = false;
:
while(!isDone){
:
}</j.0:BadExample>
    <j.0:SecondaryTypeList>Loops</j.0:SecondaryTypeList>
    <j.0:Name>Loops</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ExcelId>geosoft_51</j.0:ExcelId>
    <j.0:Rule>Loop variables should be initialized immediately before the loop.</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/429">
    <j.0:RuleExplanation>Outputting a large number of invalid logs will have a certain impact on system performance, and is not conducive to rapid positioning problems. Please think about the log: do you really have these logs? What can you do to see this log? Is it easy to troubleshoot problems?</j.0:RuleExplanation>
    <j.0:Rule>Carefully record logs. Use Info level selectively and do not use Debug level in production environment. If Warn is used to record business behavior, please pay attention to the size of logs. Make sure the server disk is not over-filled, and remember to delete these logs in time.</j.0:Rule>
    <j.0:ExcelId>alibaba_138</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/74">
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Rule>Single statement if-else, for or while statements can be written without brackets.It is a common recommendation that brackets should always be used in all these cases.  Brackets are per definition superfluous on a single statement. </j.0:Rule>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Name>Layout</j.0:Name>
    <j.0:ExcelId>geosoft_75</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/403">
    <j.0:Rule>For wrapper class Boolean, velocity engine will invoke getXxx() first.</j.0:Rule>
    <j.0:SecondaryTypeList>When using attributes of POJO in velocity, use attribute names directly. Velocity engine will invoke getXxx() of POJO automatically. In terms of boolean attributes, velocity engine will invoke isXxx() (Do not use is as prefix when naming boolean attributes).</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>When using attributes of POJO in velocity, use attribute names directly. Velocity engine will invoke getXxx() of POJO automatically. In terms of boolean attributes, velocity engine will invoke isXxx() (Do not use is as prefix when naming boolean attributes).</j.0:PrimaryTypeList>
    <j.0:FatherName>When using attributes of POJO in velocity, use attribute names directly. Velocity engine will invoke getXxx() of POJO automatically. In terms of boolean attributes, velocity engine will invoke isXxx() (Do not use is as prefix when naming boolean attributes).</j.0:FatherName>
    <j.0:Name>When using attributes of POJO in velocity, use attribute names directly. Velocity engine will invoke getXxx() of POJO automatically. In terms of boolean attributes, velocity engine will invoke isXxx() (Do not use is as prefix when naming boolean attributes).</j.0:Name>
    <j.0:ExcelId>alibaba_112</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/3">
    <j.0:Rule>Names representing methods or functions must be verbs and written in mixed case starting with lower case.</j.0:Rule>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_4</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/73">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/73/prosCluster/0">
        <j.0:ProsExample>try {
  statements;
}
catch (Exception&amp; exception) {
  statements;
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A try-catch statement should have the following form:</j.0:Rule>
    <j.0:Name>Layout</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:ExcelId>geosoft_74</j.0:ExcelId>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/428">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/428/prosCluster/0">
        <j.0:ProsExample>logger.error(various parameters or objects toString + "_" + e.getMessage(), e);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> The exception information should contain two types of information: the context information and the exception stack. If you do not want to handle the exception, re-throw it.</j.0:Rule>
    <j.0:ExcelId>alibaba_137</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/319">
    <j.0:RuleExplanation>It is difficult to find one constant in one big complete constant class.</j.0:RuleExplanation>
    <j.0:Rule>Constants should be placed in different constant classes based on their functions. For example, cache related constants could be put in CacheConsts while configuration related constants could be kept in ConfigConsts.</j.0:Rule>
    <j.0:ExcelId>alibaba_28</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/97">
    <j.0:SecondaryTypeList>Non-ASCII characters</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>Special characters</j.0:PrimaryTypeList>
    <j.0:Rule>For the remaining non-ASCII characters, either the actual Unicode character (e.g. ∞) or the equivalent Unicode escape (e.g. \u221e) is used.</j.0:Rule>
    <j.0:Name>Non-ASCII characters</j.0:Name>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/97/prosCluster/0">
        <j.0:ProsExplanation>Best: perfectly clear even without a comment.</j.0:ProsExplanation>
        <j.0:ProsExample>String unitAbbrev = "μs";</j.0:ProsExample>
        <j.0:Pros>make the code easier to read and understand</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>Special characters</j.0:FatherName>
    <j.0:BadExample>String unitAbbrev = "\u03bcs";</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/97/prosCluster/1">
        <j.0:ProsExplanation>Good: use escapes for non-printable characters, and comment if necessary.</j.0:ProsExplanation>
        <j.0:ProsExample>String unitAbbrev = "\u03bcs"; // "μs"</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Decision> The choice depends only on which makes the code easier to read and understand, although Unicode escapes outside string literals and comments are strongly discouraged.</j.0:Decision>
    <j.0:ExcelId>google_6</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/402">
    <j.0:BadExample>Do not define Pattern pattern = Pattern.compile(.); within method body.</j.0:BadExample>
    <j.0:Rule>When using regex, precompile needs to be done in order to increase the matching performance.</j.0:Rule>
    <j.0:SecondaryTypeList>Other</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Other</j.0:PrimaryTypeList>
    <j.0:FatherName>Other</j.0:FatherName>
    <j.0:Name>Other</j.0:Name>
    <j.0:ExcelId>alibaba_111</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/426">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/426/consCluster0">
        <j.0:ConsExample>logger.debug("Processing trade with id: {} and symbol : {} ", id, symbol);</j.0:ConsExample>
        <j.0:Cons>logger.debug ("Processing trade with id: " + id + " symbol: " + symbol); If the log level is warn, the above log will not be printed. However, it will perform string concatenation operator. toString() method of symbol will be called, which is a waste of system resources.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/426/prosCluster/0">
        <j.0:ProsExample>if (logger.isDebugEnabled()) { 
    logger.debug("Processing trade with id: " + id + " symbol: " + symbol); 
}     </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Logs at TRACE / DEBUG / INFO levels must use either conditional outputs or placeholders.</j.0:Rule>
    <j.0:ExcelId>alibaba_135</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/2">
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/2/consCluster0"/>
    <j.0:Rule>Named constants (including enumeration values) must be all uppercase using underscore to separate words.A "forward declaration" is a declaration of a class, function, or template without an associated definition.</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:ExcelId>geosoft_3</j.0:ExcelId>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/2/prosCluster/0">
        <j.0:Pros>This form is both easier to read, and it ensures a unified interface towards class values.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:Name>General Naming Conventions</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/427">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/427/prosCluster/0">
        <j.0:ProsExample>&lt;logger name="com.taobao.ecrm.member.config" additivity="false" \&gt;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Ensure that additivity attribute of a Log4j logger is set to false, in order to avoid redundancy and save disk space.</j.0:Rule>
    <j.0:ExcelId>alibaba_136</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/318">
    <j.0:BadExample>Long a = 2l, it is hard to tell whether it is number 21 or Long 2.</j.0:BadExample>
    <j.0:Rule>‘L’ instead of ‘l’ should be used for long or Long variable because ‘l’ is easily to be regarded as number 1 in mistake.</j.0:Rule>
    <j.0:ExcelId>alibaba_27</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/209">
    <j.0:SecondaryTypeList>Placement</j.0:SecondaryTypeList>
    <j.0:ExcelId>codeConvention_36</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/209/prosCluster/0">
        <j.0:ProsExample>void MyMethod() {
    int int1;         // beginning of method block

    if (condition) {
        int int2;     // beginning of "if" block
        ...
    }
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Exception>The one exception to the rule is indexes of for loops, which in Java can be declared in the for statement:
 for (int i = 0; i &lt; maxLoops; i++)</j.0:Exception>
    <j.0:RuleExplanation>A block is any code surrounded by curly braces "{" and "}".</j.0:RuleExplanation>
    <j.0:Rule>Put declarations only at the beginning of blocks. Don't wait to declare variables until their first use.</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Declarations</j.0:FatherName>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
    <j.0:PrimaryTypeList>Declarations</j.0:PrimaryTypeList>
    <j.0:Name>Placement</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/76">
    <j.0:ExcelId>geosoft_77</j.0:ExcelId>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:BadExample>a=(b+c)*d</j.0:BadExample>
    <j.0:Name>White Space</j.0:Name>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/76/prosCluster/0">
        <j.0:Pros>Makes the individual components of the statements stand out. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Conventional operators should be surrounded by a space character. </j.0:Rule>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/52">
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Loops</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:SecondaryTypeList>Loops</j.0:SecondaryTypeList>
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>The use of break and continue in loops should be avoided.</j.0:Rule>
    <j.0:Exception>These statements should only be used if they give higher readability than their structured counterparts.</j.0:Exception>
    <j.0:ExcelId>geosoft_53</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/401">
    <j.0:Rule>Tags in comments (e.g. TODO, FIXME) need to contain author and time. Tags need to be handled and cleared in time by scanning frequently. Sometimes online breakdown is caused by these unhandled tags. 
  1) TODO: TODO means the logic needs to be done, but not finished yet. Actually, TODO is a member of Javadoc, although it is not realized in Javadoc yet, but has already been widely used. TODO can only be used in class, interface and methods, since it is a Javadoc tag. 
  2) FIXME: FIXME is used to represent that the code logic is not correct or does not work, should be fixed in time.</j.0:Rule>
    <j.0:ExcelId>alibaba_110</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/316">
    <j.0:Rule>POJO generally point to DO/DTO/BO/VO but cannot be used in naming as *POJO.</j.0:Rule>
    <j.0:ExcelId>alibaba_25</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/425">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/425/prosCluster/0">
        <j.0:ProsExample>Name of the log file for monitoring the timezone conversion exception in mppserver application: mppserver_monitor_timeZoneConvert.log</j.0:ProsExample>
        <j.0:Pros>It is recommended to classify logs. Error logs and business logs should be stored separately as far as possible. It is not only easy for developers to view, but also convenient for system monitoring.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Naming conventions of extended logs of an Application (such as RBI, temporary monitoring, access log, etc.): 
appName_logType_logName.log 
logType: Recommended classifications are stats, desc, monitor, visit, etc. 
logName: Log description.
Benefits of this scheme: The file name shows what application the log belongs to, type of the log and what purpose is the log used for. It is also conducive for classification and search.</j.0:Rule>
    <j.0:ExcelId>alibaba_134</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/1">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/1/prosCluster/0">
        <j.0:Pros>Makes variables easy to distinguish from types, and effectively resolves potential naming collision as in the declaration Line line;</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Variable names must be in mixed case starting with lower case.</j.0:Rule>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_2</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/208">
    <j.0:BadExample>int foo, fooarray[]; //WRONG!</j.0:BadExample>
    <j.0:Rule>Do not put different types on the same line.</j.0:Rule>
    <j.0:ExcelId>codeConvention_35</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/51">
    <j.0:RuleExplanation>do-while loops are less readable than ordinary while loops and for loops since the conditional is at the bottom of the loop. The reader must scan the entire loop in order to understand the scope of the loop.
In addition, do-while loops are not needed. Any do-while loop can easily be rewritten into a while loop or a for loop. Reducing the number of constructs used enhance readbility.</j.0:RuleExplanation>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>do-while loops can be avoided.</j.0:Rule>
    <j.0:Name>Loops</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Loops</j.0:SecondaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:ExcelId>geosoft_52</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/317">
    <j.0:BadExample>String key = "Id#taobao_" + tradeId;</j.0:BadExample>
    <j.0:Rule>Magic values, except for predefined, are forbidden in coding.</j.0:Rule>
    <j.0:SecondaryTypeList>Constant Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Constant Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Constant Conventions</j.0:FatherName>
    <j.0:Name>Constant Conventions</j.0:Name>
    <j.0:ExcelId>alibaba_26</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/75">
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Name>Layout</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ExcelId>geosoft_76</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/75/prosCluster/0">
        <j.0:Pros>This makes it easier to spot function names within a file since they all start in the first column.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:Rule>The function return type can be put in the left column immediately above the function name.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/222">
    <j.0:Rule>A do-while statement should have the following form:

 
do {
    statements;
} while (condition);
</j.0:Rule>
    <j.0:SecondaryTypeList>while Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>while Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_49</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/331">
    <j.0:RuleExplanation>It is unnecessary to use multiple blank lines to do that.</j.0:RuleExplanation>
    <j.0:Rule>Use a single blank line to separate sections with the same logic or semantics.</j.0:Rule>
    <j.0:ExcelId>alibaba_40</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/464">
    <j.0:Rule>IN clause should be avoided. Record set size of the IN clause should be evaluated carefully and control it within 1000, if it cannot be avoided.</j.0:Rule>
    <j.0:ExcelId>alibaba_173</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/246">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/246/consCluster0">
        <j.0:ConsExample>if (booleanExpression) {
    return TRUE;
} else {
    return FALSE;
}</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/246/consCluster1">
        <j.0:ConsExample>if (condition) {
    return x;
}
return y;</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
    <j.0:SecondaryTypeList>Miscellaneous Practices</j.0:SecondaryTypeList>
    <j.0:Name>Returning Values</j.0:Name>
    <j.0:FatherName>Programming Practices$$Miscellaneous Practices</j.0:FatherName>
    <j.0:Rule>Try to make the structure of your program match the intent.</j.0:Rule>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/246/prosCluster/1">
        <j.0:ProsExample>return (condition ? x : y);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/246/prosCluster/0">
        <j.0:ProsExample>return booleanExpression;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ExcelId>codeConvention_73</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/355">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/355/consCluster0">
        <j.0:Cons>Adding elements to Collections.emptyList() will throw UnsupportedOperationException.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Rule>Do not add nor remove to/from immutable objects returned by methods in Collections, e.g. emptyList()/singletonList().</j.0:Rule>
    <j.0:ExcelId>alibaba_64</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/488">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/488/prosCluster/0">
        <j.0:ProsExample>tc-client / uic-api / tair-tool</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>ArtifactID: Product name - module name.</j.0:Rule>
    <j.0:ExcelId>alibaba_197</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/379">
    <j.0:BadExample>class Foo { 
    private Helper helper = null;
    public Helper getHelper() {
        if (helper == null) {
            synchronized(this) {
                if (helper == null) 
                helper = new Helper();
            }   
        } 
        return helper;
    }
    // other functions and members...
}</j.0:BadExample>
    <j.0:Rule>In concurrent scenarios, one easy solution to optimize the lazy initialization problem by using double-checked locking (referred to The Double-checked locking is broken Declaration), is to declare the object type as volatile.</j.0:Rule>
    <j.0:ExcelId>alibaba_88</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/440">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/440/prosCluster/0">
        <j.0:ProsExample>tiger_task / tiger_reader / mpp_config</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>It is recommended to define table name as [table_business_name]_[table_purpose].</j.0:Rule>
    <j.0:ExcelId>alibaba_149</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/112">
    <j.0:Rule>Line break after the opening brace.</j.0:Rule>
    <j.0:ExcelId>google_21</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/463">
    <j.0:Rule>When correcting data, delete and update DB records, SELECT should be done first to ensure data correctness.</j.0:Rule>
    <j.0:ExcelId>alibaba_172</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/221">
    <j.0:Rule>A while statement should have the following form:

 
while (condition) {
    statements;
}

 An empty while statement should have the following form:

 
while (condition);
</j.0:Rule>
    <j.0:SecondaryTypeList>while Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>while Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_48</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/354">
    <j.0:Rule>Do not add elements to collection objects returned by keySet()/values()/entrySet(), otherwise UnsupportedOperationException will be thrown.</j.0:Rule>
    <j.0:ExcelId>alibaba_63</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/136">
    <j.0:Rule>Between the type and variable of a declaration: List&lt;String&gt; list</j.0:Rule>
    <j.0:ExcelId>google_45</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/487">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/487/prosCluster/0">
        <j.0:ProsExample>com.taobao.tddl   com.alibaba.sourcing.multilang</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>GroupID: com.{company/BU}.{business line}.{sub business line}, at most 4 levels</j.0:Rule>
    <j.0:RuleExplanation>{company/BU} for example: such business unit level as Alibaba, Taobao, Tmall, Aliexpress and so on; sub-business line is optional.</j.0:RuleExplanation>
    <j.0:FatherName>Library Specification</j.0:FatherName>
    <j.0:ExcelId>alibaba_196</j.0:ExcelId>
    <j.0:Name>Library Specification</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
    <j.0:SecondaryTypeList>Library Specification</j.0:SecondaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>Library Specification</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/245">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/245/consCluster0">
        <j.0:ConsExample>if (a == b &amp;&amp; c == d)     // AVOID!</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ExcelId>codeConvention_72</j.0:ExcelId>
    <j.0:Rule>It is generally a good idea to use parentheses liberally in expressions involving mixed operators to avoid operator precedence problems. Even if the operator precedence seems clear to you, it might not be to others--you shouldn't assume that other programmers know precedence as well as you do.</j.0:Rule>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/245/prosCluster/0">
        <j.0:ProsExample>if ((a == b) &amp;&amp; (c == d)) // RIGHT</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
    <j.0:SecondaryTypeList>Miscellaneous Practices</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices$$Miscellaneous Practices</j.0:FatherName>
    <j.0:Name>Parentheses</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/378">
    <j.0:RuleExplanation>Random instance includes instances of java.util.Random and Math.random().</j.0:RuleExplanation>
    <j.0:Rule>Avoid using Random instance by multiple threads. Although it is safe to share this instance, competition on the same seed will damage performance.</j.0:Rule>
    <j.0:ExcelId>alibaba_87</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/330">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/330/prosCluster/0">
        <j.0:ProsExample>int a = 3;
long b = 4L;
float c = 5F;
StringBuffer sb = new StringBuffer();</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>It is cumbersome to insert several spaces to align the variables above.</j.0:RuleExplanation>
    <j.0:Rule> It is unnecessary to align variables by several spaces.</j.0:Rule>
    <j.0:ExcelId>alibaba_39</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/353">
    <j.0:RuleExplanation>String can be used as the key of Map since String defines these two methods.</j.0:RuleExplanation>
    <j.0:Rule>The usage of hashCode and equals should follow: 
  1) Override hashCode if equals is overridden.
  2) These two methods must be overridden for elements of a Set since they are used to ensure that no duplicate object will be inserted in Set.
  3) These two methods must be overridden for any object that is used as the key of Map.</j.0:Rule>
    <j.0:SecondaryTypeList>Collection</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Collection</j.0:PrimaryTypeList>
    <j.0:FatherName>Collection</j.0:FatherName>
    <j.0:Name>Collection</j.0:Name>
    <j.0:ExcelId>alibaba_62</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/244">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/244/consCluster0">
        <j.0:ConsExplanation>This is the job of the compiler, and besides, it rarely actually helps. </j.0:ConsExplanation>
        <j.0:ConsExample>d = (a = b + c) + r;        // AVOID!</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/244/prosCluster/0">
        <j.0:ProsExample>a = b + c;
d = a + r;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Do not use embedded assignments in an attempt to improve run-time performance. </j.0:Rule>
    <j.0:ExcelId>codeConvention_71</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/486">
    <j.0:Rule>Layers of Domain Model:

DO (Data Object): Corresponding to the database table structure, the data source object is transferred upward through DAO Layer.
DTO (Data Transfer Object): Objects which are transferred upward by Service Layer and Manager Layer.
BO (Business Object): Objects that encapsulate business logic, which can be outputted by Service Layer.
Query: Data query objects that carry query request from upper layers. Note: Prohibit the use of Map if there are more than 2 query conditions.
VO (View Object): Objects that are used in Display Layer, which is normally transferred from Web Layer.</j.0:Rule>
    <j.0:ExcelId>alibaba_195</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/111">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/111/prosCluster/0">
        <j.0:ProsExample>return () -&gt; {
  while (condition()) {
    method();
  }
};

return new MyClass() {
  @Override public void method() {
    if (condition()) {
      try {
        something();
      } catch (ProblemException e) {
        recover();
      }
    } else if (otherCondition()) {
      somethingElse();
    } else {
      lastThing();
    }
  }
};</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>No line break before the opening brace.</j.0:Rule>
    <j.0:SecondaryTypeList>Braces</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting$$Braces</j.0:FatherName>
    <j.0:Name>Nonempty blocks: K &amp; R style</j.0:Name>
    <j.0:ExcelId>google_20</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/268">
    <j.0:PrimaryTypeList>IdenticalCatchBranches</j.0:PrimaryTypeList>
    <j.0:Name>IdenticalCatchBranches</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>IdenticalCatchBranches</j.0:SecondaryTypeList>
    <j.0:ExcelId>pmdCodetyle_20</j.0:ExcelId>
    <j.0:FatherName>IdenticalCatchBranches</j.0:FatherName>
    <j.0:Rule>Identical catch branches use up vertical space and increase the complexity of code without adding functionality.
 It’s better style to collapse identical branches into a single multi-catch branch.</j.0:Rule>
    <j.0:Source>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html">
        <j.0:OntologyType>Document</j.0:OntologyType>
        <j.0:ProgrammingLanguage rdf:resource="http://www.semanticweb.org/CCBase/#ProgrammingLanguage/Java"/>
        <j.0:DocumentUrl>https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html</j.0:DocumentUrl>
      </rdf:Description>
    </j.0:Source>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/268/prosCluster/0">
        <j.0:ProsExample>try {
    // do something
} catch (IllegalArgumentException | IllegalStateException e) { // This is better
    throw e;
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:BadExample>try {
    // do something
} catch (IllegalArgumentException e) {
    throw e;
} catch (IllegalStateException e) { // Can be collapsed into the previous block
    throw e;
}</j.0:BadExample>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/377">
    <j.0:RuleExplanation>Be careful, exception thrown by sub-thread cannot be caught by main thread.</j.0:RuleExplanation>
    <j.0:Rule> When using CountDownLatch to convert asynchronous operations to synchronous ones, each thread must call countdown method before quitting. Make sure to catch any exception during thread running, to let countdown method be executed. If main thread cannot reach await method, program will return until timeout.</j.0:Rule>
    <j.0:ExcelId>alibaba_86</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/135">
    <j.0:Rule>On both sides of the double slash (//) that begins an end-of-line comment. Here, multiple spaces are allowed, but not required.</j.0:Rule>
    <j.0:ExcelId>google_44</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/159">
    <j.0:Rule>There are no specific rules or even well-established conventions for naming annotation types.</j.0:Rule>
    <j.0:ExcelId>google_68</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/220">
    <j.0:Rule>A for statement should have the following form:

 
for (initialization; condition; update) {
    statements;
}

 An empty for statement (one in which all the work is done in the initialization, condition, and update clauses) should have the following form:

 
for (initialization; condition; update);

 When using the comma operator in the initialization or update clause of a for statement, avoid the complexity of using more than three variables. If needed, use separate statements before the for loop (for the initialization clause) or at the end of the loop (for the update clause).</j.0:Rule>
    <j.0:SecondaryTypeList>for Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>for Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_47</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/462">
    <j.0:Rule>Stored procedures are not allowed. They are difficult to debug, extend and not portable.</j.0:Rule>
    <j.0:ExcelId>alibaba_171</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/134">
    <j.0:Rule>After ,:; or the closing parenthesis ()) of a cast</j.0:Rule>
    <j.0:ExcelId>google_43</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/485">
    <j.0:Rule>Many exceptions in the DAO Layer cannot be caught by using a fine-grained exception class. The recommended way is to use catch (Exception e), and throw new DAOException(e). In these cases, there is no need to print the log because the log should have been caught and printed in Manager Layer/Service Layer.
   Logs about exception in Service Layer must be recorded with as much information about the parameters as possible to make debugging simpler. 
   If Manager Layer and Service Layer are deployed in the same server, log logic should be consistent with DAO Layer. If they are deployed separately, log logic should be consistent with each other.
   In Web Layer Exceptions cannot be thrown, because it is already on the top layer and there is no way to deal with abnormal situations. If the exception is likely to cause failure when rendering the page, the page should be redirected to a friendly error page with the friendly error information.
   In Open Interface exceptions should be handled by using error code and error message.</j.0:Rule>
    <j.0:SecondaryTypeList>Project Specification</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification</j.0:FatherName>
    <j.0:Name>Project Specification</j.0:Name>
    <j.0:ExcelId>alibaba_194</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/243">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/243/consCluster0">
        <j.0:ConsExample>if (c++ = d++) {        // AVOID! Java disallows
    ...
}</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/243/prosCluster/0">
        <j.0:ProsExample>if ((c++ = d++) != 0) {
    ...
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Do not use the assignment operator in a place where it can be easily confused with the equality operator. </j.0:Rule>
    <j.0:ExcelId>codeConvention_70</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/376">
    <j.0:Rule> Run multiple TimeTask by using ScheduledExecutorService rather than Timer because Timer will kill all running threads in case of failing to catch exceptions.</j.0:Rule>
    <j.0:ExcelId>alibaba_85</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/267">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>Names for references to generic values should be limited to a single uppercase letter.</j.0:Rule>
    <j.0:ExcelId>pmdCodetyle_19</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/267/prosCluster/0">
        <j.0:ProsExample>public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; extends BaseDao {
    // This is ok…
}

public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; {
    // Also this
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>GenericsNaming</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>GenericsNaming</j.0:SecondaryTypeList>
    <j.0:FatherName>GenericsNaming</j.0:FatherName>
    <j.0:BadExample>public interface GenericDao&lt;e extends BaseModel, K extends Serializable&gt; {
    // 'e' should be an 'E'
}

public interface GenericDao&lt;EF extends BaseModel, K extends Serializable&gt; {
   // 'EF' is not ok.
}</j.0:BadExample>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:Name>GenericsNaming</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/461">
    <j.0:Rule>Foreign key and cascade update are not allowed. All foreign key related logic should be handled in application layer.</j.0:Rule>
    <j.0:ExcelId>alibaba_170</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/352">
    <j.0:RuleExplanation>We should strictly control the access for any classes, methods, arguments and variables. Loose access control causes harmful coupling of modules. Imagine the following situations. For a private class member, we can remove it as soon as we want. However, when it comes to a public class member, we have to think twice before any updates happen to it.</j.0:RuleExplanation>
    <j.0:Rule>Define the access level of members in class with severe restrictions: 
  1) Constructor methods must be private if an allocation using new keyword outside of the class is forbidden. 
  2) Constructor methods are not allowed to be public or default in a utility class. 
  3) Nonstatic class variables that are accessed from inheritants must be protected.
  4) Nonstatic class variables that no one can access except the class that contains them must be private.
  5) Static variables that no one can access except the class that contains them must be private. 
  6) Static variables should be considered in determining whether they are final.
  7) Class methods that no one can access except the class that contains them must be private.
  8) Class methods that are accessed from inheritants must be protected.</j.0:Rule>
    <j.0:ExcelId>alibaba_61</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/420">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/420/prosCluster/0">
        <j.0:Pros>Benefits to return Result for the RPC methods:
  1) Using the ‘throw exception’ method will occur a runtime error if the exception is not caught.
  2) If stack information it not attached, allocating custom exceptions with simple error message is not helpful to solve the problem. If stack information is attached, data serialization and transmission performance loss are also problems when frequent error occurs.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> Use “throw exception” or “return error code”. For HTTP or open API providers, “error code” must be used. It is recommended to throw exceptions inside an application. For cross-application RPC calls, result is preferred by encapsulating isSuccess, error code and brief error messages.</j.0:Rule>
    <j.0:ExcelId>alibaba_129</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/202">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/202/prosCluster/0">
        <j.0:ProsExample>if (foo &gt; 1) {

    // Do a double-flip.
    ...
}
else
    return false;          // Explain why here.
 //if (bar &gt; 1) {
//
//    // Do a triple-flip.
//    ...
//}
//else
//    return false;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>The // comment delimiter begins a comment that continues to the newline. It can comment out a complete line or only a partial line. It shouldn't be used on consecutive multiple lines for text comments; however, it can be used in consecutive multiple lines for commenting out sections of code. </j.0:Rule>
    <j.0:SecondaryTypeList>Implementation Comment Formats</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments$$Implementation Comment Formats</j.0:FatherName>
    <j.0:Name>End-Of-Line Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_29</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/311">
    <j.0:Rule>Use delete or remove (recommended) as name prefix for a method to remove data.</j.0:Rule>
    <j.0:ExcelId>alibaba_20</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/444">
    <j.0:RuleExplanation>Please do not shard during table creation if anticipated data quantity is not to reach this grade.</j.0:RuleExplanation>
    <j.0:Rule>Product category names are short, frequently used and with almost never changing/fixed values. They may be stored redundantly in relevant tables to avoid joined queries.</j.0:Rule>
    <j.0:ExcelId>alibaba_153</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/226">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/226/prosCluster/0">
        <j.0:Pros>Blank lines improve readability by setting off sections of code that are logically related.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Two blank lines should always be used in the following circumstances:
•  Between sections of a source file 
•  Between class and interface definitions 
One blank line should always be used in the following circumstances:
•  Between methods 
•  Between the local variables in a method and its first statement 
•  Before a block (see section 5.1.1) or single-line (see section 5.1.2) comment 
•  Between logical sections inside a method to improve readability </j.0:Rule>
    <j.0:SecondaryTypeList>Blank Lines </j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>White Space </j.0:PrimaryTypeList>
    <j.0:FatherName>White Space </j.0:FatherName>
    <j.0:Name>Blank Lines </j.0:Name>
    <j.0:ExcelId>codeConvention_53</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/90">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:BadExample>while (true) { 
// Do something
    something();
}</j.0:BadExample>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:Name>Comments</j.0:Name>
    <j.0:ExcelId>geosoft_91</j.0:ExcelId>
    <j.0:SecondaryTypeList>Comments</j.0:SecondaryTypeList>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:Rule>Comments should be included relative to their position in the code</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Resource>Code Complete, Steve McConnell - Microsoft Press</j.0:Resource>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/335">
    <j.0:Rule>Modifying the method signature is forbidden to avoid affecting the caller. A @Deprecated annotation with an explicit description of the new service is necessary when an interface is deprecated.</j.0:Rule>
    <j.0:ExcelId>alibaba_44</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/468">
    <j.0:RuleExplanation>Refer to rules of POJO class and DB column definition, mapping is needed in resultMap. Code generated by MyBatis Generator might need to be adjusted.</j.0:RuleExplanation>
    <j.0:Rule>Name of Boolean property of POJO classes cannot be prefixed with is, while DB column name should prefix with is. A mapping between properties and columns is required.</j.0:Rule>
    <j.0:ExcelId>alibaba_177</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/359">
    <j.0:BadExample>The result of asList is the inner class of Arrays, which does not implement methods to modify itself. Arrays.asList is only a transferred interface, data inside which is stored as an array.

String[] str = new String[] { "a", "b" };
List&lt;String&gt; list = Arrays.asList(str); 
Case 1: list.add("c"); will throw a runtime exception.
Case 2: str[0]= "gujin"; list.get(0) will be modified.</j.0:BadExample>
    <j.0:Rule> Do not use methods which will modify the list after using Arrays.asList to convert array to list, otherwise methods like add/remove/clear will throw UnsupportedOperationException.</j.0:Rule>
    <j.0:ExcelId>alibaba_68</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/117">
    <j.0:Rule>Each statement is followed by a line break.</j.0:Rule>
    <j.0:SecondaryTypeList>One statement per line</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting</j.0:FatherName>
    <j.0:Name>One statement per line</j.0:Name>
    <j.0:ExcelId>google_26</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/7">
    <j.0:Yype>people</j.0:Yype>
    <j.0:Name>Yvon Sauvageau</j.0:Name>
    <j.0:ExcelId>8.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/310">
    <j.0:Rule>Use insert or save (recommended) as name prefix for a method to save data.</j.0:Rule>
    <j.0:ExcelId>alibaba_19</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/334">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/334/prosCluster/0">
        <j.0:ProsExample>public User getUsers(String type, Integer... ids);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>Arguments with the varargs feature must be at the end of the argument list. (Programming with the varargs feature is not recommended.)</j.0:RuleExplanation>
    <j.0:Rule>varargs is recommended only if all parameters are of the same type and semantics. Parameters with Object type should be avoided.</j.0:Rule>
    <j.0:ExcelId>alibaba_43</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/443">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/443/prosCluster/0">
        <j.0:Pros>Product category names are short, frequently used and with almost never changing/fixed values. They may be stored redundantly in relevant tables to avoid joined queries.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Some appropriate columns may be stored in multiple tables redundantly to improve search performance, but consistency must be concerned. Redundant columns should not be: 
  1) Columns with frequent modification.
  2) Columns typed with very long varchar or text.</j.0:Rule>
    <j.0:ExcelId>alibaba_152</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/201">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/201/prosCluster/0">
        <j.0:ProsExample>if (a == 2) {
    return TRUE;            /* special case */
} else {
    return isprime(a);      /* works only for odd a */
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Very short comments can appear on the same line as the code they describe, but should be shifted far enough to separate them from the statements. If more than one short comment appears in a chunk of code, they should all be indented to the same tab setting. Avoid the assembly language style of commenting every line of executable code with a trailing comment.</j.0:Rule>
    <j.0:SecondaryTypeList>Implementation Comment Formats</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments$$Implementation Comment Formats</j.0:FatherName>
    <j.0:Name>Trailing Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_28</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/467">
    <j.0:RuleExplanation>1) * increases parsing cost.
2) It may introduce mismatch with resultMap when adding or removing query columns.</j.0:RuleExplanation>
    <j.0:Rule>Specific column names should be specified during query, rather than using *.</j.0:Rule>
    <j.0:SecondaryTypeList>ORM Rules</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>ORM Rules</j.0:PrimaryTypeList>
    <j.0:FatherName>ORM Rules</j.0:FatherName>
    <j.0:Name>ORM Rules</j.0:Name>
    <j.0:ExcelId>alibaba_176</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/225">
    <j.0:Rule>A try-catch statement should have the following format:
try {
    statements;
} catch (ExceptionClass e) {
    statements;
}</j.0:Rule>
    <j.0:SecondaryTypeList> try-catch Statements </j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name> try-catch Statements </j.0:Name>
    <j.0:ExcelId>codeConvention_52</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/358">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/358/consCluster0">
        <j.0:Cons>Do not use toArray method without arguments. Since the return type is Object[], ClassCastException will be thrown when casting it to a different array type.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/358/prosCluster/0">
        <j.0:ProsExample>List&lt;String&gt; list = new ArrayList&lt;String&gt;(2);
  list.add("guan");
  list.add("bao");  
  String[] array = new String[list.size()];
  array = list.toArray(array);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>When using toArray method with arguments, pass an input with the same size as the list. If input array size is not large enough, the method will re-assign the size internally, and then return the address of new array. If the size is larger than needed, extra elements (index[list.size()] and later) will be set to null.</j.0:RuleExplanation>
    <j.0:Rule>Use toArray(T[] array) to convert a list to an array. The input array type should be the same as the list whose size is list.size().</j.0:Rule>
    <j.0:ExcelId>alibaba_67</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/249">
    <j.0:Exception> Classes with solely static members are ignored, refer to UseUtilityClassRule to detect those.</j.0:Exception>
    <j.0:SecondaryTypeList>AtLeastOneConstructor</j.0:SecondaryTypeList>
    <j.0:FatherName>AtLeastOneConstructor</j.0:FatherName>
    <j.0:Rule>Each non-static class should declare at least one constructor.</j.0:Rule>
    <j.0:BadExample>public class Foo {
  // missing constructor
  public void doSomething() { ... }
  public void doOtherThing() { ... }
}</j.0:BadExample>
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/249/consCluster0"/>
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/249/prosCluster/0"/>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:ExcelId>pmdCodetyle_1</j.0:ExcelId>
    <j.0:Name>AtLeastOneConstructor</j.0:Name>
    <j.0:PrimaryTypeList>AtLeastOneConstructor</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/200">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/200/prosCluster/0">
        <j.0:ProsExample>if (condition) {

    /* Handle the condition. */
    ...
}
</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Short comments can appear on a single line indented to the level of the code that follows. A single-line comment should be preceded by a blank line.  </j.0:Rule>
    <j.0:SecondaryTypeList>Implementation Comment Formats</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments$$Implementation Comment Formats</j.0:FatherName>
    <j.0:Name>Single-Line Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_27</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/442">
    <j.0:Rule> Update column comments once column meaning is changed or new possible status values are added.</j.0:Rule>
    <j.0:ExcelId>alibaba_151</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/224">
    <j.0:Rule>A switch statement should have the following form:

 
switch (condition) {
case ABC:
    statements;
    /* falls through */
case DEF:
    statements;
    break;

case XYZ:
    statements;
    break;

default:
    statements;
    break;
}

 Every time a case falls through (doesn't include a break statement), add a comment where the break statement would normally be. This is shown in the preceding code example with the  /* falls through */ comment. 
 Every switch statement should include a default case. The break in the default case is redundant, but it prevents a fall-through error if later another case is added.
</j.0:Rule>
    <j.0:SecondaryTypeList>switch Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>switch Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_51</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/333">
    <j.0:RuleExplanation>For getObject() and get0bject(), the first one has a letter ‘O’, and the second one has a number ‘0’. To accurately determine whether the overriding is successful, an @Override annotation is necessary. Meanwhile, once the method signature in the abstract class is changed, the implementation class will report a compile-time error immediately.</j.0:RuleExplanation>
    <j.0:Rule>An overridden method from an interface or abstract class must be marked with @Override annotation.</j.0:Rule>
    <j.0:ExcelId>alibaba_42</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/466">
    <j.0:RuleExplanation>In terms of Functionality, TRUNCATE TABLE is similar to DELETE without WHERE sub-clause.</j.0:RuleExplanation>
    <j.0:Rule>TRUNCATE is not recommended when coding, even if it is faster than DELETE and uses less system, transaction log resource. Because TRUNCATE does not have transaction nor trigger DB trigger, problems might occur.</j.0:Rule>
    <j.0:ExcelId>alibaba_175</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/248">
    <j.0:Rule>Use XXX in a comment to flag something that is bogus but works. Use FIXME to flag something that is bogus and broken.</j.0:Rule>
    <j.0:SecondaryTypeList>Miscellaneous Practices</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices$$Miscellaneous Practices</j.0:FatherName>
    <j.0:Name>Special Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_75</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/357">
    <j.0:Rule>When using subList, be careful when modifying the size of original list. It might cause ConcurrentModificationException when performing traversing, adding or deleting on the subList.</j.0:Rule>
    <j.0:ExcelId>alibaba_66</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/115">
    <j.0:SecondaryTypeList>Braces</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/115/prosCluster/0">
        <j.0:ProsExample>void doNothing() {}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>Formatting$$Braces</j.0:FatherName>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/115/prosCluster/1">
        <j.0:ProsExample> void doNothingElse() {
  }</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>An empty block or block-like construct may be in K &amp; R style. Alternatively, it may be closed immediately after it is opened, with no characters or line break in between ({}), unless it is part of a multi-block statement (one that directly contains multiple blocks: if/else or try/catch/finally).</j.0:Rule>
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/115/consCluster0">
        <j.0:ConsExplanation>No concise empty blocks in a multi-block statement</j.0:ConsExplanation>
        <j.0:ConsExample>try {
    doSomething();
  } catch (Exception e) {}</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Name>Empty blocks: may be concise</j.0:Name>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:ExcelId>google_24</j.0:ExcelId>
    <j.0:RelatedSpecification>20.0</j.0:RelatedSpecification>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/139">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>google_48</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:FatherName>Formatting$$Whitespace</j.0:FatherName>
    <j.0:Decision>Alignment can aid readability, but it creates problems for future maintenance. </j.0:Decision>
    <j.0:Rule>This practice is permitted, but is never required. It is not even required to maintain horizontal alignment in places where it was already used.</j.0:Rule>
    <j.0:SecondaryTypeList>Whitespace</j.0:SecondaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/139/prosCluster/0">
        <j.0:ProsExample>private int   x;      // permitted, but future edits
private Color color;  // may leave it unaligned</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>Horizontal alignment: never required</j.0:Name>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:RuleExplanation>Horizontal alignment is the practice of adding a variable number of additional spaces in your code with the goal of making certain tokens appear directly below certain other tokens on previous lines.</j.0:RuleExplanation>
    <j.0:BadExample>private int x; // this is fine
private Color color; // this too</j.0:BadExample>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/441">
    <j.0:Rule> Try to define database name same with the application name.</j.0:Rule>
    <j.0:ExcelId>alibaba_150</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/332">
    <j.0:Rule>A static field or method should be directly referred to by its class name instead of its corresponding object name.</j.0:Rule>
    <j.0:SecondaryTypeList>OOP Rules</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>OOP Rules</j.0:PrimaryTypeList>
    <j.0:FatherName>OOP Rules</j.0:FatherName>
    <j.0:Name>OOP Rules</j.0:Name>
    <j.0:ExcelId>alibaba_41</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/114">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/114/prosCluster/0"/>
    <j.0:Rule>Line break after the closing brace, only if that brace terminates a statement or terminates the body of a method, constructor, or named class.</j.0:Rule>
    <j.0:ExcelId>google_23</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/465">
    <j.0:RuleExplanation>SELECT LENGTH(“轻松工作”); returns 12. 
SELECT CHARACTER_LENGTH(“轻松工作”); returns 4. 
Use UTF8MB4 encoding to store emoji if needed, taking into account of its difference from UTF-8.</j.0:RuleExplanation>
    <j.0:Rule>For globalization needs, characters should be represented and stored with UTF-8, and be cautious of character number counting.</j.0:Rule>
    <j.0:ExcelId>alibaba_174</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/223">
    <j.0:Rule>A do-while statement should have the following form:

 
do {
    statements;
} while (condition);
</j.0:Rule>
    <j.0:SecondaryTypeList>do-while Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>do-while Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_50</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/356">
    <j.0:RuleExplanation>subList of ArrayList is an inner class, which is a view of ArrayList. All operations on the Sublist will affect the original list.</j.0:RuleExplanation>
    <j.0:Rule>Do not cast subList in class ArrayList, otherwise ClassCastException will be thrown: java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.</j.0:Rule>
    <j.0:ExcelId>alibaba_65</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/138">
    <j.0:Rule> Between a type annotation and [] or ....</j.0:Rule>
    <j.0:ExcelId>google_47</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/91">
    <j.0:Rationale>Regarding standardized class and method documentation the Java development community is more mature than the C/C++ one. This is due to the standard automatic Javadoc tool that is part of the development kit and that help producing high quality hypertext documentation from these comments.</j.0:Rationale>
    <j.0:Rule>Class and method header comments should follow the JavaDoc conventions.There are Javadoc-like tools available also for C++. These follows the same tagging syntax as Javadoc. See for instance Doc++(http://www.zib.de/Visual/software/doc%20%20) or Doxygen(http://www.stack.nl/~dimitri/doxygen/index.html).</j.0:Rule>
    <j.0:SecondaryTypeList>Comments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:Name>Comments</j.0:Name>
    <j.0:ExcelId>geosoft_92</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/489">
    <j.0:RuleExplanation>1) prime version number: Need to change when there are incompatible API modification, or new features that can change the product direction. 
  2) secondary version number: Changed for backward compatible modification.
  3) revision number: Changed for fixing bugs or adding features that do not modify the method signature and maintain API compatibility.</j.0:RuleExplanation>
    <j.0:Rule>Library naming convention: prime version number.secondary version number.revision number</j.0:Rule>
    <j.0:ExcelId>alibaba_198</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/247">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/247/prosCluster/0">
        <j.0:ProsExample>(x &gt;= 0) ? x : -x</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>If an expression containing a binary operator appears before the ? in the ternary ?: operator, it should be parenthesized. </j.0:Rule>
    <j.0:SecondaryTypeList>Miscellaneous Practices</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices$$Miscellaneous Practices</j.0:FatherName>
    <j.0:Name>Expressions before `?' in the Conditional Operator</j.0:Name>
    <j.0:ExcelId>codeConvention_74</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/189">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/189/prosCluster/0"/>
    <j.0:Rule>Break before an operator.</j.0:Rule>
    <j.0:ExcelId>codeConvention_16</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/298">
    <j.0:BadExample>String args[];</j.0:BadExample>
    <j.0:Rule>Brackets are a part of an Array type. </j.0:Rule>
    <j.0:ExcelId>alibaba_7</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/141">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>After each comma that follows an enum constant, a line break is optional. Additional blank lines (usually just one) are also allowed. </j.0:Rule>
    <j.0:Name>Enum classes</j.0:Name>
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:ExcelId>google_50</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/141/prosCluster/0">
        <j.0:ProsExample>private enum Answer {
  YES {
    @Override public String toString() {
      return "yes";
    }
  },

  NO,
  MAYBE
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RelatedSpecification>54.0</j.0:RelatedSpecification>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/492">
    <j.0:Rule>Enumeration types can be defined or used for parameter types in libraries, but cannot be used for interface return types (POJO that contains enumeration types is also not allowed).</j.0:Rule>
    <j.0:ExcelId>alibaba_201</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/250">
    <j.0:SecondaryTypeList>AvoidDollarSigns</j.0:SecondaryTypeList>
    <j.0:BadExample>public class Fo$o {
  // not a recommended name
}</j.0:BadExample>
    <j.0:ExcelId>pmdCodetyle_2</j.0:ExcelId>
    <j.0:FatherName>AvoidDollarSigns</j.0:FatherName>
    <j.0:PrimaryTypeList>AvoidDollarSigns</j.0:PrimaryTypeList>
    <j.0:Name>AvoidDollarSigns</j.0:Name>
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/250/consCluster0"/>
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/250/prosCluster/0"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>Avoid using dollar signs in variable/method/class/interface names.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/383">
    <j.0:Rule> In a switch block, each case should be finished by break/return. If not, a note should be included to describe at which case it will stop. Within every switch block, a default statement must be present, even if it is empty.</j.0:Rule>
    <j.0:SecondaryTypeList>Flow Control Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Flow Control Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Flow Control Statements</j.0:FatherName>
    <j.0:Name>Flow Control Statements</j.0:Name>
    <j.0:ExcelId>alibaba_92</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/274">
    <j.0:Rule>By default this rule uses the standard Java naming convention (Camel case).</j.0:Rule>
    <j.0:SecondaryTypeList>MethodNamingConventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>MethodNamingConventions</j.0:PrimaryTypeList>
    <j.0:FatherName>MethodNamingConventions</j.0:FatherName>
    <j.0:Name>MethodNamingConventions</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_26</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/14">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/14/prosCluster/0">
        <j.0:Pros>Give the reader the immediate clue that this is a potentially time-consuming operation, and if used repeatedly, he might consider caching the result. Consistent use of the term enhances readability.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>The term compute can be used in methods where something is computed.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_15</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/38">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/38/prosCluster/0">
        <j.0:Pros>Avoid unwanted compilation side effects by "hidden" include statements deep into a source file.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Include statements must be located at the top of a file only.</j.0:Rule>
    <j.0:SecondaryTypeList>Include Files and Include Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:Name>Include Files and Include Statements</j.0:Name>
    <j.0:ExcelId>geosoft_39</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/188">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/188/prosCluster/0">
        <j.0:ProsExample>function(longExpression1, longExpression2, longExpression3, 
         longExpression4, longExpression5); 
 var = function1(longExpression1,
                function2(longExpression2,
                          longExpression3)); </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Break after a comma.</j.0:Rule>
    <j.0:SecondaryTypeList>Wrapping Lines</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Indentation</j.0:PrimaryTypeList>
    <j.0:FatherName>Indentation</j.0:FatherName>
    <j.0:Name>Wrapping Lines</j.0:Name>
    <j.0:ExcelId>codeConvention_15</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/491">
    <j.0:Rule>When adding or upgrading libraries, remain the versions of dependent libraries unchanged if not necessary. If there is a change, it must be correctly assessed and checked. It is recommended to use command dependency:resolve to compare the information before and after. If the result is identical, find out the differences with the command dependency:tree and use &lt;excludes&gt; to eliminate unnecessary libraries.</j.0:Rule>
    <j.0:ExcelId>alibaba_200</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/273">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:BadExample>public class MissingTheProperSuffix implements SessionBean {}   // non-standard name</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/273/prosCluster/0">
        <j.0:ProsExample>public class SomeBean implements SessionBean{}                  // proper name</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>MDBAndSessionBeanNamingConvention</j.0:FatherName>
    <j.0:Name>MDBAndSessionBeanNamingConvention</j.0:Name>
    <j.0:SecondaryTypeList>MDBAndSessionBeanNamingConvention</j.0:SecondaryTypeList>
    <j.0:Rule>The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by ‘Bean’.</j.0:Rule>
    <j.0:PrimaryTypeList>MDBAndSessionBeanNamingConvention</j.0:PrimaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:ExcelId>pmdCodetyle_25</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/382">
    <j.0:Rule>ThreadLocal cannot solve update problems of shared object. It is recommended to use a static ThreadLocal object which is shared by all operations in the same thread.</j.0:Rule>
    <j.0:ExcelId>alibaba_91</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/140">
    <j.0:SecondaryTypeList>Grouping parentheses: recommended</j.0:SecondaryTypeList>
    <j.0:ExcelId>google_49</j.0:ExcelId>
    <j.0:Rule>Optional grouping parentheses are omitted only when author and reviewer agree that there is no reasonable chance the code will be misinterpreted without them.</j.0:Rule>
    <j.0:FatherName>Formatting</j.0:FatherName>
    <j.0:Rationale>It is not reasonable to assume that every reader has the entire Java operator precedence table memorized.</j.0:Rationale>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/140/prosCluster/0">
        <j.0:Pros>make the code easier to read. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Name>Grouping parentheses: recommended</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/297">
    <j.0:Rule>Abstract class names must start with Abstract or Base. Exception class names must end with Exception. Test case names shall start with the class names to be tested and end with Test.</j.0:Rule>
    <j.0:ExcelId>alibaba_6</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/164">
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:RelatedSpecification>78.0</j.0:RelatedSpecification>
    <j.0:SecondaryTypeList>Non-constant field names</j.0:SecondaryTypeList>
    <j.0:Rule>Non-constant field names (static or otherwise) are written in lowerCamelCase.These names are typically nouns or noun phrases.</j.0:Rule>
    <j.0:Name>Non-constant field names</j.0:Name>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/164/prosCluster/0">
        <j.0:ProsExample>computedValues, index</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:ExcelId>google_73</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/37">
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:Name>Include Files and Include Statements</j.0:Name>
    <j.0:RuleExplanation>
</j.0:RuleExplanation>
    <j.0:ExcelId>geosoft_38</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/37/prosCluster/0">
        <j.0:Pros>In addition to show the reader the individual include files, it also give an immediate clue about the modules that are involved.
</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:SecondaryTypeList>Include Files and Include Statements</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rule>Include statements should be sorted and grouped. Sorted by their hierarchical position in the system with low level files included first. Leave an empty line between groups of include statements.Include file paths must never be absolute. Compiler directives should instead be used to indicate root directories for includes.

</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/13">
    <j.0:Rule>The terms get/set must be used where an attribute is accessed directly.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_14</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/490">
    <j.0:Rule> Online applications should not depend on SNAPSHOT versions (except for security packages); Official releases must be verified from central repository, to make sure that the RELEASE version number has continuity. Version numbers are not allowed to be overridden.</j.0:Rule>
    <j.0:ExcelId>alibaba_199</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/381">
    <j.0:Rule>Resizing HashMap when its capacity is not enough might cause dead link and high CPU usage because of high-concurrency. Avoid this risk in development.</j.0:Rule>
    <j.0:ExcelId>alibaba_90</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/163">
    <j.0:ExcelId>google_72</j.0:ExcelId>
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Constant names</j.0:SecondaryTypeList>
    <j.0:Rule>Constant names use CONSTANT_CASE: all uppercase letters, with each word separated from the next by a single underscore. </j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:RuleExplanation>Constants are static final fields whose contents are deeply immutable and whose methods have no detectable side effects. This includes primitives, Strings, immutable types, and immutable collections of immutable types. If any of the instance's observable state can change, it is not a constant.Merely intending to never mutate the object is not enough.</j.0:RuleExplanation>
    <j.0:RelatedSpecification>78.0</j.0:RelatedSpecification>
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:Name>Constant names</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/272">
    <j.0:BadExample>public class Something {
    int reallyLongIntName = -3;             // VIOLATION - Field
    public static void main( String argumentsList[] ) { // VIOLATION - Formal
        int otherReallyLongName = -5;       // VIOLATION - Local
        for (int interestingIntIndex = 0;   // VIOLATION - For
             interestingIntIndex &lt; 10;
             interestingIntIndex ++ ) {
        }
    }
}</j.0:BadExample>
    <j.0:Rule>Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.</j.0:Rule>
    <j.0:SecondaryTypeList>LongVariable</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>LongVariable</j.0:PrimaryTypeList>
    <j.0:FatherName>LongVariable</j.0:FatherName>
    <j.0:Name>LongVariable</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_24</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/187">
    <j.0:PrimaryTypeList>Indentation</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Line Length</j.0:SecondaryTypeList>
    <j.0:ExcelId>codeConvention_14</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Name>Line Length</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
    <j.0:FatherName>Indentation</j.0:FatherName>
    <j.0:Rationale>Avoid lines longer than 80 characters, since they're not handled well by many terminals and tools.</j.0:Rationale>
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/187/prosCluster/0"/>
    <j.0:Rule>Avoid lines longer than 80 characters.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/296">
    <j.0:BadExample>MAX_COUNT</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/296/prosCluster/0">
        <j.0:ProsExample>MAX_STOCK_COUNT</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Constant variable names should be written in upper characters separated by underscores. These names should be semantically complete and clear.</j.0:Rule>
    <j.0:ExcelId>alibaba_5</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/16">
    <j.0:Rule>The term initialize can be used where an object or a concept is established.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_17</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/380">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/380/prosCluster/0">
        <j.0:ProsExample>AtomicInteger count = new AtomicInteger(); 
count.addAndGet(1); </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>In JDK8, LongAdder is recommended which reduces retry times of optimistic lock and has better performance than AtomicLong.</j.0:RuleExplanation>
    <j.0:Rule>volatile is used to solve the problem of invisible memory in multiple threads. Write-Once-Read-Many can solve variable synchronization problem. But Write-Many cannot settle thread safe problem. </j.0:Rule>
    <j.0:ExcelId>alibaba_89</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/271">
    <j.0:BadExample>public class Bar {
    public void foo () {
        String txtA = "a";          // if txtA will not be assigned again it is better to do this:
        final String txtB = "b";
    }
}</j.0:BadExample>
    <j.0:Rule>A local variable assigned only once can be declared final.</j.0:Rule>
    <j.0:SecondaryTypeList>LocalVariableCouldBeFinal</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>LocalVariableCouldBeFinal</j.0:PrimaryTypeList>
    <j.0:FatherName>LocalVariableCouldBeFinal</j.0:FatherName>
    <j.0:Name>LocalVariableCouldBeFinal</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_23</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/295">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/295/prosCluster/0">
        <j.0:ProsExample>localValue / getHttpMessage() / inputUserId</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Method names, parameter names, member variable names, and local variable names should be written in lowerCamelCase.</j.0:Rule>
    <j.0:ExcelId>alibaba_4</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/162">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/162/prosCluster/0">
        <j.0:ProsExample>pop_emptyStack</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Underscores may appear in JUnit test method names to separate logical components of the name, with each component written in lowerCamelCase.One typical pattern is &lt;methodUnderTest&gt;_&lt;state&gt;. There is no One Correct Way to name test methods.</j.0:Rule>
    <j.0:ExcelId>google_71</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/186">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/186/prosCluster/0"/>
    <j.0:Rule>Four spaces should be used as the unit of indentation. The exact construction of the indentation (spaces vs. tabs) is unspecified. Tabs must be set exactly every 8 spaces (not 4).</j.0:Rule>
    <j.0:SecondaryTypeList>Indentation</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Indentation</j.0:PrimaryTypeList>
    <j.0:FatherName>Indentation</j.0:FatherName>
    <j.0:Name>Indentation</j.0:Name>
    <j.0:ExcelId>codeConvention_13</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/15">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/15/prosCluster/0">
        <j.0:Pros>Give the reader the immediate clue that this is a simple look up method with a minimum of computations involved. Consistent use of the term enhances readability.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>The term find can be used in methods where something is looked up.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_16</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/39">
    <j.0:Rationale>Enforces information hiding.</j.0:Rationale>
    <j.0:Rule>Types that are local to one file only can be declared inside that file.</j.0:Rule>
    <j.0:SecondaryTypeList>Types</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Types</j.0:Name>
    <j.0:ExcelId>geosoft_40</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/496">
    <j.0:Rule>It is recommended that libraries do not include configuration, at least do not increase the configuration items.</j.0:Rule>
    <j.0:ExcelId>alibaba_205</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/254">
    <j.0:BadExample>public class SomeJNIClass {
     public SomeJNIClass() {
         System.loadLibrary("nativelib");
     }

     static {
         System.loadLibrary("nativelib");
     }

     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
         System.loadLibrary("nativelib");
     }
}</j.0:BadExample>
    <j.0:Rule>Unnecessary reliance on Java Native Interface (JNI) calls directly 
reduces application portability and increases the maintenance burden.</j.0:Rule>
    <j.0:SecondaryTypeList>AvoidUsingNativeCode</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>AvoidUsingNativeCode</j.0:PrimaryTypeList>
    <j.0:FatherName>AvoidUsingNativeCode</j.0:FatherName>
    <j.0:Name>AvoidUsingNativeCode</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_6</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/387">
    <j.0:Rule>Performance should be considered when loop statements are used. The following operations are better to be processed outside the loop statement, including object and variable declaration, database connection, try-catch statements.</j.0:Rule>
    <j.0:ExcelId>alibaba_96</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/169">
    <j.0:ExcelId>google_78</j.0:ExcelId>
    <j.0:BadExample>XMLHTTPRequest, newCustomerID, innerStopWatch,  supportsIPv6OnIOS</j.0:BadExample>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>Naming&amp;&amp;Camel case</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Naming&amp;&amp;Camel case</j.0:SecondaryTypeList>
    <j.0:FatherName>Naming&amp;&amp;Camel case</j.0:FatherName>
    <j.0:Rule>Convert the phrase to plain ASCII and remove any apostrophes. For example, "Müller's algorithm" might become "Muellers algorithm".
Divide this result into words, splitting on spaces and any remaining punctuation (typically hyphens).
Recommended: if any word already has a conventional camel-case appearance in common usage, split this into its constituent parts (e.g., "AdWords" becomes "ad words"). Note that a word such as "iOS" is not really in camel case per se; it defies any convention, so this recommendation does not apply.
Now lowercase everything (including acronyms), then uppercase only the first character of:
... each word, to yield upper camel case, or
... each word except the first, to yield lower camel case
Finally, join all the words into a single identifier.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:Name>Naming&amp;&amp;Camel case</j.0:Name>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/169/prosCluster/0">
        <j.0:ProsExample>XmlHttpRequest, newCustomerId, innerStopwatch, supportsIpv6OnIos, </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/278">
    <j.0:Rule>Checks for variables that are defined before they might be used.</j.0:Rule>
    <j.0:BadExample>public int getLength(String[] strings) {
    int length = 0; // declared prematurely
    if (strings == null || strings.length == 0) return 0;
    for (String str : strings) {
        length += str.length();
    }
    return length;
}</j.0:BadExample>
    <j.0:Name>PrematureDeclaration</j.0:Name>
    <j.0:FatherName>PrematureDeclaration</j.0:FatherName>
    <j.0:SecondaryTypeList>PrematureDeclaration</j.0:SecondaryTypeList>
    <j.0:ExcelId>pmdCodetyle_30</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:RuleExplanation>A reference is deemed to be premature if it is created right before a block of code that doesn’t use it that also has the ability to return or throw an exception.</j.0:RuleExplanation>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:PrimaryTypeList>PrematureDeclaration</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/121">
    <j.0:Rule>A method or constructor name stays attached to the open parenthesis (() that follows it.</j.0:Rule>
    <j.0:ExcelId>google_30</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/472">
    <j.0:Rule>Do not use HashMap or HashTable as DB query result type.</j.0:Rule>
    <j.0:ExcelId>alibaba_181</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/230">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/230/prosCluster/0">
        <j.0:ProsExample>    while (d++ = s++) {
        n++;
    }
    prints("size is " + foo + "\n");</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>All binary operators except . should be separated from their operands by spaces. Blank spaces should never separate unary operators such as unary minus, increment ("++"), and decrement ("--") from their operands. </j.0:Rule>
    <j.0:ExcelId>codeConvention_57</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/363">
    <j.0:RuleExplanation>Better to use ArrayList(int initialCapacity) to initialize ArrayList.</j.0:RuleExplanation>
    <j.0:Rule>Set a size when initializing a collection if possible.</j.0:Rule>
    <j.0:ExcelId>alibaba_72</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/18">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/18/prosCluster/0">
        <j.0:Pros>Enhances readability since the name gives the user an immediate clue of the type of the variable and the operations that can be performed on its elements.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Plural form should be used on names representing a collection of objects.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_19</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/386">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/386/consCluster0">
        <j.0:ConsExample>if ((file.open(fileName, "w") != null) &amp;&amp; (...) || (...)) {
    ...
}</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/386/prosCluster/0">
        <j.0:ProsExample>// please refer to the pseudo-code as follows 
boolean existed = (file.open(fileName, "w") != null) &amp;&amp; (...) || (...);
if (existed) {
    ...
}  </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>Logic within many if statements are very complicated. Readers need to analyze the final results of the conditional expression to decide what statement will be executed in certain conditions.</j.0:RuleExplanation>
    <j.0:Rule>Do not use complicated statements in conditional statements (except for frequently used methods like getXxx/isXxx). Use boolean variables to store results of complicated statements temporarily will increase the code’s readability.</j.0:Rule>
    <j.0:ExcelId>alibaba_95</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/168">
    <j.0:RelatedSpecification>67.0</j.0:RelatedSpecification>
    <j.0:Rule>A name in the form used for classes (see Class names), followed by the capital letter T</j.0:Rule>
    <j.0:ExcelId>google_77</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/471">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/471/consCluster0">
        <j.0:Cons>It may lead to OOM issue because its implementation is to retrieve all DB records of statementName’s corresponding SQL statement, then start, size subset is applied through subList.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/471/prosCluster/0">
        <j.0:ProsExample>Use #start#, #size# in sqlmap.xml.

Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();  
map.put("start", start);  
map.put("size", size);  </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>iBatis built in queryForList(String statementName, int start, int size) is not recommended.</j.0:Rule>
    <j.0:ExcelId>alibaba_180</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/253">
    <j.0:BadExample>public final class Foo {
  private int bar() {}
  protected int baz() {}
  // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible?
}</j.0:BadExample>
    <j.0:Rule>Do not use protected methods in most final classes since they cannot be subclassed.</j.0:Rule>
    <j.0:FatherName>AvoidProtectedMethodInFinalClassNotExtending</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Exception>This should only be allowed in final classes that extend other classes with protected methods 
(whose visibility cannot be reduced). </j.0:Exception>
    <j.0:SecondaryTypeList>AvoidProtectedMethodInFinalClassNotExtending</j.0:SecondaryTypeList>
    <j.0:Name>AvoidProtectedMethodInFinalClassNotExtending</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_5</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:PrimaryTypeList>AvoidProtectedMethodInFinalClassNotExtending</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/362">
    <j.0:BadExample>The program below cannot handle the case if o1 equals to o2, which might cause an exception in a real case:

new Comparator&lt;Student&gt;() {
    @Override
    public int compare(Student o1, Student o2) {
        return o1.getId() &gt; o2.getId() ? 1 : -1;
    }
}</j.0:BadExample>
    <j.0:RuleExplanation>1) Comparing x,y and y,x should return the opposite result.
  2) If x&gt;y and y&gt;z, then x&gt;z.
  3) If x=y, then comparing x with z and comparing y with z should return the same result.</j.0:RuleExplanation>
    <j.0:Rule>In JDK 7 and above version, Comparator should meet the three requirements listed below, otherwise Arrays.sort and Collections.sort will throw IllegalArgumentException.</j.0:Rule>
    <j.0:ExcelId>alibaba_71</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/120">
    <j.0:Rule>When a line is broken at an assignment operator the break typically comes after the symbol, but either way is acceptable.
This also applies to the "assignment-operator-like" colon in an enhanced for ("foreach") statement.</j.0:Rule>
    <j.0:ExcelId>google_29</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/495">
    <j.0:Rule>The declaration of dependencies in all POM files should be placed in &lt;dependencies&gt; block. Versions of dependencies should be specified in &lt;dependencyManagement&gt; block.</j.0:Rule>
    <j.0:ExcelId>alibaba_204</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/17">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/17/prosCluster/0">
        <j.0:Pros>Enhances readability since the name gives the user an immediate clue of the type of the variable and thereby the objects resources.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Variables representing GUI components should be suffixed by the component type name.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_18</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/167">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/167/prosCluster/0">
        <j.0:ProsExample>E, T, X, T2</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Each type variable is named in one of two styles: A single capital letter, optionally followed by a single numeral</j.0:Rule>
    <j.0:SecondaryTypeList>Type variable names</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:Name>Type variable names</j.0:Name>
    <j.0:ExcelId>google_76</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/276">
    <j.0:BadExample>public class OneReturnOnly1 {
  public void foo(int x) {
    if (x &gt; 0) {
      return "hey";   // first exit
    }
    return "hi";    // second exit
  }
}</j.0:BadExample>
    <j.0:Rule>A method should have only one exit point, and that should be the last statement in the method.</j.0:Rule>
    <j.0:SecondaryTypeList>OnlyOneReturn</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>OnlyOneReturn</j.0:PrimaryTypeList>
    <j.0:FatherName>OnlyOneReturn</j.0:FatherName>
    <j.0:Name>OnlyOneReturn</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_28</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/470">
    <j.0:Rule>Be cautious with parameters in xml configuration. Do not use ${} in place of #{}, #param#. SQL injection may happen in this way.</j.0:Rule>
    <j.0:ExcelId>alibaba_179</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/361">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/361/consCluster0">
        <j.0:ConsExample>List&lt;String&gt; a = new ArrayList&lt;String&gt;();
a.add("1");
a.add("2");
for (String temp : a) {
    if ("1".equals(temp)){
        a.remove(temp);
    }
}</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/361/prosCluster/0">
        <j.0:ProsExample>Iterator&lt;String&gt; it = a.iterator();
while (it.hasNext()) {    
    String temp =  it.next();             
    if (delete condition) {              
        it.remove();       
    }
}    </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>If you try to replace “1” with “2”, you will get an unexpected result.</j.0:RuleExplanation>
    <j.0:Rule>Do not remove or add elements to a collection in a foreach loop. Please use Iterator to remove an item. Iterator object should be synchronized when executing concurrent operations.</j.0:Rule>
    <j.0:ExcelId>alibaba_70</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/494">
    <j.0:Rule>For the same GroupId and ArtifactId, Version must be the same in sub-projects.</j.0:Rule>
    <j.0:ExcelId>alibaba_203</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/143">
    <j.0:Name>Variable declarations</j.0:Name>
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>very variable declaration (field or local) declares only one variable: declarations</j.0:Rule>
    <j.0:BadExample>int a, b; </j.0:BadExample>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:ExcelId>google_52</j.0:ExcelId>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:Exception>Multiple variable declarations are acceptable in the header of a for loop.</j.0:Exception>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/252">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>AvoidProtectedFieldInFinalClass</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:ExcelId>pmdCodetyle_4</j.0:ExcelId>
    <j.0:Name>AvoidProtectedFieldInFinalClass</j.0:Name>
    <j.0:FatherName>AvoidProtectedFieldInFinalClass</j.0:FatherName>
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/252/prosCluster/0"/>
    <j.0:BadExample>public final class Bar {
  private int x;
  protected int y;
  // bar cannot be subclassed, so is y really private or package visible?
  Bar() {}
}</j.0:BadExample>
    <j.0:Rule>Do not use protected fields in final classes since they cannot be subclassed.</j.0:Rule>
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/252/consCluster0"/>
    <j.0:PrimaryTypeList>AvoidProtectedFieldInFinalClass</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/385">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/385/prosCluster/0">
        <j.0:ProsExample>if-else code with over three nested conditional levels can be replaced by guard statements or State Design Pattern. Example of guard statement:
public void today() {
    if (isBusy()) {
        System.out.println("Change time.");
        return;
    }

    if (isFree()) {
        System.out.println("Go to travel.");
        return;
    }

    System.out.println("Stay at home to learn Alibaba Java Coding Guidelines.");
    return;
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Exception>If statements like if()...else if()...else... have to be used to express the logic,</j.0:Exception>
    <j.0:Rule>Use else as less as possible</j.0:Rule>
    <j.0:ExcelId>alibaba_94</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/299">
    <j.0:BadExample>boolean isSuccess; The method name will be isSuccess() and then RPC framework will deduce the variable name as ‘success’, resulting in a serialization error since it cannot find the correct attribute.</j.0:BadExample>
    <j.0:Rule>Do not add ‘is’ as prefix while defining Boolean variable, since it may cause a serialization exception in some Java frameworks.</j.0:Rule>
    <j.0:ExcelId>alibaba_8</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/166">
    <j.0:RelatedSpecification>78.0</j.0:RelatedSpecification>
    <j.0:Rule>Local variable names are written in lowerCamelCase.Even when final and immutable, local variables are not considered to be constants, and should not be styled as constants.</j.0:Rule>
    <j.0:SecondaryTypeList>Local variable names</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:Name>Local variable names</j.0:Name>
    <j.0:ExcelId>google_75</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/251">
    <j.0:BadExample>public class MyClass {
    public void foo() {
        final String finalLocalVariable;
    }
}</j.0:BadExample>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/251/prosCluster/0"/>
    <j.0:Rule>Avoid using final local variables, turn them into fields.</j.0:Rule>
    <j.0:SecondaryTypeList>AvoidFinalLocalVariable</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>AvoidFinalLocalVariable</j.0:PrimaryTypeList>
    <j.0:Name>AvoidFinalLocalVariable</j.0:Name>
    <j.0:FatherName>AvoidFinalLocalVariable</j.0:FatherName>
    <j.0:ExcelId>pmdCodetyle_3</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/251/consCluster0"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/360">
    <j.0:RuleExplanation>About PECS (Producer Extends Consumer Super) principle:
1) Extends is suitable for frequently reading scenarios. 
2) Super is suitable for frequently inserting scenarios.</j.0:RuleExplanation>
    <j.0:Rule>Method add cannot be used for generic wildcard with &lt;? Extends T&gt;, method get cannot be used with &lt;? super T&gt;, which probably goes wrong.</j.0:Rule>
    <j.0:ExcelId>alibaba_69</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/493">
    <j.0:Rule>When a group of libraries are used, a uniform version variable need to be defined to avoid the inconsistency of version numbers.</j.0:Rule>
    <j.0:ExcelId>alibaba_202</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/384">
    <j.0:BadExample>  if (condition) statements; </j.0:BadExample>
    <j.0:Rule>Braces are used with if, else, for, do and while statements, even if the body contains only a single statement. </j.0:Rule>
    <j.0:ExcelId>alibaba_93</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/19">
    <j.0:Rule>The prefix n should be used for variables representing a number of objects.The notation is taken from mathematics where it is an established convention for indicating a number of objects.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_20</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/290">
    <j.0:BadExample>public class Foo {

    private int _bar1;
    private Integer _bar2;

    public void setBar(int n) {
        _bar1 = Integer.valueOf((n)); // here
        _bar2 = (n); // and here
    }
}</j.0:BadExample>
    <j.0:Rule>Useless parentheses should be removed.</j.0:Rule>
    <j.0:SecondaryTypeList>UselessParentheses</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>UselessParentheses</j.0:PrimaryTypeList>
    <j.0:FatherName>UselessParentheses</j.0:FatherName>
    <j.0:Name>UselessParentheses</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_42</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/78">
    <j.0:BadExample>doSomething(a,b,c,d);</j.0:BadExample>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:ExcelId>geosoft_79</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/78/prosCluster/0">
        <j.0:Pros>Makes the individual components of the statements stand out. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Commas should be followed by a white space. </j.0:Rule>
    <j.0:Name>White Space</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/409">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/409/prosCluster/0">
        <j.0:ProsExample>public static void hello() {
    /// Business is stopped temporarily by the owner.
    // Business business = new Business();
    // business.active();
    System.out.println("it's finished");
}</j.0:ProsExample>
        <j.0:Pros>For codes which are temporarily removed and likely to be reused, use /// to add a reasonable note.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Codes or configuration that is noticed to be obsoleted should be resolutely removed from projects.Remove obsoleted codes or configuration in time to avoid code redundancy.</j.0:Rule>
    <j.0:SecondaryTypeList> </j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList> </j.0:PrimaryTypeList>
    <j.0:FatherName> </j.0:FatherName>
    <j.0:Name> </j.0:Name>
    <j.0:ExcelId>alibaba_118</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/54">
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/54/prosCluster/0">
        <j.0:Pros>By assigning boolean variables to expressions, the program gets automatic documentation. The construction will be easier to read, debug and maintain.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Complex conditional expressions must be avoided. Introduce temporary boolean variables instead .</j.0:Rule>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:ExcelId>geosoft_55</j.0:ExcelId>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Conditionals</j.0:SecondaryTypeList>
    <j.0:Name>Conditionals</j.0:Name>
    <j.0:BadExample>if ((elementNo &lt; 0) || (elementNo &gt; maxElement)||
     elementNo == lastElement) {
  :
}</j.0:BadExample>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/30">
    <j.0:Rule> C++ header files should have the extension .h (preferred) or .hpp. Source files can have the extension .c++ (recommended), .C, .cc or .cpp.
</j.0:Rule>
    <j.0:SecondaryTypeList>Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:Name>Source Files</j.0:Name>
    <j.0:ExcelId>geosoft_31</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/180">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/180/prosCluster/0">
        <j.0:ProsExample>/*
 * Classname
 *
 * Version info
 *
 * Copyright notice
 */</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>All source files should begin with a c-style comment that lists the programmer(s), the date, a copyright notice, and also a brief description of the purpose of the program.</j.0:Rule>
    <j.0:SecondaryTypeList>Java Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>File Organization</j.0:PrimaryTypeList>
    <j.0:FatherName>File Organization$$Java Source Files</j.0:FatherName>
    <j.0:Name>Beginning Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_7</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/7">
    <j.0:LastQaId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/6">
        <j.0:SsId>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/513">
            <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/513/consCluster0"/>
            <j.0:FatherName>Package Per Layer</j.0:FatherName>
            <j.0:ExcelId>c2_4</j.0:ExcelId>
            <j.0:Source>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html">
                <j.0:OntologyType>Document</j.0:OntologyType>
                <j.0:ProgrammingLanguage rdf:resource="http://www.semanticweb.org/CCBase/#ProgrammingLanguage/java"/>
                <j.0:DocumentUrl>http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html</j.0:DocumentUrl>
              </rdf:Description>
            </j.0:Source>
            <j.0:CodeConventionType>idom</j.0:CodeConventionType>
            <j.0:Rule>PackagePerLayer refers to the practice of grouping all objects related to one layer of an n-tier application (see MultiTierArchitecture) in the same Java package.</j.0:Rule>
            <j.0:SecondaryTypeList>Package Per Layer</j.0:SecondaryTypeList>
            <j.0:Name>Package Per Layer</j.0:Name>
            <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/513/prosCluster/0"/>
            <j.0:OntologyType>CodeConvention</j.0:OntologyType>
            <j.0:PrimaryTypeList>Package Per Layer</j.0:PrimaryTypeList>
          </rdf:Description>
        </j.0:SsId>
        <j.0:Yype>question</j.0:Yype>
        <j.0:ContentCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/6/contentCluster/0">
            <j.0:Content>Would that be "at least one package per layer"?</j.0:Content>
          </rdf:Description>
        </j.0:ContentCluster>
        <j.0:Document>c2</j.0:Document>
        <j.0:ExcelId>7.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:LastQaId>
    <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/513"/>
    <j.0:Yype>answer</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/7/contentCluster/0">
        <j.0:Content>Yes. But you would probably have subpackages for that layer as opposed to having several packages at the same level as those for other layers (does that make sense?). I'm not as sure as I was a year ago that this is the best way to group classes.

</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>8.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/408">
    <j.0:Rule> Size needs to be specified when initializing any data structure if possible, in order to avoid memory issues caused by unlimited growth.</j.0:Rule>
    <j.0:ExcelId>alibaba_117</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/77">
    <j.0:Rule>C++ reserved words should be followed by a white space. </j.0:Rule>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:ExcelId>geosoft_78</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:BadExample>while(true) </j.0:BadExample>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/77/prosCluster/0">
        <j.0:Pros>Makes the individual components of the statements stand out. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>White Space</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/53">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>Loops</j.0:SecondaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Loops</j.0:Name>
    <j.0:ExcelId>geosoft_54</j.0:ExcelId>
    <j.0:BadExample>for (;;) {  
  :
}</j.0:BadExample>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rule>The form while(true) should be used for infinite loops.Testing against 1 is neither necessary nor meaningful. The form for (;;) is not very readable, and it is not apparent that this actually is an infinite loop.</j.0:Rule>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/56">
    <j.0:Rule>The conditional should be put on a separate line.This is for debugging purposes. When writing on a single line, it is not apparent whether the test is really true or not.</j.0:Rule>
    <j.0:ExcelId>geosoft_57</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Name>Conditionals</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:BadExample>if (isDone) doCleanup();</j.0:BadExample>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Conditionals</j.0:SecondaryTypeList>
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:FatherName>Statements</j.0:FatherName>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/407">
    <j.0:Rule> It is better not to contain variable declaration, logical symbols or any complicated logic in velocity template files.</j.0:Rule>
    <j.0:ExcelId>alibaba_116</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/32">
    <j.0:BadExample>class MyClass
{
public:
  int getValue () {return value_;}  // NO!
  ...

private:
  int value_;
}</j.0:BadExample>
    <j.0:Rule>All definitions should reside in source files.The header files should declare an interface, the source file should implement it. When looking for an implementation, the programmer should always know that it is found in the source file.</j.0:Rule>
    <j.0:SecondaryTypeList>Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:Name>Source Files</j.0:Name>
    <j.0:ExcelId>geosoft_33</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/9">
    <j.0:LastQaId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/8">
        <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/513"/>
        <j.0:Yype>question</j.0:Yype>
        <j.0:ContentCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/8/contentCluster/0">
            <j.0:Content>Isn't there a problem if I depend on one of these sub-packages but not on the enclosing package?</j.0:Content>
          </rdf:Description>
        </j.0:ContentCluster>
        <j.0:Document>c2</j.0:Document>
        <j.0:ExcelId>9.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:LastQaId>
    <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/513"/>
    <j.0:Yype>answer</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/9/contentCluster/0">
        <j.0:Content>Imagine the 'layer-packages': alpha, beta and gamma. Each contains sub packages called one, two and three. These contain sub-packages called huey, dewey and louis. Now imagine a situation where a class in alpha.one.dewey depends on something in gamma.three.louis. Don't we end up with a nest of dependencies that are not as clear as the initial idea of PackagePerLayer suggests? I do this myself but I find that these kinds of situations with deep package hierarchies often occur.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>10.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/79">
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Rule>Colons should be surrounded by white space. </j.0:Rule>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Name>White Space</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/79/prosCluster/0">
        <j.0:Pros>Makes the individual components of the statements stand out. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:BadExample>case 100:</j.0:BadExample>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>geosoft_80</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/515">
    <j.0:Name>Resource Releases Resource</j.0:Name>
    <j.0:ExcelId>c2_6</j.0:ExcelId>
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/515/consCluster0"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/515/prosCluster/1">
        <j.0:Pros>It takes more of the burden off of each client of a resource and places the burdon one time on the resource provider.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/515/consCluster1"/>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/515/prosCluster/0">
        <j.0:Pros>It is abstract and reusable.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/515/prosCluster/2">
        <j.0:Pros>It has no policies about how many clients, criteria for granting access, etc.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:SecondaryTypeList>Resource Releases Resource</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Resource Releases Resource</j.0:PrimaryTypeList>
    <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/515/consCluster2"/>
    <j.0:FatherName>Resource Releases Resource</j.0:FatherName>
    <j.0:Rule>This issue of managing resources has been getting a lot of attention in Comp.object recently (early Feb. 1998). Here is a Java idiom for managing precious resources that is at least as good, if not better than the C++ idiom ResourceAcquisitionIsInitialization.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/406">
    <j.0:RuleExplanation>In order to get a more accurate time, use System.nanoTime(). In JDK8, use Instant class to deal with situations like time statistics.</j.0:RuleExplanation>
    <j.0:Rule>Use System.currentTimeMillis() to get the current millisecond. Do not use new Date().getTime().</j.0:Rule>
    <j.0:ExcelId>alibaba_115</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/55">
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:Rule>The nominal case should be put in the if-part and the exception in the else-part of an if statement.Makes sure that the exceptions don't obscure the normal path of execution. This is important for both the readability and performance.</j.0:Rule>
    <j.0:SecondaryTypeList>Conditionals</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Conditionals</j.0:Name>
    <j.0:ExcelId>geosoft_56</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/31">
    <j.0:Exception>An obvious exception is template classes that must be both declared and defined inside a .h file.</j.0:Exception>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/31/prosCluster/0">
        <j.0:Pros>Makes it easy to find the associated files of a given class</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ExcelId>geosoft_32</j.0:ExcelId>
    <j.0:Rule>A class should be declared in a header file and defined in a source file where the name of the files match the name of the class.</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Name>Source Files</j.0:Name>
    <j.0:FatherName>Files</j.0:FatherName>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/4">
    <j.0:Author>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/2">
        <j.0:Yype>people</j.0:Yype>
        <j.0:Url>http://www.natpryce.com/</j.0:Url>
        <j.0:Introduction>Nat Pryce is an independent consultant. He currently works at BSkyB in London on their Set Top Box software team.</j.0:Introduction>
        <j.0:Name>Net Pryce</j.0:Name>
        <j.0:ExcelId>3.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:Author>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/4/contentCluster/1">
        <j.0:Example> interface ConnectionControl? extends Control {
     void connect( Address to ) throws TransportException?;
     void close() throws TransportException?;
     void shutdown() throws TransportException?;

     void addConnectionListener( ConnectionListener? l );
     void removeConnectionListener( ConnectionListener? l );
 }</j.0:Example>
        <j.0:Content>There are a number of standard control interfaces. For example, to control a connection:</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/4/contentCluster/0">
        <j.0:Example> interface Protocol {
     void transmit( Message m ) throws TransportException?;
     void setReceiver( ProtocolReceiver? r ); // who gets called when messages arrive
     Control getControl( Class control_interface_class );
 }

 interface Control {
     // Empty - it just marks interfaces as being used to control protocol layers
 }</j.0:Example>
        <j.0:Content>Ok. Taken from my own experience, but simplified somewhat to highlight the important points...

I have implemented a framework for building transport protocols by plugging together components. Protocol components are loaded dynamically. A program will request a protocol component by name and be returned an implementation of that protocol. For example, the name "tcp" is mapped to the TCP protocol. Different vendors may provide implementations of the same protocol: the framework uses a database to map protocol names to specific implementations.

All protocol components implement the Protocol interface. This interface provides methods for transmiting data and plugging protocol layers together. It also allows client code to query for control interfaces on the layer (or those beneath it) so that it can configure the protocol stack it is using.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:SsId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/511">
        <j.0:SecondaryTypeList>Interfaces Independent Of Implementation</j.0:SecondaryTypeList>
        <j.0:RelatedSpecification>1.0</j.0:RelatedSpecification>
        <j.0:Name>Interfaces Independent Of Implementation</j.0:Name>
        <j.0:PrimaryTypeList>Interfaces Independent Of Implementation</j.0:PrimaryTypeList>
        <j.0:ExcelId>c2_2</j.0:ExcelId>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
        <j.0:Decision>You are defining a framework that maps external data to ParameterClasses and dynamically loads those classes into the JVM. The dynamically loaded ParameterClasses all implement a a common interface but some ParameterClasses need to offer additional, type-specific services. These services are provided by extending the common interface with additional methods. Users of these extended ParameterClasses can check for additional services with the instanceof operator (or some equivalent mechanism) and then attempting to cast the dynamically loaded object to the extended interface.</j.0:Decision>
        <j.0:CodeConventionType>idom</j.0:CodeConventionType>
        <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/511/consCluster0"/>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/511/prosCluster/0">
            <j.0:Pros>If different developers each write a ParameterClass to handle the same type parameter, they will both need to write extended interfaces. Even if these interfaces have the same signature, the JVM will consider them to be different. Thus, a client program cannot dynamically query the plugin for an extended interface without being tied to the vendor that defined that interface. </j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Rule>Define standard extended interfaces for well known or standardised parameters. Third-party plug-ins can implement these interfaces. Clients can query for the standard interfaces, without needing to rely on propriety extensions to the framework.</j.0:Rule>
        <j.0:FatherName>Interfaces Independent Of Implementation</j.0:FatherName>
      </rdf:Description>
    </j.0:SsId>
    <j.0:Yype>opinion</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/4/contentCluster/2">
        <j.0:Content>This is a generic interface for controlling a connection-oriented protocol. It allows higher layers to actively connect to a remote peer, independently of the actual protocol implemented by the layer (i.e. TCP, SPX).
However, some protocols have specific options that should be made available to code that needs them. For example, TCP has options to disable the NagleAlgorithm?, configure the size of the send and receive buffers and so on. SPX has different options, as does ATM/AAL5 etc.

Because component implementations are loaded dynamically, and different vendors may provide implementations of the same protocols, there may be more than one implementation of the TCP protocol: for instance, uk.ac.ic.doc.protocols.tcp.TCP and com.mycorp.protocols.tcp.TCP. Without standard control interfaces, different vendors will define control interfaces for their own implementations of TCP. Code wanting to control the TCP protocol is tied to a specific vendor because it queries for the control interfaces by class.

Therefore, the protocol framework defines standard interfaces for controlling TCP and other protocols even though it does not provide implementations of all those protocols itself: it defines InterfacesIndependentOfImplementation. This allows code using those control interfaces remains vendor independent.

The same argument applies when using the instanceof operator to cast to control interfaces.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>5.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/185">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/185/prosCluster/0"/>
    <j.0:RuleExplanation>For example, a private class method can be in between two public instance methods. The goal is to make reading and understanding the code easier.</j.0:RuleExplanation>
    <j.0:Rule>These methods should be grouped by functionality rather than by scope or accessibility.</j.0:Rule>
    <j.0:ExcelId>codeConvention_12</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/294">
    <j.0:BadExample>marcoPolo / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/294/prosCluster/0">
        <j.0:ProsExample>MarcoPolo / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Class names should be nouns in UpperCamelCase except domain models: DO, BO, DTO, VO, etc.</j.0:Rule>
    <j.0:ExcelId>alibaba_3</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/58">
    <j.0:Rule>The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be considered declared as named constants instead.If the number does not have an obvious meaning by itself, the readability is enhanced by introducing a named constant instead. A different approach is to introduce a method from which the constant can be accessed.</j.0:Rule>
    <j.0:SecondaryTypeList>Constants</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Constants</j.0:Name>
    <j.0:ExcelId>geosoft_59</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/34">
    <j.0:Rationale>These characters are bound to cause problem for editors, printers, terminal emulators or debuggers when used in a multi-programmer, multi-platform environment.</j.0:Rationale>
    <j.0:Rule>Special characters like TAB and page break must be avoided.</j.0:Rule>
    <j.0:SecondaryTypeList>Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:Name>Source Files</j.0:Name>
    <j.0:ExcelId>geosoft_35</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/10">
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:ExcelId>geosoft_11</j.0:ExcelId>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:Rule>All names should be written in English.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rationale>English is the preferred language for international development.</j.0:Rationale>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:BadExample>fileNavn</j.0:BadExample>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/3">
    <j.0:Author>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/3">
        <j.0:Yype>people</j.0:Yype>
        <j.0:Url>http://wiki.c2.com/?StevenNewton</j.0:Url>
        <j.0:Name>Steven Newton</j.0:Name>
        <j.0:ExcelId>4.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:Author>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/3/contentCluster/1">
        <j.0:Example> &lt;RequestInterceptor 
 className="org.apache.tomcat.request.JDBCRealm" 
 debug="99" 
 driverName="sun.jdbc.odbc.JdbcOdbcDriver" 
 connectionURL="jdbc:odbc:TOMCAT"
 userTable="users" 
 userNameCol="user_name" 
 userCredCol="user_pass" 
 userRoleTable="user_roles" 
 roleNameCol="role_name" /&gt; </j.0:Example>
        <j.0:Content>can be replaced by:</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/3/contentCluster/0">
        <j.0:Example>  &lt;RequestInterceptor 
 className="org.apache.tomcat.request.SimpleRealm?" 
 debug="0" /&gt;
</j.0:Example>
        <j.0:Content>This idiom has turned out to be an extremely good fit with ExtensibleMarkupLanguage. For example, the configuration of Tomcat is done with XML files, and many of the parameters specify classes that implement an interface and are used for various services. For example, this snippet:</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:SsId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510">
        <j.0:DemonstrationSoftwareCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/demonstrationSoftwareCluster3">
            <j.0:DemonstrationSoftware>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Project/3">
                <j.0:Author>oracle</j.0:Author>
                <j.0:Url>https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/</j.0:Url>
                <j.0:Language>java</j.0:Language>
                <j.0:Introduction>The Java Database Connectivity (JDBC) API provides universal data access from the Java programming language. Using the JDBC API, you can access virtually any data source, from relational databases to spreadsheets and flat files. JDBC technology also provides a common base on which tools and alternate interfaces can be built.</j.0:Introduction>
                <j.0:Name>jdbc</j.0:Name>
                <j.0:ExcelId>4.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:DemonstrationSoftware>
            <j.0:DemonstrationSoftwareDescription>JDBC is almost like this, except there isn't a standard place to put JDBC drivers so they will automatically be loaded.</j.0:DemonstrationSoftwareDescription>
          </rdf:Description>
        </j.0:DemonstrationSoftwareCluster>
        <j.0:DemonstrationSoftwareCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/demonstrationSoftwareCluster0">
            <j.0:DemonstrationSoftware>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Project/0">
                <j.0:Author>oracle</j.0:Author>
                <j.0:Url>https://docs.oracle.com/javase/10/docs/api/java/io/package-summary.html</j.0:Url>
                <j.0:Language>java</j.0:Language>
                <j.0:Introduction>Provides for system input and output through data streams, serialization and the file system. Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown.</j.0:Introduction>
                <j.0:Name>java.io</j.0:Name>
                <j.0:ExcelId>1.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:DemonstrationSoftware>
            <j.0:DemonstrationSoftwareDescription>The JavaIo package uses this idiom to name character encoding schemes that convert between Unicode characters and raw bytes.</j.0:DemonstrationSoftwareDescription>
          </rdf:Description>
        </j.0:DemonstrationSoftwareCluster>
        <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/510/consCluster4"/>
        <j.0:PrimaryTypeList>Parameter Class</j.0:PrimaryTypeList>
        <j.0:FatherName>Parameter Class</j.0:FatherName>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/prosCluster/2">
            <j.0:Pros>New parameter values can be introduced without having to change the code that uses those values.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:DemonstrationSoftwareCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/demonstrationSoftwareCluster2">
            <j.0:DemonstrationSoftware>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Project/2">
                <j.0:Author>oracle</j.0:Author>
                <j.0:Url>https://docs.oracle.com/javase/8/docs/api/java/awt/package-summary.html</j.0:Url>
                <j.0:Language>java</j.0:Language>
                <j.0:Introduction>Contains all of the classes for creating user interfaces and for painting graphics and images.</j.0:Introduction>
                <j.0:Name>java.awt</j.0:Name>
                <j.0:ExcelId>3.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:DemonstrationSoftware>
            <j.0:DemonstrationSoftwareDescription>The Java AWT uses this idiom to specify the GUI JavaAwtToolkit used by the JVM.</j.0:DemonstrationSoftwareDescription>
          </rdf:Description>
        </j.0:DemonstrationSoftwareCluster>
        <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/510/prosCluster/3"/>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/prosCluster/0">
            <j.0:Pros>The behaviour of the Java program can be parameterised by simple values, such as short string names, or more complex values by creating a more elaborate scheme for mapping from parameters to classes.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:Resource>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Resource/0">
            <j.0:Author>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/6">
                <j.0:Yype>people</j.0:Yype>
                <j.0:Name>Bill Venners</j.0:Name>
                <j.0:ExcelId>7.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:Author>
            <j.0:Yype>webarticle</j.0:Yype>
            <j.0:Url>http://www.javaworld.com/javaworld/jw-01-1999/jw-01-techniques.html</j.0:Url>
            <j.0:Introduction>How dynamic extension works in Java and how to use it in your designs</j.0:Introduction>
            <j.0:Name>HOW-TO Design with dynamic extension</j.0:Name>
            <j.0:ExcelId>1.0</j.0:ExcelId>
          </rdf:Description>
        </j.0:Resource>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/consCluster2">
            <j.0:Cons>Initialisation time is increased if the Reflection API must be used to query ParameterClasses for an appropriate Constructor.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/prosCluster/1">
            <j.0:Pros>Parameterisation does not impact runtime performance beyond the price of dynamically dispatched method calls.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:ExcelId>c2_1</j.0:ExcelId>
        <j.0:CodeConventionType>idom</j.0:CodeConventionType>
        <j.0:SecondaryTypeList>Parameter Class</j.0:SecondaryTypeList>
        <j.0:DemonstrationSoftwareCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/demonstrationSoftwareCluster4">
            <j.0:DemonstrationSoftware>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Project/4">
                <j.0:Author>oracle</j.0:Author>
                <j.0:Url>https://docs.oracle.com/javase/8/docs/api/java/applet/Applet.html</j.0:Url>
                <j.0:Language>java</j.0:Language>
                <j.0:Introduction>An applet is a small program that is intended not to be run on its own, but rather to be embedded inside another application.
The Applet class must be the superclass of any applet that is to be embedded in a Web page or viewed by the Java Applet Viewer. The Applet class provides a standard interface between applets and their environment.</j.0:Introduction>
                <j.0:Name>java.applet</j.0:Name>
                <j.0:ExcelId>5.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:DemonstrationSoftware>
            <j.0:DemonstrationSoftwareDescription>Applets work this way (the parameter is the URL.)</j.0:DemonstrationSoftwareDescription>
          </rdf:Description>
        </j.0:DemonstrationSoftwareCluster>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/consCluster0">
            <j.0:Cons>It is difficult to list all possible values, so that they can be displayed to the user, for example.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:Decision>You often need to modify the behaviour of a program based on external data, such as a command-line parameter. If you hard-code a finite set of acceptable parameter values into a program you will have to modify the program whenever you need to add new parameters. The deployment of new versions will become more complex as the number of installed programs increases. If programs need to interpret parameters in order to interoperate (for example, if the parameters are read from network messages), you must ensure that all users upgrade before they can communicate, which becomes very difficult with large user bases.</j.0:Decision>
        <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/510/consCluster3"/>
        <j.0:DemonstrationSoftwareCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/demonstrationSoftwareCluster1">
            <j.0:DemonstrationSoftware>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Project/1">
                <j.0:Author>oracle</j.0:Author>
                <j.0:Url>https://www.oracle.com/technetwork/java/javase/tech/index-jsp-140239.html</j.0:Url>
                <j.0:Language>java</j.0:Language>
                <j.0:Introduction>The Java Media Framework API (JMF) enables audio, video and other time-based media to be added to applications and applets built on Java technology. This optional package, which can capture, playback, stream, and transcode multiple media formats, extends the Java 2 Platform, Standard Edition (J2SE) for multimedia developers by providing a powerful toolkit to develop scalable, cross-platform technology.</j.0:Introduction>
                <j.0:Name>Java Media Framework</j.0:Name>
                <j.0:ExcelId>2.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:DemonstrationSoftware>
            <j.0:DemonstrationSoftwareDescription>The Java Media Framework (JMF) uses this idiom to specify codecs by media type and name sources of media.</j.0:DemonstrationSoftwareDescription>
          </rdf:Description>
        </j.0:DemonstrationSoftwareCluster>
        <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/510/prosCluster/4"/>
        <j.0:Name>Parameter Class</j.0:Name>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/510/consCluster1">
            <j.0:Cons>All ParameterClasses must be modified if the interface between the program and the ParameterClasses is changed.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:Rule>Take advantage of Java's built-in facilities for dynamic loading and linking of code. Dynamically load and instantiate classes of behaviour corresponding to external parameters.

1. Define an interface through which to access the parameterised behaviour
2. Define a naming scheme that maps user-specified parameters to the name of a Java class.
3 .Define classes that implement the interface for various parameters, and follow the naming scheme so that they can be found by the parameter-to-name mapping.
4. At run time, given a parameter value, map it to the name of the Java class that performs the required behaviour.
5. Dynamically load that class using the Class.forName method.
6. Instantiate an object of the class using the Class.newInstance method or via a Constructor of the class.
7. Cast the object to the interface you have defined and pass it to the objects that need to use the parameterised behaviour.</j.0:Rule>
      </rdf:Description>
    </j.0:SsId>
    <j.0:Yype>opinion</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/3/contentCluster/2">
        <j.0:Content>The former implements a simple file-based authentication scheme, the latter implements authentication via a database. It is trivial to create your own authentication Realm by implementing RequestInterceptor (actually most likely extending the no-op BaseInterceptor? adaptor) and writing a different authenticate() method.
Notice the attributes -- they correspond to bean methods that the framework can call, and your class can be configured competely from the config file.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>4.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/293">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/293/prosCluster/0">
        <j.0:ProsExample>alibaba / taobao / youku / Hangzhou. In these cases, Chinese proper names in Pinyin are acceptable.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Using Chinese, Pinyin, or Pinyin-English mixed spelling in naming is strictly prohibited. Accurate English spelling and grammar will make the code readable, understandable, and maintainable.</j.0:Rule>
    <j.0:ExcelId>alibaba_2</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/160">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/160/prosCluster/0">
        <j.0:ProsExample>HashTest, HashIntegrationTest</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Test classes are named starting with the name of the class they are testing, and ending with Test</j.0:Rule>
    <j.0:ExcelId>google_69</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/184">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/184/prosCluster/0"/>
    <j.0:Rule>First the public  
Instance  variables, then the protected, and then the private.</j.0:Rule>
    <j.0:ExcelId>codeConvention_11</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/57">
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rationale>Conditionals with executable statements are just very difficult to read. </j.0:Rationale>
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:Name>Conditionals</j.0:Name>
    <j.0:ExcelId>geosoft_58</j.0:ExcelId>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:Rule>Executable statements in conditionals must be avoided.</j.0:Rule>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:SecondaryTypeList>Conditionals</j.0:SecondaryTypeList>
    <j.0:BadExample>if (!(fileHandle = open(fileName, "w"))) {
  :
}</j.0:BadExample>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/33">
    <j.0:Rationale>80 columns is a common dimension for editors, terminal emulators, printers and debuggers, and files that are shared between several people should keep within these constraints. It improves readability when unintentional line breaks are avoided when passing a file between programmers.</j.0:Rationale>
    <j.0:Rule>File content must be kept within 80 columns.</j.0:Rule>
    <j.0:SecondaryTypeList>Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:Name>Source Files</j.0:Name>
    <j.0:ExcelId>geosoft_34</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/183">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/183/prosCluster/0"/>
    <j.0:Rule>First the public class variables, then the protected, and then the private.</j.0:Rule>
    <j.0:ExcelId>codeConvention_10</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/292">
    <j.0:ExcelId>alibaba_1</j.0:ExcelId>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
    <j.0:Rule>Names should not start or end with an underline or a dollar sign.</j.0:Rule>
    <j.0:BadExample>_name / __name / $Object / name_ / name$ / Object$</j.0:BadExample>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Naming Conventions</j.0:Name>
    <j.0:CodeConventionType>idom</j.0:CodeConventionType>
    <j.0:SecondaryTypeList>Naming Conventions</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/36">
    <j.0:Rationale>The construction is to avoid compilation errors. The name convention resembles the location of the file inside the source tree and prevents naming conflicts.</j.0:Rationale>
    <j.0:Rule>Header files must contain an include guard.</j.0:Rule>
    <j.0:SecondaryTypeList>Include Files and Include Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:Name>Include Files and Include Statements</j.0:Name>
    <j.0:ExcelId>geosoft_37</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/12">
    <j.0:BadExample>line.getLineLength()</j.0:BadExample>
    <j.0:Rule>The name of the object is implicit, and should be avoided in a method name.</j.0:Rule>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_13</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/291">
    <j.0:Rule>Look for qualified this usages in the same class.</j.0:Rule>
    <j.0:BadExample>public class Foo {
    final Foo otherFoo = Foo.this;  // use "this" directly

    public void doSomething() {
         final Foo anotherFoo = Foo.this;  // use "this" directly
    }

    private class Foo2 {
        final Foo2 myFoo2 = Foo2.this;  // Use "this" direclty
    }
}</j.0:BadExample>
    <j.0:SecondaryTypeList>UselessQualifiedThis</j.0:SecondaryTypeList>
    <j.0:FatherName>UselessQualifiedThis</j.0:FatherName>
    <j.0:PrimaryTypeList>UselessQualifiedThis</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/291/prosCluster/0">
        <j.0:ProsExample>public class Foo {
    private ActionListener returnListener() {
        return new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doSomethingWithQualifiedThis(Foo.this);  // This is fine
            }
        };
    }

    private class Foo3 {
        final Foo myFoo = Foo.this;  // This is fine
    }
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:ExcelId>pmdCodetyle_43</j.0:ExcelId>
    <j.0:Name>UselessQualifiedThis</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/5">
    <j.0:Author>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/4">
        <j.0:MemberOf>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/5">
            <j.0:Yype>company</j.0:Yype>
            <j.0:Url>https://new.siemens.com/global/en/company/topic-areas/digitalization/cybersecurity/partner-ibm.html</j.0:Url>
            <j.0:Name>IBM Corporation</j.0:Name>
            <j.0:ExcelId>6.0</j.0:ExcelId>
          </rdf:Description>
        </j.0:MemberOf>
        <j.0:Yype>people</j.0:Yype>
        <j.0:Url>http://wiki.c2.com/?KyleBrown</j.0:Url>
        <j.0:Introduction>I'm a Distinguished Engineer at IBM Corporation. Somehow I was conned into being the Program Chair of PlopTwoThousandTwo.</j.0:Introduction>
        <j.0:Name>Kyle Brown</j.0:Name>
        <j.0:ExcelId>5.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:Author>
    <j.0:SsId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/512">
        <j.0:Rule>A technique that I have found to be very useful is to take the time to make sure that JavaApplets can be run as applications too.</j.0:Rule>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
        <j.0:FatherName>Applets Are Applications Too</j.0:FatherName>
        <j.0:PrimaryTypeList>Applets Are Applications Too</j.0:PrimaryTypeList>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/512/consCluster2">
            <j.0:Cons>Finally, if your application requires tight integration with the browser (i.e., lots of JavaScript and other browser-based technologies), then this may not be a good strategy for you.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/512/prosCluster/1">
            <j.0:Pros>It can give you more flexibility down the road if you decide to make the system an application.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/512/consCluster1">
            <j.0:Cons>Additionally, if you are depending upon web server authentication (such as HTTP Basic Authentication), you will need to build some kind of dialog which prompts the user for their login and password.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:Name>Applets Are Applications Too</j.0:Name>
        <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/512/prosCluster/2"/>
        <j.0:SecondaryTypeList>Applets Are Applications Too</j.0:SecondaryTypeList>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/512/consCluster0">
            <j.0:Cons>It does introduce some complexities though. In particular, you will need to maintain 2 versions of the code associated with your applet/application. </j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:ExcelId>c2_3</j.0:ExcelId>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/512/prosCluster/0">
            <j.0:Pros>The system can be unit tested more easily. Stopping and restarting a WebBrowser (all too common) is painful (shades of DOS Alt-Ctl-Del for pointer errors comes to mind).</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
      </rdf:Description>
    </j.0:SsId>
    <j.0:Yype>opinion</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/5/contentCluster/0">
        <j.0:Content>It doesn't take much to make a JavaApplet run as an application. All you have to do is write a main() method that creates a frame and slaps the applet into the frame. In fact, VisualAge for Java automatically generates this kind of code for you when you create an applet. I tend to think that the benefits of writing the few additional lines of code outweigh the (few) additional bytecodes that the method generates.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>6.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/182">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/182/prosCluster/0"/>
    <j.0:Rule>Class/interface implementation comment should contain any class-wide or interface-wide information that wasn't appropriate for the class/interface documentation comment.</j.0:Rule>
    <j.0:SecondaryTypeList>Java Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>File Organization</j.0:PrimaryTypeList>
    <j.0:FatherName>File Organization$$Java Source Files</j.0:FatherName>
    <j.0:Name>Class and Interface Declarations</j.0:Name>
    <j.0:ExcelId>codeConvention_9</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/59">
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rule>Floating point constants should always be written with decimal point and at least one decimal.</j.0:Rule>
    <j.0:SecondaryTypeList>Constants</j.0:SecondaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/59/prosCluster/1">
        <j.0:Pros>It emphasizes the type of the assigned variable (sum) at a point in the code where this might not be evident.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ExcelId>geosoft_60</j.0:ExcelId>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:BadExample>double total = 0;</j.0:BadExample>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/59/prosCluster/0">
        <j.0:Pros>This emphasizes the different nature of integer and floating point numbers. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Name>Constants</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/35">
    <j.0:Resource>Code Complete, Steve McConnell - Microsoft Press</j.0:Resource>
    <j.0:Rule>The incompleteness of split lines must be made obvious. In general:
Break after a comma.
Break after an operator.
Align the new line with the beginning of the expression on the previous line.</j.0:Rule>
    <j.0:SecondaryTypeList>Source Files</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Files</j.0:PrimaryTypeList>
    <j.0:FatherName>Files</j.0:FatherName>
    <j.0:Name>Source Files</j.0:Name>
    <j.0:ExcelId>geosoft_36</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/11">
    <j.0:ExcelId>geosoft_12</j.0:ExcelId>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Resource>Code Complete, Steve McConnell - Microsoft Press</j.0:Resource>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:Rule>Variables with a large scope should have long names, variables with a small scope can have short names</j.0:Rule>
    <j.0:RuleExplanation>Scratch variables used for temporary storage or indices are best kept short. A programmer reading such variables should be able to assume that its value is not used outside of a few lines of code. Common scratch variables for integers are i, j, k, m, n and for characters c and d.</j.0:RuleExplanation>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/303">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/303/prosCluster/0">
        <j.0:ProsExample>method definition in the interface: void f(); 
constant definition: String COMPANY = "alibaba";</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>In JDK8 it is allowed to define a default implementation for interface methods, which is valuable for all implemented classes.</j.0:RuleExplanation>
    <j.0:Rule>Do not add any modifier, including public, to methods in interface classes for coding simplicity. Please add valid Javadoc comments for methods. Do not define any variables in the interface except for the common constants of the application.</j.0:Rule>
    <j.0:ExcelId>alibaba_12</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/412">
    <j.0:Rule>It is irresponsible to use a try-catch on a big chunk of code. Be clear about the stable and unstable code when using try-catch. The stable code that means no exception will throw. For the unstable code, catch as specific as possible for exception handling.</j.0:Rule>
    <j.0:ExcelId>alibaba_121</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/327">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/327/consCluster0">
        <j.0:ConsExample>StringBuffer sb = new StringBuffer();
// no line break before '('
sb.append("zi").append("xin")...append
    ("huang");  
// no line break before ',' if there are multiple params
invoke(args1, args2, args3, ...
    , argsX);</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/327/prosCluster/0">
        <j.0:ProsExample>StringBuffer sb = new StringBuffer();
// line break if there are more than 120 characters, and 4 spaces indent at
// the second line. Make sure character '.' moved to the next line 
// together.  The third and fourth lines are aligned with the second one. 
sb.append("zi").append("xin").
    .append("huang")...
    .append("huang")...
    .append("huang");</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Java code has a column limit of 120 characters. Except import statements, any line that would exceed this limit must be line-wrapped as follows: 
  1) The second line should be intented at 4 spaces with respect to the first one. The third line and following ones should align with the second line. 
  2) Operators should be moved to the next line together with following context. 
  3) Character ‘.’ should be moved to the next line together with the method after it. 
  4) If there are multiple parameters that extend over the maximum length, a line break should be inserted after a comma. 
  5) No line breaks should appear before parentheses.</j.0:Rule>
    <j.0:ExcelId>alibaba_36</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/436">
    <j.0:RuleExplanation>It may have precision loss when float and double numbers are stored, which in turn may lead to incorrect data comparison result. It is recommended to store integral and fractional parts separately when data range to be stored is beyond the range covered by decimal type.</j.0:RuleExplanation>
    <j.0:Rule>Decimals should be typed as decimal. float and double are not allowed.</j.0:Rule>
    <j.0:ExcelId>alibaba_145</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/328">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/328/prosCluster/0">
        <j.0:ProsExample>One space is used after the ‘,’ character in the following method definition.

f("a", "b", "c");</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>There must be one space between a comma and the next parameter for methods with multiple parameters.</j.0:Rule>
    <j.0:ExcelId>alibaba_37</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/82">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/82/prosCluster/0">
        <j.0:Pros>Enhance readability by introducing white space between logical units of a block.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>White Space</j.0:Name>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rule>Logical units within a block should be separated by one blank line.</j.0:Rule>
    <j.0:ExcelId>geosoft_83</j.0:ExcelId>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/411">
    <j.0:Rule>Never use exceptions for ordinary control flow. It is ineffective and unreadable.</j.0:Rule>
    <j.0:ExcelId>alibaba_120</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/302">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/302/prosCluster/0">
        <j.0:ProsExample>public class OrderFactory; public class LoginProxy; public class ResourceObserver;</j.0:ProsExample>
        <j.0:Pros>Including corresponding pattern names helps readers understand ideas in design patterns quickly.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> The pattern name is recommended to be included in the class name if any design pattern is used.</j.0:Rule>
    <j.0:ExcelId>alibaba_11</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/435">
    <j.0:RuleExplanation>pk means primary key, uk means unique key, and idx is short for index.</j.0:RuleExplanation>
    <j.0:Rule>The name of primary key index should be prefixed with pk_, followed by column name; Unique index should be named by prefixing its column name with uk_; And normal index should be formatted as idx_[column_name].</j.0:Rule>
    <j.0:ExcelId>alibaba_144</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/459">
    <j.0:Rule>Use ISNULL() to check NULL values. Result will be NULL when comparing NULL with any other values.</j.0:Rule>
    <j.0:ExcelId>alibaba_168</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/326">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/326/prosCluster/0">
        <j.0:ProsExample>public static void main(String[] args) {
    // four spaces indent
    String say = "hello";
    // one space before and after the operator
    int flag = 0;
    // one space between 'if' and '('; 
    // no space between '(' and 'flag' or between '0' and ')'
    if (flag == 0) {
        System.out.println(say);
    }
    // one space before '{' and line break after '{'
    if (flag == 1) {
        System.out.println("world");
    // line break before '}' but not after '}' if it is followed by 'else'
    } else {  
        System.out.println("ok");
    // line break after '}' if it is the end of the block
    }
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>To prevent tab characters from being used for indentation, you must configure your IDE. For example, “Use tab character” should be unchecked in IDEA, “insert spaces for tabs” should be checked in Eclipse.</j.0:RuleExplanation>
    <j.0:Rule>Each time a new block or block-like construct is opened, the indent increases by four spaces. When the block ends, the indent returns to the previous indent level. Tab characters are not used for indentation.</j.0:Rule>
    <j.0:ExcelId>alibaba_35</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/109">
    <j.0:Rule>When a class has multiple constructors, or multiple methods with the same name, these appear sequentially, with no other code in between (not even private members).</j.0:Rule>
    <j.0:ExcelId>google_18</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/218">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/218/prosCluster/0">
        <j.0:ProsExample>return;
 return myDisk.size();
 return (size ? size : defaultSize);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A return statement with a value should not use parentheses unless they make the return value more obvious in some way.</j.0:Rule>
    <j.0:SecondaryTypeList>return Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>return Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_45</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/81">
    <j.0:ExcelId>geosoft_82</j.0:ExcelId>
    <j.0:Rule>Method names can be followed by a white space when it is followed by another name.</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Name>White Space</j.0:Name>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Exception>When no name follows, the space can be omitted (doSomething()) since there is no doubt about the name in this case.</j.0:Exception>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/81/prosCluster/0">
        <j.0:Pros>Makes the individual names stand out. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/301">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/301/prosCluster/0">
        <j.0:ProsExample>AbsClass (AbstractClass); condi (Condition)</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Uncommon abbreviations should be avoided for the sake of legibility.</j.0:Rule>
    <j.0:ExcelId>alibaba_10</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/410">
    <j.0:BadExample>try { obj.method() } catch(NullPointerException e){…}</j.0:BadExample>
    <j.0:SecondaryTypeList>Exception</j.0:SecondaryTypeList>
    <j.0:ExcelId>alibaba_119</j.0:ExcelId>
    <j.0:Rule>Do not catch Runtime exceptions defined in JDK, such as NullPointerException and IndexOutOfBoundsException. Instead, pre-check is recommended whenever possible.</j.0:Rule>
    <j.0:Name>Exception</j.0:Name>
    <j.0:RuleExplanation>Use try-catch only if it is difficult to deal with pre-check, such as NumberFormatException.</j.0:RuleExplanation>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
    <j.0:FatherName>Exception and Logs</j.0:FatherName>
    <j.0:PrimaryTypeList>Exception and Logs</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/410/prosCluster/0">
        <j.0:ProsExample>if (obj != null) {...}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/2">
    <j.0:Author rdf:resource="http://www.semanticweb.org/CCBase/#Author/2"/>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/2/contentCluster/1">
        <j.0:Example> abstract class CipherFactory {
 public static Cipher newCipher( String name ) throws ... {
  return loadCipherClass( name ).newInstance();
 }

 private static Class loadCipherClass( String cipher_name ) throws ... { 
  return Class.forName( cipherNameToClassName(cipher_name) );
 }


 private static String cipherNameToClassName( String cipher_name ) {
  return "com.examplecorp.cipher." + cipher_name.toLowerCase() +
   ".Cipher" + cipher_name;
 }
 }

</j.0:Example>
        <j.0:Content>Ciphers are implemented as concrete classes that implement the Cipher interface. These are the ParameterClasses. They are dynamically loaded and instantiated when the application asks for a Cipher by name.
Ciphers are loaded by the newCipher method of the CipherFactory class. This method first maps the name of a cipher to a class, and then instantiates the class to create a new Cipher.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/2/contentCluster/0">
        <j.0:Example>interface Cipher {
 void reset();
 byte[] encrypt( byte[] ) throws ...;
 byte[] decrypt( byte[] ) throws ...;
 ... etc ...
 }</j.0:Example>
        <j.0:Content>Ok... let's use crypto as an example. We want to encrypt and decrypt data. There are a number of cryptographic algorithms (aka "ciphers") we can choose between, such as DES, Triple-DES or IDEA. We don't want to limit ourselves to a single cipher because, for example, our app will be decrypting encrypted mail where the sender will have chosen the cipher, and named the cipher in the mail headers. We also don't want to limit our app to a fixed set of ciphers, because new ciphers will be introduced as older ciphers are found to be insecure. We also don't want to limit our app to a single implementation for any cipher, because our users will want to choose a cipher implementation that they trust, and change implementations that they decide are untrustworthy. So, ciphers must be identified by parameters provided from external sources (mail messages), and these parameters must be mapped to implementations of the cipher (Java classes) that are dynamically loaded into our application.

Ciphers implement the Cipher interface that declares methods for encrypting and decrypting data, setting the encryption key, block size, initialisation vector, etc. For example:</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/510"/>
    <j.0:Yype>opoion</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/2/contentCluster/2">
        <j.0:Content>The CipherFactory translates a parameter into a class by loading a class named after the cipher with "Cipher" prepended, in a subpackage of "com.examplecorp.cipher" that has the same name as the cipher, but lowercase. E.g. the ParameterClass for the DES protocol would be com.examplecorp.cipher.des.CipherDES.
In practice, you would want to search for a class in a number of packages so that new packages of ciphers could be added to the system (e.g. search uk.mil.cipher and com.examplecorp.cipher), use a properties file to control how to find packages so that the class loading algorithm can be configured without recompiling the application, allow users to specify JAR files or URLs to search for classes, and so on.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>3.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/325">
    <j.0:Rule> There must be one space at both left and right side of operators, such as ‘=’, ‘&amp;&amp;’, ‘+’, ‘-‘, ternary operator, etc.</j.0:Rule>
    <j.0:ExcelId>alibaba_34</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/434">
    <j.0:Rule>Keyword, such as desc, range, match, delayed, etc., should not be used. It can be referenced from MySQL official document.</j.0:Rule>
    <j.0:ExcelId>alibaba_143</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/349">
    <j.0:BadExample>String str = "start";
for (int i = 0; i &lt; 100; i++) {
    str = str + "hello";
}</j.0:BadExample>
    <j.0:RuleExplanation>According to the decompiled bytecode file, for each loop, it allocates a StringBuilder object, appends a string, and finally returns a String object via the toString method. This is a tremendous waste of memory.</j.0:RuleExplanation>
    <j.0:Rule>Use the append method in StringBuilder inside a loop body when concatenating multiple strings.</j.0:Rule>
    <j.0:ExcelId>alibaba_58</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/458">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/458/prosCluster/0">
        <j.0:ProsExample>NPE issue could be avoided in this way: 
SELECT IF(ISNULL(SUM(g)), 0, SUM(g)) FROM table;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> When all values of one column are NULL, COUNT(column) returns 0, while SUM(column) returns NULL, so pay attention to NullPointerException issue when using SUM().</j.0:Rule>
    <j.0:ExcelId>alibaba_167</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/84">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/84/prosCluster/0">
        <j.0:Pros>The variables are easier to spot from the types by alignment.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>White Space</j.0:Name>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>Variables in declarations can be left aligned.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:ExcelId>geosoft_85</j.0:ExcelId>
    <j.0:FatherName>Layout</j.0:FatherName>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/108">
    <j.0:Decision> </j.0:Decision>
    <j.0:Rule>Each class uses some logical order, which its maintainer could explain if asked.</j.0:Rule>
    <j.0:SecondaryTypeList>Class declaration</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
    <j.0:FatherName>Source file structure$$Class declaration</j.0:FatherName>
    <j.0:Name>Ordering of class contents</j.0:Name>
    <j.0:ExcelId>google_17</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/60">
    <j.0:Rule> "0" should be used instead of "NULL".NULL is part of the standard C library, but is made obsolete in C++.</j.0:Rule>
    <j.0:SecondaryTypeList>Constants</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Constants</j.0:Name>
    <j.0:ExcelId>geosoft_61</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/300">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/300/prosCluster/0">
        <j.0:ProsExample>com.alibaba.open.util can be used as a package name for utils; MessageUtils can be used as a class name.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A package should be named in lowercase characters. There should be only one English word after each dot. Package names are always in singular format while class names can be in plural format if necessary.</j.0:Rule>
    <j.0:ExcelId>alibaba_9</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/433">
    <j.0:Rule>Plural nouns are not allowed as table names.</j.0:Rule>
    <j.0:ExcelId>alibaba_142</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/215">
    <j.0:RuleExplanation>Compound statements are statements that contain lists of statements enclosed in braces  "{ statements }".</j.0:RuleExplanation>
    <j.0:Rule>The enclosed statements should be indented one more level than the compound statement.</j.0:Rule>
    <j.0:SecondaryTypeList>Compound Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Compound Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_42</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/1">
    <j.0:Author rdf:resource="http://www.semanticweb.org/CCBase/#Author/2"/>
    <j.0:LastQaId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/0">
        <j.0:Author>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/0">
            <j.0:MemberOf>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/1">
                <j.0:Yype>organization</j.0:Yype>
                <j.0:Url>https://www.tue.nl/en/</j.0:Url>
                <j.0:Name>Eindhoven University of Technology</j.0:Name>
                <j.0:ExcelId>2.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:MemberOf>
            <j.0:Yype>people</j.0:Yype>
            <j.0:Url>http://wiki.c2.com/?StephanHouben</j.0:Url>
            <j.0:Introduction> a Ph.D. student in numerical mathematics at the Eindhoven University of Technology</j.0:Introduction>
            <j.0:Name>Stephan Houben</j.0:Name>
            <j.0:ExcelId>1.0</j.0:ExcelId>
          </rdf:Description>
        </j.0:Author>
        <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/510"/>
        <j.0:Yype>opinion</j.0:Yype>
        <j.0:ContentCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/0/contentCluster/0">
            <j.0:Content>Im currently writing (in C++) a application that allows a sort of "visual programming" by connecting blocks together. The blocks are instances of classes written by the user. If only C++ had Java's ability to load classes on the fly and inspect the signature of their m ethods programmatically! I even considered doing it in Java instead of C++. But we want to use the app for number crunching, and sorry, Java just isn't fast enough for that.

So I did something in C++. It relies on the user writing a small piece of registration code for every class that is to be used. The solution relies rather heavily on templates to allow two functions to be connected if their types match, even if this type wasn't yet defined at the time the code that does the connecting was written.

I think it is a rather workable solution. Best of all: it is 100% Pure C++.</j.0:Content>
          </rdf:Description>
        </j.0:ContentCluster>
        <j.0:Document>c2</j.0:Document>
        <j.0:ExcelId>1.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:LastQaId>
    <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/510"/>
    <j.0:Yype>opinion</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/1/contentCluster/0">
        <j.0:Content>In my experience one can develop reliable code must faster in Java than in C++. I would suggest writing your application in Java and then using AlternateHardAndSoftLayers to integrate CPU intensive algorithms written C if performance is actually too slow in practice.

You can use ParameterClasses to select between native and Java implementations of your algorithms, so that your program loads the native version on platforms for which native code exists and the pure Java version on other platforms. I have used ParameterClasses for this very purpose in a network protocol framework, so that programs could use native interfaces to the TCP and UDP protocols if they existed or fall back on slower implementations that used the java.net package if native versions were not available.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>2.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/324">
    <j.0:Rule> There must be one space between keywords, such as if/for/while/switch, and parentheses.</j.0:Rule>
    <j.0:ExcelId>alibaba_33</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/457">
    <j.0:Rule>COUNT(distinct column) calculates number of rows with distinct values in this column, excluding NULL values. Please note that COUNT(distinct column1, column2) returns 0 if all values of one of the columns are NULL, even if the other column contains distinct non-NULL values.</j.0:Rule>
    <j.0:ExcelId>alibaba_166</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/239">
    <j.0:Exception>One example of appropriate public instance variables is the case where the class is essentially a data structure, with no behavior. In other words, if you would have used a struct instead of a class (if Java supported struct), then it's appropriate to make the class's instance variables public.</j.0:Exception>
    <j.0:Rule>Don't make any instance or class variable public without good reason. Often, instance variables don't need to be explicitly set or gotten--often that happens as a side effect of method calls.</j.0:Rule>
    <j.0:SecondaryTypeList>Providing Access to Instance and Class Variables</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:Name>Providing Access to Instance and Class Variables</j.0:Name>
    <j.0:ExcelId>codeConvention_66</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/348">
    <j.0:BadExample>public Integer getData() {
     if (true) {
         return data + 100; 
     } else {
         return data - 100;
     }
 }</j.0:BadExample>
    <j.0:Rule>For a setter method, the argument name should be the same as the field name. Implementations of business logics in getter/setter methods, which will increase difficulties of the troubleshooting, are not recommended.</j.0:Rule>
    <j.0:ExcelId>alibaba_57</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/83">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>geosoft_84</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/83/prosCluster/0">
        <j.0:Pros>By making the space larger than space within a method, the methods will stand out within the class.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>White Space</j.0:Name>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Rule>Methods should be separated by three blank lines.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/501">
    <j.0:Rule>Use forward for internal redirection and URL assembly tools for external redirection. Otherwise there will be problems about URL maintaining inconsistency and potential security risks.</j.0:Rule>
    <j.0:ExcelId>alibaba_210</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/62">
    <j.0:BadExample>getValue()</j.0:BadExample>
    <j.0:Rule>Functions must always have the return value explicitly listed.If not exlicitly listed, C++ implies int return value for functions. A programmer must never rely on this feature, since this might be confusing for programmers not aware of this artifact.</j.0:Rule>
    <j.0:SecondaryTypeList>Functions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Functions</j.0:Name>
    <j.0:ExcelId>geosoft_63</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/417">
    <j.0:Rule> The Exception type to be caught needs to be the same class or superclass of the type that has been thrown.</j.0:Rule>
    <j.0:ExcelId>alibaba_126</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/308">
    <j.0:Rule>Use list as name prefix for a method to get multiple objects.</j.0:Rule>
    <j.0:ExcelId>alibaba_17</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/86">
    <j.0:Resource>Code Complete, Steve McConnell - Microsoft Press</j.0:Resource>
    <j.0:Rule>Tricky code should not be commented but rewritten!In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.</j.0:Rule>
    <j.0:SecondaryTypeList>Comments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:Name>Comments</j.0:Name>
    <j.0:ExcelId>geosoft_87</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/500">
    <j.0:RuleExplanation>OOM does not occur very often, only once in a few months. The dump information printed when error occurs is very valuable for error checking.</j.0:RuleExplanation>
    <j.0:Rule>Set -XX:+HeapDumpOnOutOfMemoryError parameter for JVM, so JVM will output dump information when OOM occurs.</j.0:Rule>
    <j.0:ExcelId>alibaba_209</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/415">
    <j.0:RuleExplanation>Use the try-with-resources statement to safely handle closeable resources (Java 7+).</j.0:RuleExplanation>
    <j.0:Rule> Closeable resources (stream, connection, etc.) must be handled in finally block. Never throw any exception from a finally block.</j.0:Rule>
    <j.0:ExcelId>alibaba_124</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/307">
    <j.0:Rule>Use get as name prefix for a method to get a single object.</j.0:Rule>
    <j.0:SecondaryTypeList>Naming conventions for Service/DAO layer methods</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Naming conventions for Service/DAO layer methods</j.0:Name>
    <j.0:ExcelId>alibaba_16</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/416">
    <j.0:Rule> Never use return within a finally block. A return statement in a finally block will cause exceptions or result in a discarded return value in the try-catch block.</j.0:Rule>
    <j.0:ExcelId>alibaba_125</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/61">
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:Rule>Floating point constants should always be written with a digit before the decimal point.The number and expression system in C++ is borrowed from mathematics and one should adhere to mathematical conventions for syntax wherever possible. </j.0:Rule>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>Constants</j.0:SecondaryTypeList>
    <j.0:BadExample>double total = .5;</j.0:BadExample>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/61/prosCluster/0">
        <j.0:Pros>There is no way it can be mixed with the integer </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>Constants</j.0:Name>
    <j.0:ExcelId>geosoft_62</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/85">
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Rule>Use alignment wherever it enhances readability.</j.0:Rule>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Name>White Space</j.0:Name>
    <j.0:ExcelId>geosoft_86</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/305">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/305/prosCluster/0">
        <j.0:ProsExample>AbstractTranslator to implement Translatable.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>If the interface name is to indicate the ability of the interface, then its name should be an adjective.</j.0:Rule>
    <j.0:ExcelId>alibaba_14</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/414">
    <j.0:Rule>Make sure to invoke the rollback if a method throws an Exception.</j.0:Rule>
    <j.0:ExcelId>alibaba_123</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/40">
    <j.0:Rule>The parts of a class must be sorted public, protected and private . All sections must be identified explicitly. Not applicable sections should be left out.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Name>Types</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>geosoft_41</j.0:ExcelId>
    <j.0:SecondaryTypeList>Types</j.0:SecondaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/40/prosCluster/0">
        <j.0:Pros>The ordering is "most public first" so people who only wish to use the class can stop reading when they reach the protected/private sections.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:Resource>http://www.wildfire.com/~ag/Engineering/Development/C++Style/</j.0:Resource>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/306">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/306/prosCluster/0">
        <j.0:ProsExample>Enumeration name: DealStatusEnum; Member name: SUCCESS / UNKOWN_REASON.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>Enumeration is indeed a special constant class and all constructor methods are private by default.</j.0:RuleExplanation>
    <j.0:Rule>An Enumeration class name should end with Enum. Its members should be spelled out in upper case words, separated by underlines.</j.0:Rule>
    <j.0:ExcelId>alibaba_15</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/439">
    <j.0:RuleExplanation>id is the primary key, which is unsigned bigint and self-incrementing with step length of 1. The type of gmt_create and gmt_modified should be DATE_TIME.</j.0:RuleExplanation>
    <j.0:Rule>A table must include three columns as following: id, gmt_create and gmt_modified.</j.0:Rule>
    <j.0:ExcelId>alibaba_148</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/88">
    <j.0:Rationale>Since multilevel C-commenting is not supported, using // comments ensure that it is always possible to comment out entire sections of a file using /* */ for debugging purposes etc.</j.0:Rationale>
    <j.0:Rule>Use // for all comments, including multi-line comments.</j.0:Rule>
    <j.0:SecondaryTypeList>Comments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:Name>Comments</j.0:Name>
    <j.0:ExcelId>geosoft_89</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/64">
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Name>Layout</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ExcelId>geosoft_65</j.0:ExcelId>
    <j.0:RuleExplanation>Indentation of 1 is too small to emphasize the logical layout of the code. Indentation larger than 4 makes deeply nested code difficult to read and increases the chance that the lines must be split. Choosing between indentation of 2, 3 and 4,  2 and 4 are the more common, and 2 chosen to reduce the chance of splitting code lines.</j.0:RuleExplanation>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:Rule>Basic indentation should be 2.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/413">
    <j.0:Rule>Do not suppress or ignore exceptions. If you do not want to handle it, then re-throw it. The top layer must handle the exception and translate it into what the user can understand.</j.0:Rule>
    <j.0:ExcelId>alibaba_122</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/304">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/304/prosCluster/0">
        <j.0:ProsExample>CacheServiceImpl to implement CacheService.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>All Service and DAO classes must be interfaces based on SOA principle. Implementation class names should end with Impl.</j.0:Rule>
    <j.0:ExcelId>alibaba_13</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/437">
    <j.0:Rule> Use char if lengths of information to be stored in that column are almost the same.</j.0:Rule>
    <j.0:ExcelId>alibaba_146</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/329">
    <j.0:Rule>The charset encoding of text files should be UTF-8 and the characters of line breaks should be in Unix format, instead of Windows format.</j.0:Rule>
    <j.0:ExcelId>alibaba_38</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/438">
    <j.0:Rule>The length of varchar should not exceed 5000, otherwise it should be defined as text. It is better to store them in a separate table in order to avoid its effect on indexing efficiency of other columns.</j.0:Rule>
    <j.0:ExcelId>alibaba_147</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/87">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Resource>http://www.doc.ic.ac.uk/lab/cplus/c%2b%2b.rules/</j.0:Resource>
    <j.0:ExcelId>geosoft_88</j.0:ExcelId>
    <j.0:Rule>All comments should be written in English</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:Rationale>In an international environment English is the preferred language.</j.0:Rationale>
    <j.0:SecondaryTypeList>Comments</j.0:SecondaryTypeList>
    <j.0:Name>Comments</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/63">
    <j.0:Exception>Only in some very few cases (for instance breaking out of deeply nested structures) should goto be considered, and only if the alternative structured counterpart is proven to be less readable.</j.0:Exception>
    <j.0:Rule>goto should not be used.Goto statements violate the idea of structured code. </j.0:Rule>
    <j.0:SecondaryTypeList>Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Statements</j.0:Name>
    <j.0:ExcelId>geosoft_64</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/101">
    <j.0:Rule>Wildcard imports, static or otherwise, are not used.</j.0:Rule>
    <j.0:SecondaryTypeList>Import statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
    <j.0:FatherName>Source file structure$$Import statements</j.0:FatherName>
    <j.0:Name>No wildcard imports</j.0:Name>
    <j.0:ExcelId>google_10</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/343">
    <j.0:RuleExplanation>We can call the toString method in a POJO directly to print property values in order to check the problem when a method throws an exception in runtime.</j.0:RuleExplanation>
    <j.0:Rule>The toString method must be implemented in a POJO class. The super.toString method should be called in in the beginning of the implementation if the current class extends another POJO class.</j.0:Rule>
    <j.0:ExcelId>alibaba_52</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/452">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/452/prosCluster/0">
        <j.0:ProsExample>Firstly locate the required id range quickly, then join:
select a.* from table1 a, (select id from table1 where some_condition LIMIT 100000, 20) b where a.id=b.id;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>Instead of bypassing offset rows, MySQL retrieves totally offset+N rows, then drops off offset rows and returns N rows. It is very inefficient when offset is very big. The solution is either limiting the number of pages to be returned, or rewriting SQL statement when page number exceeds a predefined threshold.</j.0:RuleExplanation>
    <j.0:Rule>Use late join or sub-query to optimize scenarios with many pages.</j.0:Rule>
    <j.0:ExcelId>alibaba_161</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/210">
    <j.0:BadExample>int count;
...
func() {
    if (condition) {
        int count;     // AVOID!
        ...
    }
    ...
}</j.0:BadExample>
    <j.0:Rule>Avoid local declarations that hide declarations at higher levels,do not declare the same variable name in an inner block</j.0:Rule>
    <j.0:ExcelId>codeConvention_37</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/125">
    <j.0:Rule>When there are multiple continuation lines, indentation may be varied beyond +4 as desired. In general, two continuation lines use the same indentation level if and only if they begin with syntactically parallel elements.</j.0:Rule>
    <j.0:ExcelId>google_34</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/476">
    <j.0:Rule>compareValue of &lt;isEqual&gt; is a constant (normally a number) which is used to compared with property value. &lt;isNotEmpty&gt; means executing corresponding logic when property is not empty and not null. &lt;isNotNull&gt; means executing related logic when property is not null.</j.0:Rule>
    <j.0:ExcelId>alibaba_185</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/234">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/234/prosCluster/0">
        <j.0:ProsExample>class Raster;
class ImageSprite;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words--avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).</j.0:Rule>
    <j.0:ExcelId>codeConvention_61</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/367">
    <j.0:RuleExplanation>Resource driven class, utility class and singleton factory class are all included.</j.0:RuleExplanation>
    <j.0:Rule>Thread-safe should be ensured when initializing singleton instance, as well as all methods in it.</j.0:Rule>
    <j.0:SecondaryTypeList>Concurrency</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Concurrency</j.0:PrimaryTypeList>
    <j.0:FatherName>Concurrency</j.0:FatherName>
    <j.0:Name>Concurrency</j.0:Name>
    <j.0:ExcelId>alibaba_76</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/149">
    <j.0:Exception> A switch statement for an enum type may omit the default statement group, if it includes explicit cases covering all possible values of that type. This enables IDEs or other static analysis tools to issue a warning if any cases were missed.</j.0:Exception>
    <j.0:Rule>Each switch statement includes a default statement group, even if it contains no code.</j.0:Rule>
    <j.0:ExcelId>google_58</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/258">
    <j.0:Rule>Avoid negation within an “if” expression with an “else” clause.</j.0:Rule>
    <j.0:SecondaryTypeList>ConfusingTernary</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>ConfusingTernary</j.0:PrimaryTypeList>
    <j.0:FatherName>ConfusingTernary</j.0:FatherName>
    <j.0:Name>ConfusingTernary</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_10</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/233">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/233/prosCluster/0">
        <j.0:Pros>Naming conventions make programs more understandable by making them easier to read. They can also give information about the function of the identifier--for example, whether it's a constant, package, or class--which can be helpful in understanding the code.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Naming conventions should be followed.</j.0:Rule>
    <j.0:SecondaryTypeList>Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Naming Conventions</j.0:Name>
    <j.0:ExcelId>codeConvention_60</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/342">
    <j.0:Rule>Business logic in constructor methods is prohibited. All initializations should be implemented in the init method.</j.0:Rule>
    <j.0:ExcelId>alibaba_51</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/475">
    <j.0:Rule> Do not overuse @Transactional. Because transaction affects QPS of DB, and relevant rollbacks may need be considered, including cache rollback, search engine rollback, message making up, statistics adjustment, etc.</j.0:Rule>
    <j.0:ExcelId>alibaba_184</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/366">
    <j.0:Rule>Deduplication operations could be performed quickly since set stores unique values only. Avoid using method contains of List to perform traverse, comparison and de-duplication.</j.0:Rule>
    <j.0:ExcelId>alibaba_75</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/257">
    <j.0:Name>CommentDefaultAccessModifier</j.0:Name>
    <j.0:FatherName>CommentDefaultAccessModifier</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>pmdCodetyle_9</j.0:ExcelId>
    <j.0:Rule>To avoid mistakes if we want that a Method, Constructor, Field or Nested class have a default access modifier 
we must add a comment at the beginning of it’s declaration.</j.0:Rule>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/257/prosCluster/0">
        <j.0:ProsExample>public class Foo {
    /* default */ final String stringValue = "some string";
    /* default */ String getString() {
       return stringValue;
    }

    /* default */ class NestedFoo {
    }
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>CommentDefaultAccessModifier</j.0:PrimaryTypeList>
    <j.0:RuleExplanation>By default the comment must be /* default / or / package */</j.0:RuleExplanation>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:SecondaryTypeList>CommentDefaultAccessModifier</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/499">
    <j.0:RuleExplanation>Most operating systems are designed to manage TCP/UDP connections as a file, i.e. one connection corresponds to one File Descriptor. The maximum number of File Descriptors supported by the most Linux servers is 1024. It is easy to make an “open too many files” error because of the lack of File Descriptor when the number of concurrent connections is large, which would cause that new connections cannot be established.</j.0:RuleExplanation>
    <j.0:Rule>Increase the maximum number of File Descriptors supported by the server.</j.0:Rule>
    <j.0:ExcelId>alibaba_208</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/124">
    <j.0:Rule>When line-wrapping, each line after the first (each continuation line) is indented at least +4 from the original line.</j.0:Rule>
    <j.0:SecondaryTypeList>Line-wrapping</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting$$Line-wrapping</j.0:FatherName>
    <j.0:Name>Indent continuation lines at least +4 spaces</j.0:Name>
    <j.0:ExcelId>google_33</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/148">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/148/prosCluster/0">
        <j.0:ProsExample>switch (input) {
  case 1:
  case 2:
    prepareOneOrTwo();
    // fall through
  case 3:
    handleOneTwoOrThree();
    break;
  default:
    handleLargeNumber(input);
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Exception>This special comment is not required in the last statement group of the switch block.</j.0:Exception>
    <j.0:Rule>Within a switch block, each statement group either terminates abruptly (with a break, continue, return or thrown exception), or is marked with a comment to indicate that execution will or might continue into the next statement group. Any comment that communicates the idea of fall-through is sufficient (typically // fall through). </j.0:Rule>
    <j.0:ExcelId>google_57</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/451">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/451/prosCluster/0">
        <j.0:Pros>Index types include primary key index, unique index and common index. Covering index pertains to a query effect. When refer to explain result, using index may appear in extra columns.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>If we need to check the title of Chapter 11 of a book, do we need turn to the page where Chapter 11 starts? No, because the table of contents actually includes the title, which serves as a covering index.</j.0:RuleExplanation>
    <j.0:Rule>Make use of Covering Index for query to avoid additional query after searching index.</j.0:Rule>
    <j.0:ExcelId>alibaba_160</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/123">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/123/prosCluster/0">
        <j.0:ProsExample>MyLambda&lt;String, Long, Object&gt; lambda =
    (String label, Long value, Object obj) -&gt; {
        ...
    };

Predicate&lt;String&gt; predicate = str -&gt;
    longExpressionInvolving(str);</j.0:ProsExample>
        <j.0:Pros>The primary goal for line wrapping is to have clear code, not necessarily code that fits in the smallest number of lines.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A line is never broken adjacent to the arrow in a lambda, except that a break may come immediately after the arrow if the body of the lambda consists of a single unbraced expression. </j.0:Rule>
    <j.0:ExcelId>google_32</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/474">
    <j.0:Rule> Do not define a universal table updating interface, which accepts POJO as input parameter, and always update table set c1=value1, c2=value2, c3=value3, … regardless of intended columns to be updated. It is better not to update unrelated columns, because it is error prone, not efficient, and increases binlog storage.</j.0:Rule>
    <j.0:ExcelId>alibaba_183</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/232">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/232/prosCluster/0">
        <j.0:ProsExample>  myMethod((byte) aNum, (Object) x);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Casts should be followed by a blank.</j.0:Rule>
    <j.0:ExcelId>codeConvention_59</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/365">
    <j.0:RuleExplanation>Sorted means that its iteration follows specific sorting rule. Ordered means the order of elements in each traverse is stable. e.g. ArrayList is ordered and unsorted, HashMap is unordered and unsorted, TreeSet is ordered and sorted.</j.0:RuleExplanation>
    <j.0:Rule>Properly use sort and order of a collection to avoid negative influence of unsorted and unordered one.</j.0:Rule>
    <j.0:ExcelId>alibaba_74</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/147">
    <j.0:Rule>Inside the braces of a switch block are one or more statement groups. Each statement group consists of one or more switch labels (either case FOO: or default:), followed by one or more statements (or, for the last statement group, zero or more statements).</j.0:Rule>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:Name>Switch statements</j.0:Name>
    <j.0:ExcelId>google_56</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/498">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/498/prosCluster/0">
        <j.0:ProsExample>Modify the default value (Sec) by modifying the _etcsysctl.conf file on Linux servers: net.ipv4.tcp\_fin\_timeout = 30</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>It is recommended to reduce the time_wait value of the TCP protocol for high concurrency servers.</j.0:Rule>
    <j.0:SecondaryTypeList>Server Specification</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Server Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Server Specification</j.0:FatherName>
    <j.0:Name>Server Specification</j.0:Name>
    <j.0:ExcelId>alibaba_207</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/256">
    <j.0:Rule>It is a good practice to call super() in a constructor.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/256/prosCluster/0">
        <j.0:ProsExample>public class Foo extends Bar{
  public Foo() {
  // call the constructor of Bar
   super();
  }
 public Foo(int code) {
  // do something with code
   this();
   // no problem with this
  }
}
</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>CallSuperInConstructor</j.0:FatherName>
    <j.0:Exception>If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.</j.0:Exception>
    <j.0:Name>CallSuperInConstructor</j.0:Name>
    <j.0:SecondaryTypeList>CallSuperInConstructor</j.0:SecondaryTypeList>
    <j.0:ExcelId>pmdCodetyle_8</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>CallSuperInConstructor</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/389">
    <j.0:Rule>Input parameters should be checked in following scenarios: 
  1) Low-frequency implemented methods.
  2) Overhead of parameter checking could be ignored in long-time execution methods, but if illegal parameters lead to exception, the loss outweighs the gain. Therefore, parameter checking is still recommended in long-time execution methods.
  3) Methods that needs extremely high stability or availability. 
  4) Open API methods, including RPC/API/HTTP.
  5) Authority related methods.</j.0:Rule>
    <j.0:ExcelId>alibaba_98</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/341">
    <j.0:RuleExplanation>The inconsistency of serialVersionUID may cause an InvalidClassException at runtime.</j.0:RuleExplanation>
    <j.0:Rule>To avoid a deserialization failure, do not change the serialVersionUID when a serialized class needs to be updated, such as adding some new members. If a completely incompatible update is needed, change the value of serialVersionUID in case of a confusion when deserialized.</j.0:Rule>
    <j.0:ExcelId>alibaba_50</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/450">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/450/consCluster0">
        <j.0:Cons>The index order will not take effect if the query condition contains a range, e.g., where a&gt;10 order by b; Index a_b cannot be activated.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/450/prosCluster/0">
        <j.0:ProsExample>where a=? and b=? order by c; Index is: a_b_c &lt;/br&gt;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Make use of the index order when using ORDER BY clauses. The last columns of ORDER BY clauses should be at the end of a composite index. The reason is to avoid the file_sort issue, which affects the query performance.</j.0:Rule>
    <j.0:ExcelId>alibaba_159</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/10">
    <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/513"/>
    <j.0:Yype>comment</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/10/contentCluster/0">
        <j.0:Content>PackagePerLayer is just another way of doing CodeOwnership. 'Or maybe not. In general, you still need to organize your code even if you apply a "no CodeOwnership" policy. In practice, though, the organization of the project closely follows the political organization of the team.'</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>11.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/255">
    <j.0:RuleExplanation>I.e, ‘isReady()’, ‘hasValues()’, ‘canCommit()’, ‘willFail()’, etc. </j.0:RuleExplanation>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:BadExample>public boolean getFoo();            // bad</j.0:BadExample>
    <j.0:FatherName>BooleanGetMethodName</j.0:FatherName>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/255/prosCluster/0">
        <j.0:ProsExample>public boolean isFoo();             // ok</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>BooleanGetMethodName</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>BooleanGetMethodName</j.0:SecondaryTypeList>
    <j.0:ExcelId>pmdCodetyle_7</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:Name>BooleanGetMethodName</j.0:Name>
    <j.0:Rule>Methods that return boolean results should be named as predicate statements to denote this.  
Avoid the use of the ‘get’ prefix for these methods.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/364">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/364/prosCluster/0">
        <j.0:ProsExample>values() returns a list including all values, keySet() returns a set including all values, entrySet() returns a k-v combined object.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>Actually, keySet iterates through the map twice, firstly convert to Iterator object, then get the value from the HashMap by key. EntrySet iterates only once and puts keys and values in the entry which is more efficient. Use Map.foreach method in JDK8.</j.0:RuleExplanation>
    <j.0:Rule>Use entrySet instead of keySet to traverse KV maps.</j.0:Rule>
    <j.0:ExcelId>alibaba_73</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/122">
    <j.0:Rule>A comma (,) stays attached to the token that precedes it.</j.0:Rule>
    <j.0:ExcelId>google_31</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/497">
    <j.0:Rule> In order to avoid the dependency conflict of libraries, the publishers should follow the principles below:
  1) Simple and controllable: Remove all unnecessary API and dependencies, only contain Service API, necessary domain model objects, Utils classes, constants, enumerations, etc. If other libraries must be included, better to make the scope as provided and let users to depend on the specific version number. Do not depend on specific log implementation, only depend on the log framework instead.
  2) Stable and traceable: Change log of each version should be recorded. Make it easy to check the library owner and where the source code is. Libraries packaged in the application should not be changed unless the user updates the version proactively.</j.0:Rule>
    <j.0:ExcelId>alibaba_206</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/388">
    <j.0:Rule>Size of input parameters should be checked, especially for batch operations.</j.0:Rule>
    <j.0:ExcelId>alibaba_97</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/146">
    <j.0:BadExample>String args[]</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/146/prosCluster/0">
        <j.0:ProsExample>String[] args</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>The square brackets form a part of the type, not the variable</j.0:Rule>
    <j.0:ExcelId>google_55</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/11">
    <j.0:Author rdf:resource="http://www.semanticweb.org/CCBase/#Author/2"/>
    <j.0:SsId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/514">
        <j.0:SecondaryTypeList>Fall Back On Reflection</j.0:SecondaryTypeList>
        <j.0:Resource>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Resource/1">
            <j.0:Yype>webarticle</j.0:Yype>
            <j.0:Url>https://www.javaworld.com/article/2077557/learn-java/java-tip-57--applet-parameterization-via-class-reflection.html</j.0:Url>
            <j.0:Introduction>Making applets configurable from HTML docs can be a chore -- unless you know how to do it the easy way</j.0:Introduction>
            <j.0:Name>Java Tip 57: Applet parameterization via class reflection</j.0:Name>
            <j.0:ExcelId>2.0</j.0:ExcelId>
          </rdf:Description>
        </j.0:Resource>
        <j.0:PrimaryTypeList>Fall Back On Reflection</j.0:PrimaryTypeList>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/514/consCluster0">
            <j.0:Cons>Developers must follow the coding conventions in order to make use of the default implementation of the interface.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:Rationale>This is especially useful in frameworks in which components are dynamically instantiated and plugged together, such as JavaBeans, PipesAndFilters or in my case, a Java framework for dynamically building transport protocols from lightweight components.</j.0:Rationale>
        <j.0:CodeConventionType>idom</j.0:CodeConventionType>
        <j.0:FatherName>Fall Back On Reflection</j.0:FatherName>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
        <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/514/prosCluster/1"/>
        <j.0:Decision>You have defined an abstract component interface that allows components' services to be queried and connected to other components. The implementation of the component interface will be different for each concrete component type but you don't want component developers to be overly burdened by the component model; they should concentrate on implementing the functional aspects of their component rather than its "packaging".</j.0:Decision>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/514/prosCluster/0">
            <j.0:Pros>Developers get the appropriate implementation of the interface "for free" by merely following the coding conventions.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:ExcelId>c2_5</j.0:ExcelId>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/514/consCluster1">
            <j.0:Cons>The implementation of the interface that uses reflection is usually less efficient than an implementation coded by hand.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:Rule>1. Define coding conventions for the definition and implementation of component services.
2. Provide an implementation of the component interface that uses reflection to determine the services of derived classes by their use of the coding conventions.</j.0:Rule>
        <j.0:Name>Fall Back On Reflection</j.0:Name>
        <j.0:DemonstrationSoftwareCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/514/demonstrationSoftwareCluster0">
            <j.0:DemonstrationSoftware>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Project/5">
                <j.0:Author>oracle</j.0:Author>
                <j.0:Url>https://docs.oracle.com/javase/8/docs/api/java/beans/package-summary.html</j.0:Url>
                <j.0:Language>java</j.0:Language>
                <j.0:Introduction>Contains classes related to developing beans -- components based on the JavaBeans™ architecture.</j.0:Introduction>
                <j.0:Name>java.beans</j.0:Name>
                <j.0:ExcelId>6.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:DemonstrationSoftware>
            <j.0:DemonstrationSoftwareDescription>JavaBeans uses reflection to determine those properties of a bean that are not described by its associated info class.</j.0:DemonstrationSoftwareDescription>
          </rdf:Description>
        </j.0:DemonstrationSoftwareCluster>
      </rdf:Description>
    </j.0:SsId>
    <j.0:Yype>commet</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/11/contentCluster/0">
        <j.0:Content>JavaBeans components are classes that come with associated "packaging"; the packaging provides development tools with the information they need to support graphical composition of the beans. JavaBeans packaging is defined as a set of interfaces that expose the properties, events and methods of the bean. Implementing these interfaces by hand is a tedious task that involves writing boilerplate code many times, only changing a few names each time.

Therefore, rather than forcing programmers to implement the packaging interfaces themselves, the Bean implementors FallBackOnReflection: they provided an implementation of the packaging interfaces that uses reflection to determine the properties and events of a bean based on simple coding conventions. Thus programmers can concentrate on the functional aspects of their beans rather than wasting time writing the packaging.

One might ask, why not ditch the interfaces and rely only on reflection? In Java, invoking a method by reflection is about 100 times slower than using a polymorphic call, so you want to allow programmers to replace reflection if performance becomes a problem. Therefore you provide abstract interfaces that can be implemented by hand for speed and a default implementation that uses reflection.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>12.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/231">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/231/prosCluster/0">
        <j.0:ProsExample>for (expr1; expr2; expr3)</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>The expressions in a for statement should be separated by blank spaces.</j.0:Rule>
    <j.0:ExcelId>codeConvention_58</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/340">
    <j.0:Rule>While defining POJO classes like DO, DTO, VO, etc., do not assign any default values to the members.</j.0:Rule>
    <j.0:ExcelId>alibaba_49</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/473">
    <j.0:Rule>gmt_modified column should be updated with current timestamp simultaneously with DB record update.</j.0:Rule>
    <j.0:ExcelId>alibaba_182</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/323">
    <j.0:Rule>No space is used between the ‘(‘ character and its following character. Same for the ‘)’ character and its preceding character. Refer to the Positive Example at the 5th rule.</j.0:Rule>
    <j.0:ExcelId>alibaba_32</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/432">
    <j.0:BadExample>GetterAdmin, taskConfig, level_3_name</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/432/prosCluster/0">
        <j.0:ProsExample>getter_admin, task_config, level3_name</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Names of tables and columns must consist of lower case letters, digits or underscores. Names starting with digits and names which contain only digits (no other characters) in between two underscores are not allowed. Columns should be named cautiously, as it is costly to change column names and cannot be released in pre-release environment.</j.0:Rule>
    <j.0:ExcelId>alibaba_141</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/347">
    <j.0:Rule>As the most concerned ones for consumers and providers, public methods should be put on the first screen. Protected methods are only cared for by the subclasses, but they have chances to be vital when it comes to Template Design Pattern. Private methods, the black-box approaches, basically are not significant to clients. Getter/setter methods of a Service or a DAO should be put at the end of the class implementation because of the low significance.</j.0:Rule>
    <j.0:ExcelId>alibaba_56</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/456">
    <j.0:Rule>Do not use COUNT(column_name) or COUNT(constant_value) in place of COUNT(*). COUNT(*) is SQL92 defined standard syntax to count the number of rows. It is not database specific and has nothing to do with NULL and non-NULL.</j.0:Rule>
    <j.0:SecondaryTypeList>SQL Rules</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>MySQL Rules</j.0:PrimaryTypeList>
    <j.0:FatherName>MySQL Rules</j.0:FatherName>
    <j.0:Name>SQL Rules</j.0:Name>
    <j.0:ExcelId>alibaba_165</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/105">
    <j.0:Rule>Within each block the imported names appear in ASCII sort order.</j.0:Rule>
    <j.0:ExcelId>google_14</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/214">
    <j.0:BadExample>if (err) {
    Format.print(System.out, "error"), exit(1); //VERY WRONG!
}</j.0:BadExample>
    <j.0:Rule>Do not use the comma operator to group multiple statements unless it is for an obvious reason.</j.0:Rule>
    <j.0:ExcelId>codeConvention_41</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/129">
    <j.0:Rule>Multiple consecutive blank lines are permitted, but never required (or encouraged).</j.0:Rule>
    <j.0:ExcelId>google_38</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/238">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/238/prosCluster/0">
        <j.0:Pros>int MIN_WIDTH = 4;
int MAX_WIDTH = 999;
int GET_THE_CPU = 1;</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>The names of variables declared class constants and of ANSI constants should be all uppercase with words separated by underscores ("_"). (ANSI constants should be avoided, for ease of debugging.)</j.0:Rule>
    <j.0:ExcelId>codeConvention_65</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/12">
    <j.0:Author>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/8">
        <j.0:Yype>people</j.0:Yype>
        <j.0:Url>http://wiki.c2.com/?KentBeck</j.0:Url>
        <j.0:Introduction>Kent's responsible for or a major contributor to HillsideGroup, SmalltalkBestPracticePatterns, SoftwarePatterns, HotDraw, FirstClassSoftware, the TimeTravel patterns, the xUnit family of TestingFrameworks and ExtremeProgramming. His most recent book is ImplementationPatterns</j.0:Introduction>
        <j.0:Name>Kent Beck</j.0:Name>
        <j.0:ExcelId>9.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:Author>
    <j.0:SsId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/516">
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
        <j.0:ExcelId>c2_7</j.0:ExcelId>
        <j.0:FatherName>Return New Objects From Accessor Methods</j.0:FatherName>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/516/consCluster0">
            <j.0:Cons>But there is another problem that deserves more immediate attention: this idiom assumes that you will be returning MutableValueObjects.In Java ValueObjectsShouldBeImmutable so you should consider the possibility that your design needs further evolution before it is complete.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/516/prosCluster/0">
            <j.0:ProsExample>  public Point getPoint() {
 return new Point( _x, _y );
 }
</j.0:ProsExample>
            <j.0:Pros>Once you've done this, the immediate problem is solved: there is no aliasing between the objects used to implement the state of the queried object and the objects returned from its accessors. </j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:PrimaryTypeList>Return New Objects From Accessor Methods</j.0:PrimaryTypeList>
        <j.0:Rule>Return New Objects From Accessor Methods. Whenever the state of the object is queried create a new object to satisfy the query. Often it is best to store the elements of the objects state in the form of primitive member variables and construct more complicated objects as the return values for the accessors.</j.0:Rule>
        <j.0:SecondaryTypeList>Return New Objects From Accessor Methods</j.0:SecondaryTypeList>
        <j.0:Name>Return New Objects From Accessor Methods</j.0:Name>
      </rdf:Description>
    </j.0:SsId>
    <j.0:Yype>comment</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/12/contentCluster/0">
        <j.0:Content>This idiom is a symptom of a development organization that is uncomfortable moving responsibility around. Speaking technically, if an object holds another object, but it performs all the operations anyone in the system ever want done with the child object, then there is never any reason for the accessor in the first place. Speaking organizationally, I most often see idioms like this in conjunction with "code ownership" and developers working alone. I remember saying to one client, "If this object we are working with only supported XXX, we could delete half of our methods." "Yes, but that's Joe's object (Joe sat right across the aisle, for goodness sake)."

Some might say this idiom is a sign of bad design. If objects were designed to do what they needed to do in the first place, then the problem wouldn't arise. I can only make good decisions about tactical division of responsibility from the code. I'm not smart enough to see them before I have any experience. That's why I said that shifting responsibility is the problem.

"Shifting responsibility" means both that the code has to be able to move to where it belongs in the system, and that the developers have to be able to quickly accept responsibility for small bits of new work. PairProgramming is one excellent way to achieve fine grained and low cost shifts of people and hence program responsibility.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>13.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/431">
    <j.0:Rule>Columns expressing the concept of True or False, must be named as is_xxx, whose data type should be unsigned tinyint (1 is True, 0 is False).</j.0:Rule>
    <j.0:SecondaryTypeList>Table Schema Rules</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>MySQL Rules</j.0:PrimaryTypeList>
    <j.0:FatherName>MySQL Rules</j.0:FatherName>
    <j.0:Name>Table Schema Rules</j.0:Name>
    <j.0:ExcelId>alibaba_140</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/213">
    <j.0:BadExample>argv++; argc--;       // AVOID!</j.0:BadExample>
    <j.0:Rule>Each line should contain at most one statement.</j.0:Rule>
    <j.0:SecondaryTypeList>Simple Statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Simple Statements</j.0:Name>
    <j.0:ExcelId>codeConvention_40</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/322">
    <j.0:Rule>Rules for braces. If there is no content, simply use {} in the same line. Otherwise: 
  1) No line break before the opening brace. 
  2) Line break after the opening brace. 
  3) Line break before the closing brace. 
  4) Line break after the closing brace, only if the brace terminates a statement or terminates a method body, constructor or named class. There is no line break after the closing brace if it is followed by else or a comma.</j.0:Rule>
    <j.0:ExcelId>alibaba_31</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/455">
    <j.0:Rule>Avoid listed below misunderstandings when adding index:
  1) It is false that each query needs one index. 
  2) It is false that index consumes story space and degrades update, insert operations significantly.
  3) It is false that unique index should all be achieved from application layer by “check and insert”.</j.0:Rule>
    <j.0:ExcelId>alibaba_164</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/237">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/237/prosCluster/0">
        <j.0:Pros>int i;
char *cp;
float myWidth;</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> 
Except for variables, all instance, class, and class constans are in mixed case with a lowercase first letter. Internal words start with capital letters.

Variable names should be short yet meaningful. The choice of a variable name should be mnemonic-- that is, designed to indicate to the casual observer the intent of its use. One-character variable names should be avoided except for temporary "throwaway" variables. Common names for temporary variables are i, j, k, m, and n for integers; c, d, and e for characters.</j.0:Rule>
    <j.0:ExcelId>codeConvention_64</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/346">
    <j.0:Rule>The order of methods declared within a class is:
public or protected methods -&gt; private methods -&gt; getter/setter methods.</j.0:Rule>
    <j.0:ExcelId>alibaba_55</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/479">
    <j.0:Rule> In this layer templates of each terminal render and execute. Rendering approaches include velocity rendering, JS rendering, JSP rendering, and mobile display, etc.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification$$Application Layers</j.0:FatherName>
    <j.0:Name>View</j.0:Name>
    <j.0:ExcelId>alibaba_188</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/128">
    <j.0:Rule>A single blank line may also appear anywhere it improves readability, for example between statements to organize the code into logical subsections. A blank line before the first member or initializer, or after the last member or initializer of the class, is neither encouraged nor discouraged.</j.0:Rule>
    <j.0:ExcelId>google_37</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/13">
    <j.0:Author>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/9">
        <j.0:Yype>people</j.0:Yype>
        <j.0:Url>http://wiki.c2.com/?AlistairCockburn</j.0:Url>
        <j.0:Name>Alistair Cockburn</j.0:Name>
        <j.0:ExcelId>10.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:Author>
    <j.0:SsId rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/516"/>
    <j.0:Yype>comment</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/13/contentCluster/0">
        <j.0:Content>This is much more than a Java idiom. This discussion runs rampant in Smalltalk groups. Around 1994, it seemed that only Ward was willing to say Accessors Are Possibly Not Wonderful; the rest of my contacts all swore by them. By mid-1995 that changed, and the infrastructure team on my project went through the whole "ReturnNewObjectsFromAccessorMethods, and also MakeCompleteProtectiveInterfaces? while you're at it," roughly as you described on the immutables page. Suddenly, accessor fans were in the minority, and a friend of mine nearly ate me alive at a meeting for even suggesting Accessors Are Possibly Useful - my environment had reversed position. Accessors are only part of the story - the real story is accessibility and mutability. This issue happens in all of the languages, and what I am trying to sort out just now is, under what circumstances do I care about handing out a mutable object? I personally, rarely care. So I am looking for an example of when I should really care.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>13.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/321">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/321/prosCluster/0">
        <j.0:ProsExample>public Enum{ MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7);}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Use an enumeration class if values lie in a fixed range or if the variable has attributes.</j.0:Rule>
    <j.0:ExcelId>alibaba_30</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/430">
    <j.0:Rule>Level Warn should be used to record invalid parameters, which is used to track data when problem occurs. Level Error only records the system logic error, abnormal and other important error messages.</j.0:Rule>
    <j.0:ExcelId>alibaba_139</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/454">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/454/prosCluster/0">
        <j.0:Pros>For the sub-clause where a=? and b=?, if data of column a is nearly unique, adding index idx_a is enough.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> Put the most discriminative column to the left most when adding a composite index.</j.0:Rule>
    <j.0:ExcelId>alibaba_163</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/103">
    <j.0:Rule>All static imports in a single block.All non-static imports in a single block.</j.0:Rule>
    <j.0:SecondaryTypeList>Import statements</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
    <j.0:FatherName>Source file structure$$Import statements</j.0:FatherName>
    <j.0:Name>Ordering and spacing</j.0:Name>
    <j.0:ExcelId>google_12</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/345">
    <j.0:Rule>Multiple constructor methods or homonymous methods in a class should be put together for better readability.</j.0:Rule>
    <j.0:ExcelId>alibaba_54</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/212">
    <j.0:Rule>No space between a method name and the parenthesis "(" starting its parameter list</j.0:Rule>
    <j.0:SecondaryTypeList>Class and Interface Declarations</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Declarations</j.0:PrimaryTypeList>
    <j.0:FatherName>Declarations</j.0:FatherName>
    <j.0:Name>Class and Interface Declarations</j.0:Name>
    <j.0:ExcelId>codeConvention_39</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/80">
    <j.0:BadExample>for(i=0;i&lt;10;i++){</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/80/prosCluster/0">
        <j.0:Pros>Makes the individual components of the statements stand out. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Semicolons in for statments should be followed by a space character.</j.0:Rule>
    <j.0:ExcelId>geosoft_81</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Name>White Space</j.0:Name>
    <j.0:SecondaryTypeList>White Space</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/478">
    <j.0:Rule>In this layer service is encapsulate to be exposed as RPC interface, or HTTP interface through Web Layer; The layer also implements gateway security control, flow control, etc.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification$$Application Layers</j.0:FatherName>
    <j.0:Name>Open Interface</j.0:Name>
    <j.0:ExcelId>alibaba_187</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/236">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/236/prosCluster/0">
        <j.0:Pros>run();
runFast();
getBackground();</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> 
Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.</j.0:Rule>
    <j.0:ExcelId>codeConvention_63</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/369">
    <j.0:RuleExplanation>Using thread pool can reduce the time of creating and destroying thread and save system resource. If we do not use thread pools, lots of similar threads will be created which lead to “running out of memory” or over-switching problems.</j.0:RuleExplanation>
    <j.0:Rule>Threads should be provided by thread pools. Explicitly creating threads is not allowed.</j.0:Rule>
    <j.0:ExcelId>alibaba_78</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/14">
    <j.0:Author>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/10">
        <j.0:Yype>people</j.0:Yype>
        <j.0:Url>http://wiki.c2.com/?KevlinHenney</j.0:Url>
        <j.0:Introduction>I am an independent consultant and trainer in the UK. I am interested in a wide range of topics including programming languages and practices, patterns in various domains and at various levels, software architecture and agile development.</j.0:Introduction>
        <j.0:Name>Kevlin Henney</j.0:Name>
        <j.0:ExcelId>11.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:Author>
    <j.0:SsId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/517">
        <j.0:Rule>1. Make an object's state immutable, i.e. freeze it at construction and ensure that all instance methods are queries.
2. Provide an intuitive and complete set of constructors whose construction is lightweight.</j.0:Rule>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/517/prosCluster/1">
            <j.0:Pros>Sharing without aliasing side effects and therefore no need for copying.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:DemonstrationSoftwareCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/517/demonstrationSoftwareCluster0">
            <j.0:DemonstrationSoftware>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Project/6">
                <j.0:Url>https://docs.oracle.com/javase/8/docs/api/java/lang/String.html</j.0:Url>
                <j.0:Language>java</j.0:Language>
                <j.0:Introduction>The String class represents character strings. All string literals in Java programs, such as "abc", are implemented as instances of this class.</j.0:Introduction>
                <j.0:Name>java.lang.string</j.0:Name>
                <j.0:ExcelId>7.0</j.0:ExcelId>
              </rdf:Description>
            </j.0:DemonstrationSoftware>
            <j.0:DemonstrationSoftwareDescription>The standard java.lang.String class is a value based class in the core of the language. It supports only construction and query methods and its instances may be shared without aliasing or threading problems. New strings are created directly with the public assistance of constructors, indirectly as the results of query methods, or via the use of the java.lang.StringBuffer class.</j.0:DemonstrationSoftwareDescription>
          </rdf:Description>
        </j.0:DemonstrationSoftwareCluster>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/517/prosCluster/0">
            <j.0:Pros>No need for synchronisation and no RaceCondition problems.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/517/consCluster0">
            <j.0:Cons>The class must be final or any given subclass must also be an ImmutableValue.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:FatherName>Immutable Value</j.0:FatherName>
        <j.0:Rationale>By definition the state of an immutable object cannot be changed, and hence will not suffer from undesirable or unpredictable change.</j.0:Rationale>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/517/prosCluster/2">
            <j.0:Pros>Change of value is effected by replacement by another object with a different value.</j.0:Pros>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:ConsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/517/consCluster1">
            <j.0:Cons>Much more dynamic memory allocation where values are changed often. If this incurs an undesirable overhead, the FlyweightPattern can be applied as an optimisation.</j.0:Cons>
          </rdf:Description>
        </j.0:ConsCluster>
        <j.0:PrimaryTypeList>Immutable Value</j.0:PrimaryTypeList>
        <j.0:ExcelId>c2_8</j.0:ExcelId>
        <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/517/consCluster2"/>
        <j.0:SecondaryTypeList>Immutable Value</j.0:SecondaryTypeList>
        <j.0:Name>Immutable Value</j.0:Name>
      </rdf:Description>
    </j.0:SsId>
    <j.0:Yype>comment</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/14/contentCluster/0">
        <j.0:Content>This pattern was first documented and presented in something like this form at the BCS OOPS Pattern Day, http://www.bcs-oops.org.uk/resources/BCSOOPSNL/Issue34Summer1998/Articles/Henney.html. It was then presented informally at PLoP 98, where it was workshopped and the form on this page is pretty much the result. </j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>14.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/320">
    <j.0:BadExample>Obvious variable names should also be defined as common shared constants in an application. The following definitions caused an exception in the production environment: it returns false, but is expected to return true for A.YES.equals(B.YES).
  Definition in Class A: public static final String YES = "yes"; 
  Definition in Class B: public static final String YES = "y"; 
  3) Shared in a sub-project: placed under constant directory in the current project;
  4) Shared in a package: placed under constant directory in current package;
  5) Shared in a class: defined as ‘private static final’ inside class.</j.0:BadExample>
    <j.0:Rule>Constants can be shared in the following 5 different layers: shared in multiple applications; shared inside an application; shared in a sub-project; shared in a package; shared in a class.
  1) Shared in multiple applications: keep in a library, under constant directory in client.jar;
  2) Shared in an application: keep in shared modules within the application, under constant directory;</j.0:Rule>
    <j.0:ExcelId>alibaba_29</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/453">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/453/consCluster0">
        <j.0:Cons>Pay attention to the type of INDEX in EXPLAIN result because it is very slow to do a full scan to the database index file, whose performance nearly equals to an all-table scan.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Rule> The target of SQL performance optimization is that the result type of EXPLAIN reaches REF level, or RANGE at least, or CONSTS if possible.</j.0:Rule>
    <j.0:ExcelId>alibaba_162</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/344">
    <j.0:RuleExplanation>String str = "a,b,c,,";
String[] ary = str.split(",");
// The expected result exceeds 3. However it turns out to be 3.
System.out.println(ary.length);  </j.0:RuleExplanation>
    <j.0:Rule>When accessing an array generated by the split method in String using an index, make sure to check the last separator whether it is null to avoid IndexOutOfBoundException.</j.0:Rule>
    <j.0:ExcelId>alibaba_53</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/477">
    <j.0:Rule>The upper layer depends on the lower layer by default. Arrow means direct dependent. For example: Open Interface can depend on Web Layer, it can also directly depend on Service Layer, etc.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification</j.0:FatherName>
    <j.0:Name>Application Layers</j.0:Name>
    <j.0:ExcelId>alibaba_186</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/368">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/368/prosCluster/0">
        <j.0:ProsExample>public class TimerTaskThread extends Thread {
  public TimerTaskThread() {
   super.setName("TimerTaskThread"); 
      … 
  }
 }</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A meaningful thread name is helpful to trace the error information, so assign a name when creating threads or thread pools.</j.0:Rule>
    <j.0:ExcelId>alibaba_77</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/126">
    <j.0:Exception>A blank line between two consecutive fields (having no other code between them) is optional. Such blank lines are used as needed to create logical groupings of fields.</j.0:Exception>
    <j.0:Rule>A single blank line appears between consecutive members or initializers of a class: fields, constructors, methods, nested classes, static initializers, and instance initializers.</j.0:Rule>
    <j.0:SecondaryTypeList>Whitespace</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting$$Whitespace</j.0:FatherName>
    <j.0:Name>Vertical Whitespace</j.0:Name>
    <j.0:ExcelId>google_35</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/15">
    <j.0:Author>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/11">
        <j.0:MemberOf>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#Author/12">
            <j.0:Yype>company</j.0:Yype>
            <j.0:Url>http://wiki.c2.com/?ThoughtWorks</j.0:Url>
            <j.0:Introduction>ThoughtWorks is a custom development and application integration firm specializing in J2EE and .NET technologies. ThoughtWorks' clients are primarily Global 1000 companies in the Financial Services, Retail and Energy verticals. They focus on solving high risk/high complexity problems for early adopters of new technologies.</j.0:Introduction>
            <j.0:Name>ThoughtWorks</j.0:Name>
            <j.0:ExcelId>13.0</j.0:ExcelId>
          </rdf:Description>
        </j.0:MemberOf>
        <j.0:Yype>people</j.0:Yype>
        <j.0:Url>http://wiki.c2.com/?MartinFowler</j.0:Url>
        <j.0:Introduction>I was an independent consultant, but am now employed by ThoughtWorks with the imposing title of Chief Scientist. I'm not sure if I'm supposed to carry out any experiments yet.</j.0:Introduction>
        <j.0:Name>Martin Fowler</j.0:Name>
        <j.0:ExcelId>12.0</j.0:ExcelId>
      </rdf:Description>
    </j.0:Author>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/15/contentCluster/0">
        <j.0:Example>  task1.setStartDate(new Date("1 Jan 98");
  task2.setStartDate(task1.getTaskDate());
  //then somewhere in the task class
  void delay(int delayDays) {
 _startDate.setDate(_startDate.getDate() + delayDays);
  }

  // then somewhere 
  task2.delay(5);

</j.0:Example>
        <j.0:Content>You can easily get a nasty bug if you make a change to a ValueObject.</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:SsId>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/518">
        <j.0:ExcelId>c2_9</j.0:ExcelId>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html"/>
        <j.0:FatherName>Value Objects Should Be Immutable</j.0:FatherName>
        <j.0:ConsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/518/consCluster0"/>
        <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/518/prosCluster/0"/>
        <j.0:Name>Value Objects Should Be Immutable</j.0:Name>
        <j.0:Rule>If you are using a ValueObject that is mutable, treat it like it is immutable.</j.0:Rule>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:SecondaryTypeList>Value Objects Should Be Immutable</j.0:SecondaryTypeList>
        <j.0:PrimaryTypeList>Value Objects Should Be Immutable</j.0:PrimaryTypeList>
      </rdf:Description>
    </j.0:SsId>
    <j.0:Yype>comment</j.0:Yype>
    <j.0:ContentCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#QAPair/15/contentCluster/1">
        <j.0:Example>  void delay(int delayDays) {
 _startDate := (new Date(_startDate.getYear(),
 _startDate.getMonth(),
 _startDate.getDate + delayDays);
  }</j.0:Example>
        <j.0:Content>and now you find task1's start date has changed.
This is doubly nasty because it is really hard to find the cause of the trouble.

So if you design an object that should be a value object, don't provide any methods that change its state, ie make it immutable.

Users will have to write</j.0:Content>
      </rdf:Description>
    </j.0:ContentCluster>
    <j.0:Document>c2</j.0:Document>
    <j.0:ExcelId>15.0</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/177">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/177/prosCluster/0">
        <j.0:ProsExample>For an example of a Java program properly formatted, see "Java Source File Example".(http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventions.doc10.html#182)</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Files longer than 2000 lines are cumbersome and should be avoided.</j.0:Rule>
    <j.0:ExcelId>codeConvention_4</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/480">
    <j.0:Rule>This layer is mainly used to implement forward access control, basic parameter verification, or non-reusable services.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification$$Application Layers</j.0:FatherName>
    <j.0:Name>Web Layer</j.0:Name>
    <j.0:ExcelId>alibaba_189</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/262">
    <j.0:BadExample>import java.lang.String;
import java.lang.*;
public class Foo {}</j.0:BadExample>
    <j.0:Rule>Duplicate or overlapping import statements should be avoided.</j.0:Rule>
    <j.0:SecondaryTypeList>DuplicateImports</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>DuplicateImports</j.0:PrimaryTypeList>
    <j.0:FatherName>DuplicateImports</j.0:FatherName>
    <j.0:Name>DuplicateImports</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_14</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/371">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/371/prosCluster/0">
        <j.0:ProsExample>Pay attention to thread-safety when using DateUtils. It is recommended to use as below:

private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() {  
    @Override  
    protected DateFormat initialValue() {  
        return new SimpleDateFormat("yyyy-MM-dd");  
    }  
};  </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RuleExplanation>In JDK8, Instant can be used to replace Date, Calendar is replaced by LocalDateTime, Simpledateformatter is replaced by DateTimeFormatter.</j.0:RuleExplanation>
    <j.0:Rule>SimpleDateFormat is unsafe, do not define it as a static variable. If have to, lock or DateUtils class must be used.</j.0:Rule>
    <j.0:ExcelId>alibaba_80</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/286">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>pmdCodetyle_38</j.0:ExcelId>
    <j.0:FatherName>UnnecessaryFullyQualifiedName</j.0:FatherName>
    <j.0:RuleExplanation>Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. </j.0:RuleExplanation>
    <j.0:BadExample>import java.util.List;
public class Foo {
    private java.util.List list1;   // Unnecessary FQN
}</j.0:BadExample>
    <j.0:Rule>Consider using the non-fully qualified name.</j.0:Rule>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/286/prosCluster/0">
        <j.0:ProsExample>import java.util.List;
public class Foo {
    private List list2;             // More appropriate given import of 'java.util.List'
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>UnnecessaryFullyQualifiedName</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>UnnecessaryFullyQualifiedName</j.0:SecondaryTypeList>
    <j.0:Name>UnnecessaryFullyQualifiedName</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/395">
    <j.0:Rule>All enumeration type fields should be commented as Javadoc style.</j.0:Rule>
    <j.0:ExcelId>alibaba_104</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/153">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/153/prosCluster/0">
        <j.0:ProsExample>public protected private abstract default static final transient volatile synchronized native strictfp</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Class and member modifiers, when present, appear in the order recommended by the Java Language Specification</j.0:Rule>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:Name>Modifier</j.0:Name>
    <j.0:ExcelId>google_62</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/26">
    <j.0:BadExample>isNoError</j.0:BadExample>
    <j.0:Rule>Negated boolean variable names must be avoided.The problem arises when such a name is used in conjunction with the logical negation operator as this results in a double negative. It is not immediately apparent what !isNotFound means.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_27</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/370">
    <j.0:RuleExplanation>Below are the problems created by usage of Executors for thread pool creation: 
  1) FixedThreadPool and SingleThreadPool:
  Maximum request queue size Integer.MAX_VALUE. A large number of requests might cause OOM. 
  2) CachedThreadPool and ScheduledThreadPool:
  The number of threads which are allowed to be created is Integer.MAX_VALUE. Creating too many threads might lead to OOM.</j.0:RuleExplanation>
    <j.0:Rule>A thread pool should be created by ThreadPoolExecutor rather than Executors. These would make the parameters of the thread pool understandable. It would also reduce the risk of running out of system resource.</j.0:Rule>
    <j.0:ExcelId>alibaba_79</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/152">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/152/prosCluster/0">
        <j.0:ProsExample>/*
 * This is          // And so           /* Or you can
 * okay.            // is this.          * even do this. */
 */</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Block comments are indented at the same level as the surrounding code. They may be in /* ... */ style or // ... style. For multi-line /* ... */ comments, subsequent lines must start with * aligned with the * on the previous line</j.0:Rule>
    <j.0:ExcelId>google_61</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/261">
    <j.0:RuleExplanation>These classes are automatically imported (JLS 7.5.3).</j.0:RuleExplanation>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:SecondaryTypeList>DontImportJavaLang</j.0:SecondaryTypeList>
    <j.0:Name>DontImportJavaLang</j.0:Name>
    <j.0:FatherName>DontImportJavaLang</j.0:FatherName>
    <j.0:ExcelId>pmdCodetyle_13</j.0:ExcelId>
    <j.0:Rule>Avoid importing anything from the package ‘java.lang’.</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:BadExample>import java.lang.String;    // this is unnecessary
public class Foo {}
// --- in another source code file…
import java.lang.*;         // this is bad
public class Foo {}</j.0:BadExample>
    <j.0:PrimaryTypeList>DontImportJavaLang</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/394">
    <j.0:Rule>Single line comments in a method should be put above the code to be commented, by using // and multiple lines by using /* */. Alignment for comments should be noticed carefully.</j.0:Rule>
    <j.0:ExcelId>alibaba_103</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/176">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/176/prosCluster/0">
        <j.0:ProsExample>For an example of a Java program properly formatted, see "Java Source File Example".(http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventions.doc10.html#182)</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>A file consists of sections that should be separated by blank lines and an optional comment identifying each section.</j.0:Rule>
    <j.0:SecondaryTypeList>File Organization</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>File Organization</j.0:PrimaryTypeList>
    <j.0:FatherName>File Organization</j.0:FatherName>
    <j.0:Name>File Organization</j.0:Name>
    <j.0:ExcelId>codeConvention_3</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/285">
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:FatherName>UnnecessaryAnnotationValueElement</j.0:FatherName>
    <j.0:BadExample>@TestClassAnnotation(value = "TEST")
public class Foo {

    @TestMemberAnnotation(value = "TEST")
    private String y;

    @TestMethodAnnotation(value = "TEST")
    public void bar() {
        int x = 42;
        return;
    }
}</j.0:BadExample>
    <j.0:SecondaryTypeList>UnnecessaryAnnotationValueElement</j.0:SecondaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:PrimaryTypeList>UnnecessaryAnnotationValueElement</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/285/prosCluster/0">
        <j.0:ProsExample>@TestClassAnnotation("TEST")
public class Foo {

    @TestMemberAnnotation("TEST")
    private String y;

    @TestMethodAnnotation("TEST")
    public void bar() {
        int x = 42;
        return;
    }
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Avoid the use of value in annotations when it’s the only element.</j.0:Rule>
    <j.0:Name>UnnecessaryAnnotationValueElement</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_37</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/25">
    <j.0:BadExample>Line* pLine;</j.0:BadExample>
    <j.0:Rule>Naming pointers specifically should be avoided.Many variables in a C/C++ environment are pointers, so a convention like this is almost impossible to follow. Also objects in C++ are often oblique types where the specific implementation should be ignored by the programmer. Only when the actual type of an object is of special significance, the name should emphasize the type.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_26</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/49">
    <j.0:Name>Loops</j.0:Name>
    <j.0:ExcelId>geosoft_50</j.0:ExcelId>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:CodeConventionType>control structure</j.0:CodeConventionType>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:BadExample>for (i = 0, sum = 0; i &lt; 100; i++)
   sum += value[i];</j.0:BadExample>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/49/prosCluster/0">
        <j.0:Pros>Increase maintainability and readability. Make a clear distinction of what controls and what is contained in the loop.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Only loop control statements must be included in the for() construction.</j.0:Rule>
    <j.0:SecondaryTypeList>Loops</j.0:SecondaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/260">
    <j.0:Rule>Use explicit scoping instead of accidental usage of default package private level.</j.0:Rule>
    <j.0:SecondaryTypeList>DefaultPackage</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>DefaultPackage</j.0:PrimaryTypeList>
    <j.0:FatherName>DefaultPackage</j.0:FatherName>
    <j.0:Name>DefaultPackage</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_12</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/393">
    <j.0:Rule>Every class should include information of author(s) and date.</j.0:Rule>
    <j.0:ExcelId>alibaba_102</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/151">
    <j.0:Rule>Any line break may be preceded by arbitrary whitespace followed by an implementation comment. Such a comment renders the line non-blank.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:Name>Comments</j.0:Name>
    <j.0:ExcelId>google_60</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/175">
    <j.0:Rule>"GNUmakefile" is the preferred name for makefiles. "README"</j.0:Rule>
    <j.0:SecondaryTypeList>Common File Names</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>File Names</j.0:PrimaryTypeList>
    <j.0:FatherName>File Names</j.0:FatherName>
    <j.0:Name>Common File Names</j.0:Name>
    <j.0:ExcelId>codeConvention_2</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/28">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/28/prosCluster/0">
        <j.0:Pros>Exception classes are really not part of the main design of the program, and naming them like this makes them stand out relative to the other classes.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Exception classes should be suffixed with Exception.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_29</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/150">
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:Rule>Annotations applying to a class, method or constructor appear immediately after the documentation block, and each annotation is listed on a line of its own (that is, one annotation per line). These line breaks do not constitute line-wrapping, so the indentation level is not increased. </j.0:Rule>
    <j.0:Exception>A single parameterless annotation may instead appear together with the first line of the signature</j.0:Exception>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>google_59</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/150/prosCluster/1">
        <j.0:ProsExample>@Partial @Mock DataLoader loader;</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/150/prosCluster/0">
        <j.0:ProsExample>@Override
@Nullable
public String getNameIfPresent() { ... }</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>Annotation</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/392">
    <j.0:Rule>Abstract methods (including methods in interface) should be commented by Javadoc. Javadoc should include method instruction, description of parameters, return values and possible exceptions.</j.0:Rule>
    <j.0:ExcelId>alibaba_101</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/174">
    <j.0:Rule>Java source files should use ".java" as a suffix.Java bytecode files should use ".class" as a suffix.</j.0:Rule>
    <j.0:SecondaryTypeList>File Suffixes</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>File Names</j.0:PrimaryTypeList>
    <j.0:FatherName>File Names</j.0:FatherName>
    <j.0:Name>File Suffixes</j.0:Name>
    <j.0:ExcelId>codeConvention_1</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/198">
    <j.0:Rule>A block comment should be preceded by a blank line to set it apart from the rest of the code. Block comments have an asterisk "*" at the beginning of each line except the first.</j.0:Rule>
    <j.0:ExcelId>codeConvention_25</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/27">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/27/prosCluster/0">
        <j.0:Pros>This gives additional information of where the declaration can be found, which constants belongs together, and what concept the constants represent.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Enumeration constants can be prefixed by a common type name.An alternative approach is to always refer to the constants through their common type: Color::RED, Airline::AIR_FRANCE etc.
Note also that the enum name typically should be singular as in enum Color {...}. A plural name like enum Colors {...} may look fine when declaring the type, but it will look silly in use.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_28</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/266">
    <j.0:BadExample>public class Foo {
    void bar() {
        for (;true;) true; // No Init or Update part, may as well be: while (true)
    }
}</j.0:BadExample>
    <j.0:Rule>Some for loops can be simplified to while loops, this makes them more concise.</j.0:Rule>
    <j.0:SecondaryTypeList>ForLoopShouldBeWhileLoop</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>ForLoopShouldBeWhileLoop</j.0:PrimaryTypeList>
    <j.0:FatherName>ForLoopShouldBeWhileLoop</j.0:FatherName>
    <j.0:Name>ForLoopShouldBeWhileLoop</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_18</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/375">
    <j.0:RuleExplanation>If access confliction probability is less than 20%, recommend to use optimistic lock, otherwise use pessimistic lock. Retry number of optimistic lock should be no less than 3.</j.0:RuleExplanation>
    <j.0:Rule>A lock needs to be used to avoid update failure when modifying one record concurrently. Add lock either in application layer, in cache, or add optimistic lock in the database by using version as update stamp.</j.0:Rule>
    <j.0:ExcelId>alibaba_84</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/399">
    <j.0:Rule>Requirements for comments: 
  1) Be able to represent design ideas and code logic accurately. 
  2) Be able to represent business logic and help other programmers understand quickly. A large section of code without any comment is a disaster for readers. Comments are written for both oneself and other people. Design ideas can be quickly recalled even after a long time. Work can be quickly taken over by other people when needed.</j.0:Rule>
    <j.0:ExcelId>alibaba_108</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/157">
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:ExcelId>google_66</j.0:ExcelId>
    <j.0:BadExample>com.example.deepSpace, com.example.deep_space</j.0:BadExample>
    <j.0:Name>Package names</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:Rule>Package names are all lowercase, with consecutive words simply concatenated together (no underscores). </j.0:Rule>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/157/prosCluster/0">
        <j.0:ProsExample>com.example.deepspace</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:SecondaryTypeList>Package names</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/460">
    <j.0:Rule>When coding on DB query with paging logic, it should return immediately once count is 0, to avoid executing paging query statement followed.</j.0:Rule>
    <j.0:ExcelId>alibaba_169</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/242">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/242/consCluster0">
        <j.0:ConsExample>fooBar.fChar = barFoo.lchar = 'c'; // AVOID!</j.0:ConsExample>
        <j.0:Cons>It is hard to read. </j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Rule>Avoid assigning several variables to the same value in a single statement. </j.0:Rule>
    <j.0:SecondaryTypeList>Variable Assignments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:Name>Variable Assignments</j.0:Name>
    <j.0:ExcelId>codeConvention_69</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/351">
    <j.0:RuleExplanation>The default implementation of clone in Object is a shallow (not deep) copy, which copies fields as pointers to the same objects in memory.</j.0:RuleExplanation>
    <j.0:Rule>Be cautious to copy an object using the clone method in Object.</j.0:Rule>
    <j.0:ExcelId>alibaba_60</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/484">
    <j.0:Rule> This layer includes RPC open interface from other departments or companies.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification$$Application Layers</j.0:FatherName>
    <j.0:Name>External interface or third-party platform</j.0:Name>
    <j.0:ExcelId>alibaba_193</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/156">
    <j.0:BadExample>name_, mName, s_name,kName</j.0:BadExample>
    <j.0:Rule>special prefixes or suffixes are not used</j.0:Rule>
    <j.0:ExcelId>google_65</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/265">
    <j.0:BadExample>public class HelloWorldBean {
  public String getMessage() {
    return "Hello World!";
  }

  // Field declared after methods / inner classes - avoid this
  private String _fieldInWrongLocation;
}</j.0:BadExample>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:Name>FieldDeclarationsShouldBeAtStartOfClass</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.</j.0:Rule>
    <j.0:PrimaryTypeList>FieldDeclarationsShouldBeAtStartOfClass</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>FieldDeclarationsShouldBeAtStartOfClass</j.0:SecondaryTypeList>
    <j.0:FatherName>FieldDeclarationsShouldBeAtStartOfClass</j.0:FatherName>
    <j.0:ExcelId>pmdCodetyle_17</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/265/prosCluster/0">
        <j.0:ProsExample>public class HelloWorldBean {
  // Field declared before methods / inner classes - OK
  private String _thing;

  public String getMessage() {
    return "Hello World!";
  }
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/398">
    <j.0:RuleExplanation>If the code is likely to be recovered later, a reasonable explanation needs to be added. If not, please delete directly because code history will be recorded by svn or git.</j.0:RuleExplanation>
    <j.0:Rule>Notes need to be added when commenting out code.</j.0:Rule>
    <j.0:ExcelId>alibaba_107</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/289">
    <j.0:BadExample>public class Foo {
    public void bar() {
        int x = 42;
        return;
    }
}</j.0:BadExample>
    <j.0:Rule>Avoid the use of unnecessary return statements.</j.0:Rule>
    <j.0:SecondaryTypeList>UnnecessaryReturn</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>UnnecessaryReturn</j.0:PrimaryTypeList>
    <j.0:FatherName>UnnecessaryReturn</j.0:FatherName>
    <j.0:Name>UnnecessaryReturn</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_41</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/350">
    <j.0:Rule>Keyword final should be used in the following situations: 
  1) A class which is not allow to be inherited, or a local variable not to be reassigned.
  2) An argument which is not allow to be modified. 
  3) A method which is not allow to be overridden.</j.0:Rule>
    <j.0:ExcelId>alibaba_59</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/132">
    <j.0:Exception> @SomeAnnotation({a, b}) (no space is used)</j.0:Exception>
    <j.0:Rule>Before any open curly brace ({),</j.0:Rule>
    <j.0:ExcelId>google_41</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/483">
    <j.0:Rule>Data access layer, data interacting with MySQL, Oracle and HBase.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification$$Application Layers</j.0:FatherName>
    <j.0:Name>DAO Layer</j.0:Name>
    <j.0:ExcelId>alibaba_192</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/241">
    <j.0:Rule>Numerical constants (literals) should not be coded directly, except for -1, 0, and 1, which can appear in a for loop as counter values.</j.0:Rule>
    <j.0:SecondaryTypeList>Constants</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:Name>Constants</j.0:Name>
    <j.0:ExcelId>codeConvention_68</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/374">
    <j.0:RuleExplanation>If thread 1 does update after adding lock to table A, B, C accordingly, the lock sequence of thread 2 should also be A, B, C, otherwise deadlock might happen.</j.0:RuleExplanation>
    <j.0:Rule>When adding locks to multiple resources, tables in the database and objects at the same time, locking sequence should be kept consistent to avoid deadlock.</j.0:Rule>
    <j.0:ExcelId>alibaba_83</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/29">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/29/prosCluster/0">
        <j.0:Pros>Increase readability. Makes it clear what the unit should do and especially all the things it is not supposed to do. This again makes it easier to keep the code clean of side effects.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Functions (methods returning something) should be named after what they return and procedures (void methods) after what they do.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_30</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/288">
    <j.0:BadExample>public @interface Annotation {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public interface Foo {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public class Bar {
    public static interface Baz {}  // static ignored
    public static enum FoorBar {    // static ignored
        FOO;
    }
}</j.0:BadExample>
    <j.0:Rule>Fields in interfaces and annotations are automatically public static final, and methods are public abstract.
Classes, interfaces or annotations nested in an interface or annotation are automatically 
public static (all nested interfaces and annotations are automatically static).
Nested enums are automatically static. </j.0:Rule>
    <j.0:SecondaryTypeList>UnnecessaryModifier</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>UnnecessaryModifier</j.0:PrimaryTypeList>
    <j.0:FatherName>UnnecessaryModifier</j.0:FatherName>
    <j.0:Name>UnnecessaryModifier</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_40</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/397">
    <j.0:Rule>When code logic changes, comments need to be updated at the same time, especially for the changes of parameters, return value, exception and core logic.</j.0:Rule>
    <j.0:ExcelId>alibaba_106</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/155">
    <j.0:Rule>Identifiers use only ASCII letters and digits, and, in a small number of cases noted below, underscores.</j.0:Rule>
    <j.0:SecondaryTypeList>Naming</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:Name>Naming</j.0:Name>
    <j.0:ExcelId>google_64</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/179">
    <j.0:Rule>Java source files have the following ordering:Beginning comments (see "Beginning Comments" (http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventions.doc2.html#3441))
Package and Import statements; 
Class and interface declarations (see "Class and Interface Declarations"(http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventions.doc2.html#1852) )</j.0:Rule>
    <j.0:ExcelId>codeConvention_6</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/240">
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Referring to Class Variables and Methods</j.0:SecondaryTypeList>
    <j.0:BadExample>anObject.classMethod();    //AVOID!</j.0:BadExample>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
    <j.0:ExcelId>codeConvention_67</j.0:ExcelId>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/240/prosCluster/0">
        <j.0:ProsExample>classMethod();             //OK
AClass.classMethod();      //OK
 </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Avoid using an object to access a class (static) variable or method. Use a class name instead.</j.0:Rule>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Name>Referring to Class Variables and Methods</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/482">
    <j.0:Rule>This layer is the common business process layer, which contains the following features:
  1) Encapsulates third-party service, to preprocess return values and exceptions;
  2) The precipitation of general ability of Service Layer, such as caching solutions, middleware general processing;
  3) Interacts with the DAO layer, including composition and reuse of multiple DAO classes.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification$$Application Layers</j.0:FatherName>
    <j.0:Name>Manager Layer</j.0:Name>
    <j.0:ExcelId>alibaba_191</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/264">
    <j.0:BadExample>public class Foo extends Object {     // not required
}</j.0:BadExample>
    <j.0:Rule>No need to explicitly extend Object.</j.0:Rule>
    <j.0:SecondaryTypeList>ExtendsObject</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>ExtendsObject</j.0:PrimaryTypeList>
    <j.0:FatherName>ExtendsObject</j.0:FatherName>
    <j.0:Name>ExtendsObject</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_16</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/373">
    <j.0:Rule>In highly concurrent scenarios, performance of Lock should be considered in synchronous calls. A block lock is better than a method lock. An object lock is better than a class lock.</j.0:Rule>
    <j.0:ExcelId>alibaba_82</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/131">
    <j.0:Rule>Separating any reserved word, such as else or catch, from a closing curly brace (}) that precedes it on that line</j.0:Rule>
    <j.0:ExcelId>google_40</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/287">
    <j.0:BadExample>public class Foo {
   public int foo() {
     int x = doSomething();
     return x;  // instead, just 'return doSomething();'
   }
}</j.0:BadExample>
    <j.0:Rule>Avoid the creation of unnecessary local variables</j.0:Rule>
    <j.0:SecondaryTypeList>UnnecessaryLocalBeforeReturn</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>UnnecessaryLocalBeforeReturn</j.0:PrimaryTypeList>
    <j.0:FatherName>UnnecessaryLocalBeforeReturn</j.0:FatherName>
    <j.0:Name>UnnecessaryLocalBeforeReturn</j.0:Name>
    <j.0:ExcelId>pmdCodetyle_39</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/481">
    <j.0:Rule> In this layer concrete business logic is implemented.</j.0:Rule>
    <j.0:SecondaryTypeList>Application Layers</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Project Specification</j.0:PrimaryTypeList>
    <j.0:FatherName>Project Specification$$Application Layers</j.0:FatherName>
    <j.0:Name>Service Layer</j.0:Name>
    <j.0:ExcelId>alibaba_190</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/130">
    <j.0:Decision>This rule is never interpreted as requiring or forbidding additional space at the start or end of a line; it addresses only interior space.</j.0:Decision>
    <j.0:Rule>Separating any reserved word, such as if, for or catch, from an open parenthesis (() that follows it on that line</j.0:Rule>
    <j.0:SecondaryTypeList>Whitespace</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:FatherName>Formatting$$Whitespace</j.0:FatherName>
    <j.0:Name>Horizontal whitespace</j.0:Name>
    <j.0:ExcelId>google_39</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/372">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/372/prosCluster/0">
        <j.0:ProsExample>objectThreadLocal.set(someObject);
try {
    ...
} finally {
    objectThreadLocal.remove();
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>remove() method must be implemented by ThreadLocal variables, especially when using thread pools in which threads are often reused. Otherwise, it may affect subsequent business logic and cause unexpected problems such as memory leak.s</j.0:Rule>
    <j.0:ExcelId>alibaba_81</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/154">
    <j.0:BadExample>3000000000l</j.0:BadExample>
    <j.0:ExcelId>google_63</j.0:ExcelId>
    <j.0:Rule>long-valued integer literals use an uppercase L suffix, never lowercase (to avoid confusion with the digit 1)</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/154/prosCluster/0">
        <j.0:ProsExample>3000000000L</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:Name>Numeric Literals</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/263">
    <j.0:FatherName>EmptyMethodInAbstractClassShouldBeAbstract</j.0:FatherName>
    <j.0:Rule>Empty or auto-generated methods in an abstract class should be tagged as abstract.</j.0:Rule>
    <j.0:ExcelId>pmdCodetyle_15</j.0:ExcelId>
    <j.0:PrimaryTypeList>EmptyMethodInAbstractClassShouldBeAbstract</j.0:PrimaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:RuleExplanation>This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.</j.0:RuleExplanation>
    <j.0:SecondaryTypeList>EmptyMethodInAbstractClassShouldBeAbstract</j.0:SecondaryTypeList>
    <j.0:Name>EmptyMethodInAbstractClassShouldBeAbstract</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:BadExample>public abstract class ShouldBeAbstract {
    public Object couldBeAbstract() {
        // Should be abstract method ?
        return null;
    }

    public void couldBeAbstract() {}
}</j.0:BadExample>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/396">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/396/consCluster0">
        <j.0:Cons>To explain “TCP connection overtime” as “Transmission Control Protocol connection overtime” only makes it more difficult to understand.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Rule>Local language can be used in comments if English cannot describe the problem properly. Keywords and proper nouns should be kept in English.</j.0:Rule>
    <j.0:ExcelId>alibaba_105</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/193">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/193/consCluster0">
        <j.0:ConsExample>//DON'T USE THIS INDENTATION
if ((condition1 &amp;&amp; condition2)
    || (condition3 &amp;&amp; condition4)
    ||!(condition5 &amp;&amp; condition6)) { //BAD WRAPS
    doSomethingAboutIt();            //MAKE THIS LINE EASY TO MISS
} </j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/193/prosCluster/0">
        <j.0:ProsExample>//USE THIS INDENTATION INSTEAD
if ((condition1 &amp;&amp; condition2)
        || (condition3 &amp;&amp; condition4)
        ||!(condition5 &amp;&amp; condition6)) {
    doSomethingAboutIt();
} </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rationale>Since conventional (4 space) indentation makes seeing the body difficult.</j.0:Rationale>
    <j.0:Rule>Line wrapping for if statements should generally use the 8-space rule.</j.0:Rule>
    <j.0:ExcelId>codeConvention_20</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/0">
    <j.0:Rule>Names representing types must be in mixed case starting with upper case.</j.0:Rule>
    <j.0:SecondaryTypeList>General Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>General Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_1</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/506">
    <j.0:Rule>It is forbidden to output user data to HTML page without security filtering or proper escaping.</j.0:Rule>
    <j.0:ExcelId>alibaba_215</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/66">
    <j.0:Name>Layout</j.0:Name>
    <j.0:Rule>Method definitions should have the following form:</j.0:Rule>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/66/prosCluster/0">
        <j.0:ProsExample>void someMethod()
{
  ...
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ExcelId>geosoft_67</j.0:ExcelId>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/42">
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/42/prosCluster/0">
        <j.0:Pros>This ensures that variables are valid at any time. </j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:Rule>Variables should be initialized where they are declared.</j.0:Rule>
    <j.0:Name>Variables</j.0:Name>
    <j.0:SecondaryTypeList>Variables</j.0:SecondaryTypeList>
    <j.0:ExcelId>geosoft_43</j.0:ExcelId>
    <j.0:Exception>Sometimes it is impossible to initialize a variable to a valid value where it is declared:
  int x, y, z;
  getCenter(&amp;x, &amp;y, &amp;z);
In these cases it should be left uninitialized rather than initialized to some phony value.</j.0:Exception>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/192">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/192/prosCluster/0">
        <j.0:ProsExplanation>It would shift the second and third lines to the far right if it used conventional indentation, so instead it indents only 8 spaces.</j.0:ProsExplanation>
        <j.0:ProsExample>//INDENT 8 SPACES TO AVOID VERY DEEP INDENTS
private static synchronized horkingLongMethodName(int anArg,
        Object anotherArg, String yetAnotherArg,
        Object andStillAnother) {
    ...
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>If the above rules lead to confusing code or to code that's squished up against the right margin, just indent 8 spaces instead.</j.0:Rule>
    <j.0:ExcelId>codeConvention_19</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/89">
    <j.0:Rule>There should be a space between the "//" and the actual comment, and comments should always start with an upper case letter and end with a period.</j.0:Rule>
    <j.0:SecondaryTypeList>Comments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:Name>Comments</j.0:Name>
    <j.0:ExcelId>geosoft_90</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/505">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/505/consCluster0">
        <j.0:Cons>Ignoring parameter check may cause:

memory leak because of excessive page size
slow database query because of malicious order by
arbitrary redirection
SQL injection
deserialize injection
ReDoS</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Rule> Any parameters input by users must go through validation check.</j.0:Rule>
    <j.0:ExcelId>alibaba_214</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/65">
    <j.0:Rule>The class declarations should have the following form:</j.0:Rule>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Name>Layout</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/65/prosCluster/0">
        <j.0:ProsExample>class SomeClass : public BaseClass
{
  public:
    ...

  protected:
    ...

  private:
    ...
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:ExcelId>geosoft_66</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/41">
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/41/prosCluster/0">
        <j.0:Pros>By this, the programmer indicates that he is aware of the different types involved and that the mix is intentional.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:BadExample>floatValue = intValue;</j.0:BadExample>
    <j.0:Rule>Type conversions must always be done explicitly. Never rely on implicit type conversion.</j.0:Rule>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:SecondaryTypeList>Types</j.0:SecondaryTypeList>
    <j.0:ExcelId>geosoft_42</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Name>Types</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/503">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/503/prosCluster/0">
        <j.0:ProsExample>Personal phone number should be displayed as: 158****9119. The middle 4 digits are hidden to prevent privacy leaks.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Direct display of user sensitive data is not allowed. Displayed data must be desensitized.</j.0:Rule>
    <j.0:ExcelId>alibaba_212</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/191">
    <j.0:ProsCluster rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/191/prosCluster/0"/>
    <j.0:Rule>Align the new line with the beginning of the expression at the same level on the previous line.</j.0:Rule>
    <j.0:ExcelId>codeConvention_18</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/68">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
    <j.0:Name>Layout</j.0:Name>
    <j.0:Rule>A for statement should have the following form:</j.0:Rule>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/68/prosCluster/0">
        <j.0:ProsExample>for (initialization; condition; update) {
  statements;
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:ExcelId>geosoft_69</j.0:ExcelId>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/504">
    <j.0:Rule>SQL parameter entered by users should be checked carefully or limited by METADATA, to prevent SQL injection. Database access by string concatenation SQL is forbidden.</j.0:Rule>
    <j.0:ExcelId>alibaba_213</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/419">
    <j.0:Rule>One of the most common errors is NullPointerException. Pay attention to the following situations:
  1) If the return type is primitive, return a value of wrapper class may cause NullPointerException.
    Counter example: public int f() { return Integer } Unboxing a null value will throw a NullPointerException. 
  2) The return value of a database query might be null. 
  3) Elements in collection may be null, even though Collection.isEmpty() returns false. 
  4) Return values from an RPC might be null. 
  5) Data stored in sessions might by null.
  6) Method chaining, like obj.getA().getB().getC(), is likely to cause NullPointerException.</j.0:Rule>
    <j.0:ExcelId>alibaba_128</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/44">
    <j.0:Rule>Use of global variables should be minimized.In C++ there is no reason global variables need to be used at all. The same is true for global functions or file scope (static) variables.</j.0:Rule>
    <j.0:SecondaryTypeList>Variables</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Variables</j.0:Name>
    <j.0:ExcelId>geosoft_45</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/20">
    <j.0:Rule>The suffix No should be used for variables representing an entity number.The notation is taken from mathematics where it is an established convention for indicating an entity number.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_21</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/502">
    <j.0:SecondaryTypeList> Security Specification</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/502/prosCluster/0">
        <j.0:ProsExample>view or modify other people’s orders.</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:FatherName> Security Specification</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>alibaba_211</j.0:ExcelId>
    <j.0:RuleExplanation>Prevent the access and manipulation of other people’s data without authorization check</j.0:RuleExplanation>
    <j.0:Rule> User-owned pages or functions must be authorized.</j.0:Rule>
    <j.0:Name> Security Specification</j.0:Name>
    <j.0:PrimaryTypeList> Security Specification</j.0:PrimaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/67">
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:ExcelId>geosoft_68</j.0:ExcelId>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:Name>Layout</j.0:Name>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/67/prosCluster/0">
        <j.0:ProsExample>if (condition) {
  statements;
}

if (condition) {
  statements;
}
else {
   statements;
}

if (condition) {
  statements;
}
else if (condition) {
  statements;
}
else {
  statements;
}</j.0:ProsExample>
        <j.0:Pros>The chosen approach is considered better in the way that each part of the if-else statement is written on separate lines of the file. This should make it easier to manipulate the statement, for instance when moving else clauses around.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>The if-else class of statements should have the following form:
</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/190">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/190/consCluster0">
        <j.0:ConsExample>longName1 = longName2 * (longName3 + longName4
                         - longName5) + 4 * longname6; // AVOID</j.0:ConsExample>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/190/prosCluster/0">
        <j.0:ProsExplanation>This is preferred, since the break occurs outside the parenthesized expression, which is at a higher level.</j.0:ProsExplanation>
        <j.0:ProsExample>longName1 = longName2 * (longName3 + longName4 - longName5)
            + 4 * longname6; // PREFER</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Prefer higher-level breaks to lower-level breaks.</j.0:Rule>
    <j.0:ExcelId>codeConvention_17</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/309">
    <j.0:Rule>Use count as name prefix for a statistical method.</j.0:Rule>
    <j.0:ExcelId>alibaba_18</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/418">
    <j.0:RuleExplanation>It is caller’s responsibility to check the return value, as well as to consider the possibility that remote call fails or other runtime exception occurs.</j.0:RuleExplanation>
    <j.0:Rule>The return value of a method can be null. It is not mandatory to return an empty collection or object. Specify in Javadoc explicitly when the method might return null. The caller needs to make a null check to prevent NullPointerException.</j.0:Rule>
    <j.0:ExcelId>alibaba_127</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/43">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/43/prosCluster/0">
        <j.0:Pros>Enhance readability by ensuring all concepts are represented uniquely. Reduce chance of error by side effects.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Variables must never have dual meaning.</j.0:Rule>
    <j.0:SecondaryTypeList>Variables</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Variables</j.0:Name>
    <j.0:ExcelId>geosoft_44</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/391">
    <j.0:RuleExplanation>In IDE, Javadoc can be seen directly when hovering, which is a good way to improve efficiency.</j.0:RuleExplanation>
    <j.0:Rule>Javadoc should be used for classes, class variables and methods. The format should be ‘/** comment **/’, rather than ‘// xxx’.</j.0:Rule>
    <j.0:SecondaryTypeList>Code Comments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Code Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Code Comments</j.0:FatherName>
    <j.0:Name>Code Comments</j.0:Name>
    <j.0:ExcelId>alibaba_100</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/173">
    <j.0:Rule>It is extremely rare to override Object.finalize.</j.0:Rule>
    <j.0:SecondaryTypeList>Finalizers: not used</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:Name>Finalizers: not used</j.0:Name>
    <j.0:ExcelId>google_82</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/197">
    <j.0:Rule>Block comments should be used at the beginning of each file and before each method. They can also be used in other places, such as within methods. Block comments inside a function or method should be indented to the same level as the code they describe.</j.0:Rule>
    <j.0:SecondaryTypeList>Implementation Comment Formats</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments$$Implementation Comment Formats</j.0:FatherName>
    <j.0:Name>Block Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_24</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/46">
    <j.0:BadExample>float *x; </j.0:BadExample>
    <j.0:Rule>C++ pointers and references should have their reference symbol next to the type rather than to the name.The pointer-ness or reference-ness of a variable is a property of the type rather than the name.</j.0:Rule>
    <j.0:SecondaryTypeList>Variables</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Variables</j.0:Name>
    <j.0:ExcelId>geosoft_47</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/22">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/22/prosCluster/0">
        <j.0:Pros>Using the is prefix solves a common problem of choosing bad boolean names like status or flag. isStatus or isFlag simply doesn't fit, and the programmer is forced to choose more meaningful names.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule> The prefix is should be used for boolean variables and methods.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_23</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/390">
    <j.0:Rule> Cases that input parameters do not require validation:
  1) Methods very likely to be implemented in loops. A note should be included informing that parameter check should be done externally. 
  2) Methods in bottom layers are very frequently called so generally do not need to be checked. e.g. If DAO layer and Service layer is deployed in the same server, parameter check in DAO layer can be omitted. 
  3) Private methods that can only be implemented internally, if all parameters are checked or manageable.</j.0:Rule>
    <j.0:ExcelId>alibaba_99</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/172">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/172/prosCluster/0">
        <j.0:ProsExample>Foo aFoo = ...;
Foo.aStaticMethod(); // good
aFoo.aStaticMethod(); // bad
somethingThatYieldsAFoo().aStaticMethod(); // very bad</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>When a reference to a static class member must be qualified, it is qualified with that class's name, not with a reference or expression of that class's type.</j.0:Rule>
    <j.0:SecondaryTypeList>Static members: qualified using class</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:Name>Static members: qualified using class</j.0:Name>
    <j.0:ExcelId>google_81</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/281">
    <j.0:Name>ShortClassName</j.0:Name>
    <j.0:FatherName>ShortClassName</j.0:FatherName>
    <j.0:Rule>Short Classnames with fewer than.</j.0:Rule>
    <j.0:ExcelId>pmdCodetyle_33</j.0:ExcelId>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:PrimaryTypeList>ShortClassName</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>ShortClassName</j.0:SecondaryTypeList>
    <j.0:RuleExplanation>Five characters are not recommended.</j.0:RuleExplanation>
    <j.0:BadExample>public class Foo {
}</j.0:BadExample>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/196">
    <j.0:Rule>Comments should not be enclosed in large boxes drawn with asterisks or other characters. Comments should never include special characters such as form-feed and backspace.</j.0:Rule>
    <j.0:ExcelId>codeConvention_23</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/69">
    <j.0:ExcelId>geosoft_70</j.0:ExcelId>
    <j.0:Rule>An empty for statement should have the following form:
Empty loops should be avoided however.                                                           </j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/69/prosCluster/0">
        <j.0:ProsExample>for (initialization; condition; update)；</j.0:ProsExample>
        <j.0:Pros>This emphasizes the fact that the for statement is empty and it makes it obvious for the reader that this is intentional.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>Layout</j.0:PrimaryTypeList>
    <j.0:FatherName>Layout</j.0:FatherName>
    <j.0:SecondaryTypeList>Layout</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Name>Layout</j.0:Name>
    <j.0:CodeConventionType>typographic</j.0:CodeConventionType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/45">
    <j.0:Exception>One exception to this rule is when the class is essentially a data structure, with no behavior (equivalent to a C struct). In this case it is appropriate to make the class' instance variables public </j.0:Exception>
    <j.0:Rule>Class variables should never be declared public.The concept of C++ information hiding and encapsulation is violated by public variables. Use private variables and access functions instead.</j.0:Rule>
    <j.0:SecondaryTypeList>Variables</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Variables</j.0:Name>
    <j.0:ExcelId>geosoft_46</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/509">
    <j.0:Rule>In scenarios when users generate content (e.g., posting, comment, instant messages), anti-scam word filtering and other risk control strategies must be applied.</j.0:Rule>
    <j.0:ExcelId>alibaba_218</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/21">
    <j.0:Rule>Iterator variables should be called i, j, k etc.The notation is taken from mathematics where it is an established convention for indicating iterators.
Variables named j, k etc. should be used for nested loops only.</j.0:Rule>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:ExcelId>geosoft_22</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/171">
    <j.0:SecondaryTypeList>Caught exceptions: not ignored</j.0:SecondaryTypeList>
    <j.0:Rule>Except as noted below, it is very rarely correct to do nothing in response to a caught exception. (Typical responses are to log it, or if it is considered "impossible", rethrow it as an AssertionError.)</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/171/prosCluster/0">
        <j.0:ProsExample>try {
  int i = Integer.parseInt(response);
  return handleNumericResponse(i);
} catch (NumberFormatException ok) {
  // it's not numeric; that's fine, just continue
}
return handleTextResponse(response);</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:Name>Caught exceptions: not ignored</j.0:Name>
    <j.0:ExcelId>google_80</j.0:ExcelId>
    <j.0:Exception>When it truly is appropriate to take no action whatsoever in a catch block, the reason this is justified is explained in a comment.</j.0:Exception>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/195">
    <j.0:Rule>Avoid any comments that are likely to get out of date as the code evolves.</j.0:Rule>
    <j.0:SecondaryTypeList>Comments</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Comments</j.0:PrimaryTypeList>
    <j.0:FatherName>Comments</j.0:FatherName>
    <j.0:Name>Comments</j.0:Name>
    <j.0:ExcelId>codeConvention_22</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/48">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/48/prosCluster/0">
        <j.0:Pros>It is easier to control the effects and side effects of the variable.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Variables should be declared in the smallest scope possible.</j.0:Rule>
    <j.0:SecondaryTypeList>Variables</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Variables</j.0:Name>
    <j.0:ExcelId>geosoft_49</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/24">
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:Rule>Abbreviations in names should be avoided.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:BadExample>compAvg();</j.0:BadExample>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:Exception>There are two types of words to consider. First are the common words listed in a language dictionary. These must never be abbreviated. Never write:
cmd   instead of   command
cp    instead of   copy
pt    instead of   point
comp  instead of   compute
init  instead of   initialize
etc.
Then there are domain specific phrases that are more naturally known through their abbreviations/acronym. These phrases should be kept abbreviated. Never write:

HypertextMarkupLanguage  instead of   html
CentralProcessingUnit    instead of   cpu
PriceEarningRatio        instead of   pe
etc.</j.0:Exception>
    <j.0:ExcelId>geosoft_25</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/508">
    <j.0:ConsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/508/consCluster0">
        <j.0:Cons>For example, if there is no limitation to the times and frequency when sending verification codes to mobile phones, users might be bothered and SMS platform resources might be wasted.</j.0:Cons>
      </rdf:Description>
    </j.0:ConsCluster>
    <j.0:Rule>It is necessary to use the correct anti-replay restrictions, such as number restriction, fatigue control, verification code checking, to avoid abusing of platform resources, such as text messages, e-mail, telephone, order, payment.</j.0:Rule>
    <j.0:ExcelId>alibaba_217</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/170">
    <j.0:Exception>@Override may be omitted when the parent method is @Deprecated</j.0:Exception>
    <j.0:Rule>A method is marked with the @Override annotation whenever it is legal. This includes a class method overriding a superclass method, a class method implementing an interface method, and an interface method respecifying a superinterface method.</j.0:Rule>
    <j.0:SecondaryTypeList>Override: always used</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Programming Practices</j.0:PrimaryTypeList>
    <j.0:FatherName>Programming Practices</j.0:FatherName>
    <j.0:Name>Override: always used</j.0:Name>
    <j.0:ExcelId>google_79</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/194">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/194/prosCluster/0">
        <j.0:ProsExample>alpha = (aLongBooleanExpression) ? beta : gamma;  
 alpha = (aLongBooleanExpression) ? beta
                                 : gamma;  
 alpha = (aLongBooleanExpression)
        ? beta 
        : gamma; </j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Three acceptable ways to format ternary expressions:</j.0:Rule>
    <j.0:ExcelId>codeConvention_21</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/47">
    <j.0:BadExample>if (nLines)</j.0:BadExample>
    <j.0:Rule>Implicit test for 0 should not be used other than for boolean variables and pointers.It is not necessarily defined by the C++ standard that ints and floats 0 are implemented as binary 0. Also, by using an explicit test the statement gives an immediate clue of the type being tested.</j.0:Rule>
    <j.0:SecondaryTypeList>Variables</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>Variables</j.0:Name>
    <j.0:ExcelId>geosoft_48</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/23">
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:FatherName>Naming Conventions</j.0:FatherName>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/23/prosCluster/0">
        <j.0:Pros>Reduce complexity by symmetry.</j.0:Pros>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:SecondaryTypeList>Specific Naming Conventions</j.0:SecondaryTypeList>
    <j.0:Resource> Code Complete, Steve McConnell - Microsoft Press</j.0:Resource>
    <j.0:Name>Specific Naming Conventions</j.0:Name>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://geosoft.no/development/cppstyle.html"/>
    <j.0:Rule>Complement names must be used for complement operations</j.0:Rule>
    <j.0:PrimaryTypeList>Naming Conventions</j.0:PrimaryTypeList>
    <j.0:ExcelId>geosoft_24</j.0:ExcelId>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/507">
    <j.0:RuleExplanation>CSRF (Cross-site Request Forgery) is a kind of common programming flaw. For applications/websites with CSRF leaks, attackers can construct URL in advance and modify the user parameters in database as long as the victim user visits without notice.</j.0:RuleExplanation>
    <j.0:Rule>Form and AJAX submission must be filtered by CSRF security check.</j.0:Rule>
    <j.0:ExcelId>alibaba_216</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://alibaba.github.io/Alibaba-Java-Coding-Guidelines/"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/145">
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:Name>Arrays</j.0:Name>
    <j.0:SecondaryTypeList>Specific constructs</j.0:SecondaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/145/prosCluster/1">
        <j.0:ProsExample>new int[] {
  0,
  1,
  2,
  3
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
    <j.0:Rule>Any array initializer may optionally be formatted as if it were a "block-like construct."</j.0:Rule>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/137">
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/145"/>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/137/prosCluster/1">
            <j.0:ProsExample>new int[] { 5, 6 }</j.0:ProsExample>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/137/prosCluster/0">
            <j.0:ProsExample>new int[] {5, 6}  </j.0:ProsExample>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:Rule>Optional just inside both braces of an array initializer</j.0:Rule>
        <j.0:ExcelId>google_46</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/145/prosCluster/2">
        <j.0:ProsExample>new int[]
  {0， 1， 2， 3}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/142">
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/145"/>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/142/prosCluster/0">
            <j.0:ProsExample>private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }</j.0:ProsExample>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:Rule>An enum class with no methods and no documentation on its constants may optionally be formatted as if it were an array initializer</j.0:Rule>
        <j.0:ExcelId>google_51</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/145/prosCluster/0">
        <j.0:ProsExample>new int[] {
  0, 1, 2, 3
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:ExcelId>google_54</j.0:ExcelId>
    <j.0:FatherName>Formatting$$Specific constructs</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/107">
    <j.0:SecondaryTypeList>Class declaration</j.0:SecondaryTypeList>
    <j.0:FatherName>Source file structure$$Class declaration</j.0:FatherName>
    <j.0:Rule>Each top-level class resides in a source file of its own.</j.0:Rule>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/178">
        <j.0:Name>Java Source Files</j.0:Name>
        <j.0:Rule>Each Java source file contains a single public class or interface. </j.0:Rule>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:SecondaryTypeList>Java Source Files</j.0:SecondaryTypeList>
        <j.0:PrimaryTypeList>File Organization</j.0:PrimaryTypeList>
        <j.0:FatherName>File Organization</j.0:FatherName>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
        <j.0:ExcelId>codeConvention_5</j.0:ExcelId>
        <j.0:RuleExplanation>When private classes and interfaces are associated with a public class, you can put them in the same source file as the public class. The public class should be the first class or interface in the file.</j.0:RuleExplanation>
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/107"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:ExcelId>google_16</j.0:ExcelId>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/92">
        <j.0:RelatedSpecification>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/98">
            <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
            <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/107"/>
            <j.0:OntologyType>CodeConvention</j.0:OntologyType>
            <j.0:FatherName>Source file structure</j.0:FatherName>
            <j.0:SecondaryTypeList>Source file structure</j.0:SecondaryTypeList>
            <j.0:ExcelId>google_7</j.0:ExcelId>
            <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
            <j.0:Similar>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/181">
                <j.0:OntologyType>CodeConvention</j.0:OntologyType>
                <j.0:ExcelId>codeConvention_8</j.0:ExcelId>
                <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
                <j.0:SecondaryTypeList>Java Source Files</j.0:SecondaryTypeList>
                <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/98"/>
                <j.0:ProsCluster>
                  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/181/prosCluster/0">
                    <j.0:ProsExample>package java.awt;

import java.awt.peer.CanvasPeer;</j.0:ProsExample>
                  </rdf:Description>
                </j.0:ProsCluster>
                <j.0:Name>Package and Import Statements</j.0:Name>
                <j.0:FatherName>File Organization$$Java Source Files</j.0:FatherName>
                <j.0:Rule>The first non-comment line of most Java source files is a package statement. After that, import statements can follow.</j.0:Rule>
                <j.0:PrimaryTypeList>File Organization</j.0:PrimaryTypeList>
              </rdf:Description>
            </j.0:Similar>
            <j.0:Name>Source file structure</j.0:Name>
            <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/92"/>
            <j.0:Rule>A source file consists of, in order:1. License or copyright information, if present. 2. Package statement.3. Import statements.4. Exactly one top-level class</j.0:Rule>
          </rdf:Description>
        </j.0:RelatedSpecification>
        <j.0:Rule>The source file name consists of the case-sensitive name of the top-level class it contains (of which there is exactly one), plus the .java extension.</j.0:Rule>
        <j.0:Name>File name</j.0:Name>
        <j.0:PrimaryTypeList>File name</j.0:PrimaryTypeList>
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/107"/>
        <j.0:SecondaryTypeList>File name</j.0:SecondaryTypeList>
        <j.0:FatherName>File name</j.0:FatherName>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
        <j.0:ExcelId>google_1</j.0:ExcelId>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/98"/>
    <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
    <j.0:Name>Exactly one top-level class declaration</j.0:Name>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/280">
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>RemoteSessionInterfaceNamingConvention</j.0:SecondaryTypeList>
    <j.0:ExcelId>pmdCodetyle_32</j.0:ExcelId>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/279">
        <j.0:Name>RemoteInterfaceNamingConvention</j.0:Name>
        <j.0:FatherName>RemoteInterfaceNamingConvention</j.0:FatherName>
        <j.0:BadExample>/* Poor Session suffix */
public interface BadSuffixSession extends javax.ejb.EJBObject {}

/* Poor EJB suffix */
public interface BadSuffixEJB extends javax.ejb.EJBObject {}

/* Poor Bean suffix */
public interface BadSuffixBean extends javax.ejb.EJBObject {}</j.0:BadExample>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:SecondaryTypeList>RemoteInterfaceNamingConvention</j.0:SecondaryTypeList>
        <j.0:RelatedSpecification>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/269">
            <j.0:Rule>The Local Home interface of a Session EJB should be suffixed by ‘LocalHome’.</j.0:Rule>
            <j.0:ExcelId>pmdCodetyle_21</j.0:ExcelId>
            <j.0:PrimaryTypeList>LocalHomeNamingConvention</j.0:PrimaryTypeList>
            <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/279"/>
            <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
            <j.0:ProsCluster>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/269/prosCluster/0">
                <j.0:ProsExample>public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name</j.0:ProsExample>
              </rdf:Description>
            </j.0:ProsCluster>
            <j.0:OntologyType>CodeConvention</j.0:OntologyType>
            <j.0:RelatedSpecification>
              <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/270">
                <j.0:SecondaryTypeList>LocalInterfaceSessionNamingConvention</j.0:SecondaryTypeList>
                <j.0:OntologyType>CodeConvention</j.0:OntologyType>
                <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
                <j.0:FatherName>LocalInterfaceSessionNamingConvention</j.0:FatherName>
                <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/279"/>
                <j.0:PrimaryTypeList>LocalInterfaceSessionNamingConvention</j.0:PrimaryTypeList>
                <j.0:Name>LocalInterfaceSessionNamingConvention</j.0:Name>
                <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/280"/>
                <j.0:ProsCluster>
                  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/270/prosCluster/0">
                    <j.0:ProsExample>public interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name</j.0:ProsExample>
                  </rdf:Description>
                </j.0:ProsCluster>
                <j.0:ExcelId>pmdCodetyle_22</j.0:ExcelId>
                <j.0:BadExample>public interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name</j.0:BadExample>
                <j.0:Rule>The Local Interface of a Session EJB should be suffixed by ‘Local’.</j.0:Rule>
                <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/269"/>
              </rdf:Description>
            </j.0:RelatedSpecification>
            <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/280"/>
            <j.0:SecondaryTypeList>LocalHomeNamingConvention</j.0:SecondaryTypeList>
            <j.0:FatherName>LocalHomeNamingConvention</j.0:FatherName>
            <j.0:BadExample>public interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name</j.0:BadExample>
            <j.0:Name>LocalHomeNamingConvention</j.0:Name>
          </rdf:Description>
        </j.0:RelatedSpecification>
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/280"/>
        <j.0:PrimaryTypeList>RemoteInterfaceNamingConvention</j.0:PrimaryTypeList>
        <j.0:Rule>Remote Interface of a Session EJB should not have a suffix.</j.0:Rule>
        <j.0:ExcelId>pmdCodetyle_31</j.0:ExcelId>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/270"/>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:PrimaryTypeList>RemoteSessionInterfaceNamingConvention</j.0:PrimaryTypeList>
    <j.0:FatherName>RemoteSessionInterfaceNamingConvention</j.0:FatherName>
    <j.0:Name>RemoteSessionInterfaceNamingConvention</j.0:Name>
    <j.0:BadExample>public interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name</j.0:BadExample>
    <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/270"/>
    <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/269"/>
    <j.0:Rule>A Remote Home interface type of a Session EJB should be suffixed by ‘Home’.</j.0:Rule>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/280/prosCluster/0">
        <j.0:ProsExample>public interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/100">
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:Name>Package statement</j.0:Name>
    <j.0:SecondaryTypeList>Package statement</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
    <j.0:FatherName>Source file structure</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:RelatedSpecification>27.0</j.0:RelatedSpecification>
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/102">
        <j.0:SecondaryTypeList>Import statements</j.0:SecondaryTypeList>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
        <j.0:Name>No line-wrapping</j.0:Name>
        <j.0:FatherName>Source file structure$$Import statements</j.0:FatherName>
        <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
        <j.0:RelatedSpecification>27.0</j.0:RelatedSpecification>
        <j.0:Rule>Import statements are not line-wrapped. The column limit(Column limit: 100) does not apply to import statements.</j.0:Rule>
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/100"/>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:RelatedSpecification>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/118">
            <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
            <j.0:FatherName>Formatting</j.0:FatherName>
            <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/100"/>
            <j.0:SecondaryTypeList>Column limit: 100</j.0:SecondaryTypeList>
            <j.0:RuleExplanation>When code that might otherwise legally occupy a single line is divided into multiple lines, this activity is called line-wrapping.</j.0:RuleExplanation>
            <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
            <j.0:Rule>Java code has a column limit of 100 characters. A "character" means any Unicode code point. Except as noted below, any line that would exceed this limit must be line-wrapped, as explained in "line-wrapping"</j.0:Rule>
            <j.0:OntologyType>CodeConvention</j.0:OntologyType>
            <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/102"/>
            <j.0:RelatedSpecification>28.0</j.0:RelatedSpecification>
            <j.0:ExcelId>google_27</j.0:ExcelId>
            <j.0:Exception>Lines where obeying the column limit is not possible (for example, a long URL in Javadoc, or a long JSNI method reference).</j.0:Exception>
            <j.0:Name>Column limit: 100</j.0:Name>
          </rdf:Description>
        </j.0:RelatedSpecification>
        <j.0:ExcelId>google_11</j.0:ExcelId>
      </rdf:Description>
    </j.0:Similar>
    <j.0:Rule>The package statement is not line-wrapped. The column limit( Column limit: 100) does not apply to package statements.</j.0:Rule>
    <j.0:ExcelId>google_9</j.0:ExcelId>
    <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/118"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/104">
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/127">
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/104"/>
        <j.0:RelatedSpecification>50.0</j.0:RelatedSpecification>
        <j.0:Exception>Blank lines between enum constants </j.0:Exception>
        <j.0:Rule>A single blank line appears as required by other sections of this document</j.0:Rule>
        <j.0:ExcelId>google_36</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/99">
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/104"/>
        <j.0:Rule>Exactly one blank line separates each section that is present.</j.0:Rule>
        <j.0:ExcelId>google_8</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:Rule>If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.</j.0:Rule>
    <j.0:ExcelId>google_13</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/133">
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/119">
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/133"/>
        <j.0:Rule>When a line is broken at a non-assignment operator the break comes before the symbol.This also applies to the following "operator-like" symbols:
the dot separator (.)
the two colons of a method reference (::)
an ampersand in a type bound (&lt;T extends Foo &amp; Bar&gt;)
a pipe in a catch block (catch (FooException | BarException e)).</j.0:Rule>
        <j.0:SecondaryTypeList>Line-wrapping</j.0:SecondaryTypeList>
        <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
        <j.0:FatherName>Formatting$$Line-wrapping</j.0:FatherName>
        <j.0:Name>Where to break</j.0:Name>
        <j.0:ExcelId>google_28</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:Exception>the two colons (::) of a method reference, which is written like Object::toString</j.0:Exception>
    <j.0:Rule>On both sides of any binary or ternary operator. This also applies to the following "operator-like" symbols:
the ampersand in a conjunctive type bound: &lt;T extends Foo &amp; Bar&gt;
the pipe for a catch block that handles multiple exceptions: catch (FooException | BarException e)
the colon (:) in an enhanced for ("foreach") statement
the arrow in a lambda expression: (String str) -&gt; str.length()</j.0:Rule>
    <j.0:ExcelId>google_42</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/199">
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/116">
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/199"/>
        <j.0:Rule>Each time a new block or block-like construct is opened, the indent increases by two spaces. When the block ends, the indent returns to the previous indent level. The indent level applies to both code and comments throughout the block.</j.0:Rule>
        <j.0:SecondaryTypeList>Block indentation: +2 spaces</j.0:SecondaryTypeList>
        <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
        <j.0:FatherName>Formatting</j.0:FatherName>
        <j.0:Name>Block indentation: +2 spaces</j.0:Name>
        <j.0:ExcelId>google_25</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/199/prosCluster/0">
        <j.0:ProsExample>/*
 * Here is a block comment with some very special
 * formatting that I want indent(1) to ignore.
 *
 *    one
 *        two
 *            three
 */</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Rule>Block comments can start with /*-, which is recognized by indent(1) as the beginning of a block comment that should not reformatted.</j.0:Rule>
    <j.0:ExcelId>codeConvention_26</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/113">
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/216">
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/113"/>
        <j.0:Rule>The opening brace should be at the end of the line that begins the compound statement; the closing brace should begin a line and be indented to the beginning of the compound statement.</j.0:Rule>
        <j.0:ExcelId>codeConvention_43</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:Rule>Line break before the closing brace.</j.0:Rule>
    <j.0:ExcelId>google_22</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/161">
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/161/prosCluster/0">
        <j.0:ProsExample>sendMessage, stop</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:RelatedSpecification>78.0</j.0:RelatedSpecification>
    <j.0:Rule>Method names are written in lowerCamelCase.Method names are typically verbs or verb phrases.</j.0:Rule>
    <j.0:ExcelId>google_70</j.0:ExcelId>
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/282">
        <j.0:Rule>Method names that are very short are not helpful to the reader.</j.0:Rule>
        <j.0:BadExample>public class ShortMethod {
    public void a( int i ) { // Violation
    }
}</j.0:BadExample>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
        <j.0:Name>ShortMethodName</j.0:Name>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/161"/>
        <j.0:SecondaryTypeList>ShortMethodName</j.0:SecondaryTypeList>
        <j.0:PrimaryTypeList>ShortMethodName</j.0:PrimaryTypeList>
        <j.0:FatherName>ShortMethodName</j.0:FatherName>
        <j.0:ExcelId>pmdCodetyle_34</j.0:ExcelId>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Method names</j.0:SecondaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Name>Method names</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/284">
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/106">
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/284"/>
        <j.0:Rule>Static import is not used for static nested classes. They are imported with normal imports.</j.0:Rule>
        <j.0:SecondaryTypeList>Import statements</j.0:SecondaryTypeList>
        <j.0:PrimaryTypeList>Source file structure</j.0:PrimaryTypeList>
        <j.0:FatherName>Source file structure$$Import statements</j.0:FatherName>
        <j.0:Name>No static import for classes</j.0:Name>
        <j.0:ExcelId>google_15</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:BadExample>import static Lennon;
import static Ringo;
import static George;
import static Paul;
import static Yoko; // Too much !</j.0:BadExample>
    <j.0:ExcelId>pmdCodetyle_36</j.0:ExcelId>
    <j.0:Resource>Sun 1.5 Language Guide</j.0:Resource>
    <j.0:Name>TooManyStaticImports</j.0:Name>
    <j.0:FatherName>TooManyStaticImports</j.0:FatherName>
    <j.0:Rule>Do not overuse the static import feature.</j.0:Rule>
    <j.0:PrimaryTypeList>TooManyStaticImports</j.0:PrimaryTypeList>
    <j.0:RuleExplanation>If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. 
Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).</j.0:RuleExplanation>
    <j.0:SecondaryTypeList>TooManyStaticImports</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/165">
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:SecondaryTypeList>Parameter names</j.0:SecondaryTypeList>
    <j.0:ExcelId>google_74</j.0:ExcelId>
    <j.0:Name>Parameter names</j.0:Name>
    <j.0:Rule>Parameter names are written in lowerCamelCase.One-character parameter names in public methods should be avoided.</j.0:Rule>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:RelatedSpecification>78.0</j.0:RelatedSpecification>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/283">
        <j.0:ExcelId>pmdCodetyle_35</j.0:ExcelId>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
        <j.0:Rule>Fields, local variables, or parameter names that are very short are not helpful to the reader.</j.0:Rule>
        <j.0:PrimaryTypeList>ShortVariable</j.0:PrimaryTypeList>
        <j.0:Name>ShortVariable</j.0:Name>
        <j.0:SecondaryTypeList>ShortVariable</j.0:SecondaryTypeList>
        <j.0:FatherName>ShortVariable</j.0:FatherName>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:BadExample>public class Something {
    private int q = 15;                         // field - too short
    public static void main( String as[] ) {    // formal arg - too short
        int r = 20 + q;                         // local var - too short
        for (int i = 0; i &lt; 10; i++) {          // not a violation (inside 'for' loop)
            r += q;
        }
        for (Integer i : numbers) {             // not a violation (inside 'for-each' loop)
            r += q;
        }
    }
}</j.0:BadExample>
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/165"/>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:FatherName>Naming</j.0:FatherName>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/219">
    <j.0:PrimaryTypeList>Statements</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:SecondaryTypeList>if, if-else, if-else-if-else Statements</j.0:SecondaryTypeList>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/219/prosCluster/0">
        <j.0:ProsExample>if (condition) {
    statements;
}
 if (condition) {
    statements;
} else {
    statements;
}
 if (condition) {
    statements;
} else if (condition) {
    statements;
} else if (condition) {
    statements;
}</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
    <j.0:BadExample>if (condition) //AVOID! THIS OMITS THE BRACES {}!
    statement;</j.0:BadExample>
    <j.0:Rule>if statements always use braces {}.</j.0:Rule>
    <j.0:ExcelId>codeConvention_46</j.0:ExcelId>
    <j.0:FatherName>Statements</j.0:FatherName>
    <j.0:Name>if, if-else, if-else-if-else Statements</j.0:Name>
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/259">
        <j.0:ExcelId>pmdCodetyle_11</j.0:ExcelId>
        <j.0:FatherName>ControlStatementBraces</j.0:FatherName>
        <j.0:RuleExplanation>This usually makes the code clearer, and helps prepare the future when you need to add another statement.</j.0:RuleExplanation>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/259/prosCluster/0">
            <j.0:ProsExample>while (true) {  // preferred approach
  x++;
}</j.0:ProsExample>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:Name>ControlStatementBraces</j.0:Name>
        <j.0:Rule>It is recommended to use braces on ‘if … else’ statements and loop statements, even if they are optional.</j.0:Rule>
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/219"/>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
        <j.0:BadExample>while (true)    // not recommended
  x++;</j.0:BadExample>
        <j.0:PrimaryTypeList>ControlStatementBraces</j.0:PrimaryTypeList>
        <j.0:SecondaryTypeList>ControlStatementBraces</j.0:SecondaryTypeList>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
      </rdf:Description>
    </j.0:Similar>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/277">
    <j.0:ExcelId>pmdCodetyle_29</j.0:ExcelId>
    <j.0:PrimaryTypeList>PackageCase</j.0:PrimaryTypeList>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/275">
        <j.0:PrimaryTypeList>NoPackage</j.0:PrimaryTypeList>
        <j.0:BadExample>// no package declaration
public class ClassInDefaultPackage {
}</j.0:BadExample>
        <j.0:Rule>Detects when a class or interface does not have a package definition.</j.0:Rule>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:SecondaryTypeList>NoPackage</j.0:SecondaryTypeList>
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/277"/>
        <j.0:FatherName>NoPackage</j.0:FatherName>
        <j.0:Name>NoPackage</j.0:Name>
        <j.0:ExcelId>pmdCodetyle_27</j.0:ExcelId>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://pmd.github.io/pmd-6.9.0/pmd_rules_java_codestyle.html"/>
    <j.0:BadExample>package com.MyCompany;  // should be lowercase name
public class SomeClass {
}</j.0:BadExample>
    <j.0:FatherName>PackageCase</j.0:FatherName>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Rule>Detects when a package definition contains uppercase characters.</j.0:Rule>
    <j.0:Name>PackageCase</j.0:Name>
    <j.0:SecondaryTypeList>PackageCase</j.0:SecondaryTypeList>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/211">
    <j.0:SecondaryTypeList>Initialization</j.0:SecondaryTypeList>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Exception>The only reason not to initialize a variable where it's declared is if the initial value depends on some computation occurring first.</j.0:Exception>
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/144">
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/211"/>
        <j.0:Rule>Local variables are not habitually declared at the start of their containing block or block-like construct. Instead, local variables are declared close to the point they are first used (within reason), to minimize their scope. Local variable declarations typically have initializers, or are initialized immediately after declaration.</j.0:Rule>
        <j.0:ExcelId>google_53</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:ExcelId>codeConvention_38</j.0:ExcelId>
    <j.0:PrimaryTypeList>Declarations</j.0:PrimaryTypeList>
    <j.0:FatherName>Declarations</j.0:FatherName>
    <j.0:Rule>Try to initialize local variables where they're declared.</j.0:Rule>
    <j.0:Name>Initialization</j.0:Name>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/158">
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
    <j.0:RelatedSpecification>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/235">
        <j.0:RelatedSpecification rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/158"/>
        <j.0:ProsCluster>
          <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/235/prosCluster/0">
            <j.0:ProsExample>interface RasterDelegate;
interface Storing;</j.0:ProsExample>
          </rdf:Description>
        </j.0:ProsCluster>
        <j.0:Rule>Interface names should be capitalized like class names.</j.0:Rule>
        <j.0:ExcelId>codeConvention_62</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
      </rdf:Description>
    </j.0:RelatedSpecification>
    <j.0:FatherName>Naming</j.0:FatherName>
    <j.0:RelatedSpecification>78.0</j.0:RelatedSpecification>
    <j.0:ProsCluster>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/158/prosCluster/0">
        <j.0:ProsExample>Character,ImmutableList</j.0:ProsExample>
      </rdf:Description>
    </j.0:ProsCluster>
    <j.0:Name>Class names</j.0:Name>
    <j.0:SecondaryTypeList>Class names</j.0:SecondaryTypeList>
    <j.0:PrimaryTypeList>Naming</j.0:PrimaryTypeList>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:ExcelId>google_67</j.0:ExcelId>
    <j.0:Rule>Class names are written in UpperCamelCase.Class names are typically nouns or noun phrases.</j.0:Rule>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/217">
    <j.0:Similar>
      <rdf:Description rdf:about="http://www.semanticweb.org/CCBase/#CodeConvention/110">
        <j.0:Similar rdf:resource="http://www.semanticweb.org/CCBase/#CodeConvention/217"/>
        <j.0:Rule>Braces are used with if, else, for, do and while statements, even when the body is empty or contains only a single statement.

</j.0:Rule>
        <j.0:SecondaryTypeList>Braces</j.0:SecondaryTypeList>
        <j.0:PrimaryTypeList>Formatting</j.0:PrimaryTypeList>
        <j.0:FatherName>Formatting$$Braces</j.0:FatherName>
        <j.0:Name>Braces are used where optional</j.0:Name>
        <j.0:ExcelId>google_19</j.0:ExcelId>
        <j.0:OntologyType>CodeConvention</j.0:OntologyType>
        <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/https://google.github.io/styleguide/javaguide.html"/>
      </rdf:Description>
    </j.0:Similar>
    <j.0:Rule>Braces are used around all statements, even singletons, when they are part of a control structure, such as a if-else or for statement. This makes it easier to add statements without accidentally introducing bugs due to forgetting to add braces.</j.0:Rule>
    <j.0:ExcelId>codeConvention_44</j.0:ExcelId>
    <j.0:OntologyType>CodeConvention</j.0:OntologyType>
    <j.0:Source rdf:resource="http://www.semanticweb.org/CCBase/#Document/http://www.cs.toronto.edu/km/istar/OME3/codeconv/CodeConventionsTOC.doc.html"/>
  </rdf:Description>
</rdf:RDF>
